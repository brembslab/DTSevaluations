(log(5000)-log(1800))/log(1.06)
(log(5000)-log(3300))/log(1.06)
(log(5000)-log(2000))/log(1.06)
(log(5000)-log(3600))/log(1.06)
View(experiment)
View(sequence)
View(sequence)
ggplot(data=all.data, aes_string(all.data$a_pos)) +
geom_histogram(binwidth=10) +
labs(x="position [arb units]", y="frequency") +
xlim(-1800,1800) +
ggtitle("Pooled Position Histogram")
library(ggplot2)
load("B:/GitHub/DTSevaluations/example data/colorlearning/.RData")
ggplot(data=all.data, aes_string(all.data$a_pos)) +
geom_histogram(binwidth=10) +
labs(x="position [arb units]", y="frequency") +
xlim(-1800,1800) +
ggtitle("Pooled Position Histogram")
View(PIprofile)
table(sign(temp$fly))
View(temp)
table(sign(temp$torque))
View(PIprofile)
View(exp_groups)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
View(exp_groups)
knitr::opts_chunk$set(echo = TRUE)
rbind.fill(lapply(x,function(y){as.data.frame(exp_groups,stringsAsFactors=FALSE)}))
sapply(exp_groups, '[', seq(max(lengths(exp_groups))))
temp=sapply(exp_groups, '[', seq(max(lengths(exp_groups))))
View(temp)
colnames(temp) = as.character(unlist(temp[1, ]))
colnames(temp) = as.character(unlist(temp[1, ]))
View(temp)
View(exp_groups)
exp_groups <- sapply(exp_groups, '[', seq(max(lengths(exp_groups)))) #make dataframe from list
colnames(exp_groups) = as.character(unlist(exp_groups[1, ])) # make group names to column names
#tidy the dataframe up a little
exp_groups = exp_groups[-1, ,drop=F] #remove the first row which is now column names, without converting to a vector in case of single column
rownames(exp_groups) <- NULL #remove the numbers
View(exp_groups)
kable(exp_groups)
for(x in 1:NofGroups)
{
cat("<center><h4>",project.data[["resources"]][[x]][["title"]],"</h4></center>")
flyhistos <- grouped.flyhistos[[x]]
multiplot(plotlist = flyhistos, cols=round(NofPeriods/5)) #flyhistos
}
spectemp <- do.call("rbind", grouped.spectra) #create single data.frame with grouping variable from list of groups
print(ggplot(spectemp, aes(x=freq, y=mean, group = group)) +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd, fill = group), alpha=0.5) +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 2) +
scale_color_manual(values = boxcolors) +
scale_x_continuous(breaks = seq(0, 10, 2), limits = c(0, 10), expand=c(0,0)) +
scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0, 1), expand=c(0,0)) +
ggtitle("Powerspectra") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) + theme(legend.justification=c(1,0),
legend.position=c(0.94,0.60),
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+ ylab("mean rel. Power") + xlab("Frequency [Hz]"))
PIplots <- list()
for(x in 1:NofGroups)
{
PIprofile <- grouped.PIcombined[[x]] #get PIs (categories not used)
# plot graph
PIplots[[x]] <- ggplot(PIprofile, aes(x=period, y=PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge", fill=as.vector(na.omit(sequence$color)), colour="black", width=1) +
stat_summary(geom = "errorbar", fun.data = mean_se, position = "dodge", width=0, size=2) +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",samplesizes[x])) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) +
theme(panel.grid.major.x = element_blank(),panel.grid.minor = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("PI [rel. units]") +
xlab("Experiment Sequence") +
theme(aspect.ratio=aspect_ratio)
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
for(x in 1:NofGroups)
{
PIprofile <- grouped.PIcombined[[x]] #get PIs with categories
#plot graph
PIplots[[x]] <- ggplot(PIprofile, aes(period, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = as.vector(na.omit(sequence$color)), notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = PIprofile, aes(period, PIs, fill=category), position=position_jitter(0.3), shape=21, size=3) +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",samplesizes[x])) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("PI [rel. units]")+
xlab("Experiment Sequence") +
theme(aspect.ratio=0.8*aspect_ratio) +
scale_fill_discrete(name = "Categories") #legend title for categories
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
wilcoxon<-numeric()
for(x in 1:NofGroups){wilcoxon[x] = signif(wilcox.test(PIstat[[x]])$p.value, 3)} #test all groups against zero
#compute Bayes Factor for single group
if(NofGroups==1){
results.bayes=extractBF(ttestBF(na.omit(PIstat[[1]])))
results.bayes <- results.bayes[-c(3,4)] # drop the date and code columns
row.names(results.bayes) <- groupnames #group name as row name
results.bayes <- signif(results.bayes, digits=3) # reduce results to 3 significant digits
} else { #compute Bayes Factors for several groups
results.bayes<-list()
for(x in 1:NofGroups){results.bayes[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))} #extract BayesFactors for all groups
results.bayes<-do.call("rbind", results.bayes) #fuse all Bayes results into one dataframe
results.bayes <- results.bayes[-c(3,4)]# drop the date and code columns
row.names(results.bayes) <- groupnames #group name as row name
results.bayes <- signif(results.bayes, digits=3) # reduce results to 3 significant digits
}
# plot PI box plot test against zero
plots.singles<-list(ggplot(PIstatCombined, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = FALSE, outlier.color=NA, width=0.8, size=0.6) +
ggtitle("Wilcoxon") +
geom_jitter(data=PIstatCombined, aes(group, PIs, fill=category), position=position_jitter(0.3), shape=21, size=3) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes) +
wilcox.annotate(boxes, wilcoxon))
#add table with results and plot
plots.singles[[2]]<-tableGrob(results.bayes)
grid.arrange(grobs = plots.singles, ncol=2)
utest = signif(wilcox.test(PIprofilePooled[[1]],PIprofilePooled[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIprofilePooled[[1]],PIprofilePooled[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofilePooled[[1]]), na.omit(PIprofilePooled[[2]])))
#calculate FPR for priors set in project file#
#run first prior
prior=priorval[1]
out=calc.FPR(samplesizesPooled,utest,prior,abs(cohend))  #output=c(FPR,x0,y0,x1,y1)
fpz1=out[1]
#run second prior
prior=priorval[2]
out=calc.FPR(samplesizesPooled,utest,prior,abs(cohend))  #output=c(FPR,x0,y0,x1,y1)
fpz2=out[1]
#Power and likelihood ratio: NB for two sided test, need 2*y0
LR=out[5]/(2*out[3])        #lik ratio (Hi1/H0) =y1/2*y0
#make tidy table of results
results.utest<-data.frame(values=c(signif[1],
w.statistic,
cohend,
power,
signif(bayesF$bf, 3),
signif(bayesF$error, 3),
signif(fpz1, 3),
signif(fpz2, 3),
signif(LR, 3)))
rownames(results.utest)<-c("Significance level",
"MW U-Test, W",
"Cohen's D",
"stat. Power",
"Bayes Factor",
"Bayes Factor error",
paste("FP risk, prior ",priorval[1]),
paste("FP risk, prior ",priorval[2]),
"Likelihood Ratio")
# plot two PIs with asterisks
plots.2test<-list(ggplot(PIstatPooled, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data=PIstatPooled, aes(group, PIs, fill=category), position=position_jitter(0.3), shape=21, size=3) +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIprofilePooled[1]), colnames(PIprofilePooled[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.2test[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.2test, ncol=2)
View(plots.2test)
View(results.utest)
utest = signif(wilcox.test(PIprofilePooled[[1]],PIprofilePooled[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIprofilePooled[[1]],PIprofilePooled[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizesPooled[1], n2= samplesizesPooled[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofilePooled[[1]]), na.omit(PIprofilePooled[[2]])))
#calculate FPR for priors set in project file#
#run first prior
prior=priorval[1]
out=calc.FPR(samplesizesPooled,utest,prior,abs(cohend))  #output=c(FPR,x0,y0,x1,y1)
fpz1=out[1]
#run second prior
prior=priorval[2]
out=calc.FPR(samplesizesPooled,utest,prior,abs(cohend))  #output=c(FPR,x0,y0,x1,y1)
fpz2=out[1]
#Power and likelihood ratio: NB for two sided test, need 2*y0
LR=out[5]/(2*out[3])        #lik ratio (Hi1/H0) =y1/2*y0
#make tidy table of results
results.utest<-data.frame(values=c(signif[1],
w.statistic,
cohend,
power,
signif(bayesF$bf, 3),
signif(bayesF$error, 3),
signif(fpz1, 3),
signif(fpz2, 3),
signif(LR, 3)))
rownames(results.utest)<-c("Significance level",
"MW U-Test, W",
"Cohen's D",
"stat. Power",
"Bayes Factor",
"Bayes Factor error",
paste("FP risk, prior ",priorval[1]),
paste("FP risk, prior ",priorval[2]),
"Likelihood Ratio")
View(results.utest)
ggplot(PIstatPooled, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data=PIstatPooled, aes(group, PIs, fill=category), position=position_jitter(0.3), shape=21, size=3) +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIprofilePooled[1]), colnames(PIprofilePooled[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizesPooled)
View(PIstatPooled)
ggplot(PIstatPooled, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
#      geom_jitter(data=PIstatPooled, aes(group, PIs, fill=category), position=position_jitter(0.3), shape=21, size=3) +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIprofilePooled[1]), colnames(PIprofilePooled[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizesPooled)
ggplot(PIstatPooled, aes(group, PIs))
ggplot(PIstatPooled, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2)
ggplot(PIstatPooled, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6)
ggplot(PIstatPooled, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors[1..2], notch = TRUE, outlier.color=NA, width=0.8, size=0.6)
boxcolors[1]
boxcolors[1..2]
boxcolors[1-2]
boxcolors[1:2]
ggplot(PIstatPooled, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors[1:2], notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data=PIstatPooled, aes(group, PIs, fill=category), position=position_jitter(0.3), shape=21, size=3) +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIprofilePooled[1]), colnames(PIprofilePooled[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizesPooled)
ggplot(PIstatPooled, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors[1:2], notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data=PIstatPooled, aes(group, PIs, fill=category), position=position_jitter(0.3), shape=21, size=3) +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIprofilePooled[1]), colnames(PIprofilePooled[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes[1:2], samplesizesPooled)
utest = signif(wilcox.test(PIprofilePooled[[1]],PIprofilePooled[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIprofilePooled[[1]],PIprofilePooled[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizesPooled[1], n2= samplesizesPooled[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofilePooled[[1]]), na.omit(PIprofilePooled[[2]])))
#calculate FPR for priors set in project file#
#run first prior
prior=priorval[1]
out=calc.FPR(samplesizesPooled,utest,prior,abs(cohend))  #output=c(FPR,x0,y0,x1,y1)
fpz1=out[1]
#run second prior
prior=priorval[2]
out=calc.FPR(samplesizesPooled,utest,prior,abs(cohend))  #output=c(FPR,x0,y0,x1,y1)
fpz2=out[1]
#Power and likelihood ratio: NB for two sided test, need 2*y0
LR=out[5]/(2*out[3])        #lik ratio (Hi1/H0) =y1/2*y0
#make tidy table of results
results.utest<-data.frame(values=c(signif[1],
w.statistic,
cohend,
power,
signif(bayesF$bf, 3),
signif(bayesF$error, 3),
signif(fpz1, 3),
signif(fpz2, 3),
signif(LR, 3)))
rownames(results.utest)<-c("Significance level",
"MW U-Test, W",
"Cohen's D",
"stat. Power",
"Bayes Factor",
"Bayes Factor error",
paste("FP risk, prior ",priorval[1]),
paste("FP risk, prior ",priorval[2]),
"Likelihood Ratio")
# plot two PIs with asterisks
plots.2test<-list(ggplot(PIstatPooled, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors[1:2], notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data=PIstatPooled, aes(group, PIs, fill=category), position=position_jitter(0.3), shape=21, size=3) +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIprofilePooled[1]), colnames(PIprofilePooled[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes[1:2], samplesizesPooled))
#add table with results and plot
plots.2test[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.2test, ncol=2)
View(PIprofilePooled)
utest = signif(wilcox.test(PIprofilePooled[[1]],PIprofilePooled[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIprofilePooled[[1]],PIprofilePooled[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIprofilePooled[,1]), na.omit(PIprofilePooled[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizesPooled[1], n2= samplesizesPooled[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofilePooled[[1]]), na.omit(PIprofilePooled[[2]])))
#calculate FPR for priors set in project file#
#run first prior
prior=priorval[1]
out=calc.FPR(samplesizesPooled,utest,prior,abs(cohend))  #output=c(FPR,x0,y0,x1,y1)
fpz1=out[1]
#run second prior
prior=priorval[2]
out=calc.FPR(samplesizesPooled,utest,prior,abs(cohend))  #output=c(FPR,x0,y0,x1,y1)
fpz2=out[1]
#Power and likelihood ratio: NB for two sided test, need 2*y0
LR=out[5]/(2*out[3])        #lik ratio (Hi1/H0) =y1/2*y0
#make tidy table of results
results.utest<-data.frame(values=c(signif[1],
w.statistic,
cohend,
power,
signif(bayesF$bf, 3),
signif(bayesF$error, 3),
signif(fpz1, 3),
signif(fpz2, 3),
signif(LR, 3)))
rownames(results.utest)<-c("Significance level",
"MW U-Test, W",
"Cohen's D",
"stat. Power",
"Bayes Factor",
"Bayes Factor error",
paste("FP risk, prior ",priorval[1]),
paste("FP risk, prior ",priorval[2]),
"Likelihood Ratio")
# plot two PIs with asterisks
plots.2test<-list(ggplot(PIstatPooled, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors[1:2], notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data=PIstatPooled, aes(group, PIs, fill=category), position=position_jitter(0.3), shape=21, size=3) +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIprofilePooled[1]), colnames(PIprofilePooled[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes[1:2], samplesizesPooled))
#add table with results and plot
plots.2test[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.2test, ncol=2)
unpaired_median_diff <- dabest(PIstatPooled, group, PIs, idx = groupnames, paired = FALSE, func = median) #create estimation results list
groupnames=unique(groupdescriptions)
unpaired_median_diff <- dabest(PIstatPooled, group, PIs, idx = groupnames, paired = FALSE, func = median) #create estimation results list
print(plot(unpaired_median_diff)) #plot results
PIstatPooled$learningscore=project.data$statistics$`learning-score`$title #add x-axis value for split violin plots
print(ggplot(PIstatPooled, aes(learningscore, PIs, fill = group)) + scale_fill_manual(values=boxcolors) + geom_split_violin()) #plot spit violin plot
###### if there are more than two groups, try to pool some data into two groups
PooledGroups=FALSE
if(NofGroups>2 & length(unique(groupdescriptions))==2){
PooledGroups=TRUE #we have several groups, but only one control and one experimental group
#find out which group belongs to which pool
pool1=unname(groupnames[which(sapply(project.data[["resources"]], function(x) x["description"])==unique(groupdescriptions)[1])])
pool2=unname(groupnames[which(sapply(project.data[["resources"]], function(x) x["description"])==unique(groupdescriptions)[2])])
#create two new dataframe (one melted one not) with the pooled groups
#melted df
PIstatPooled=PIstatCombined #create copy of many group dataframe
PIstatPooled$group=gsub(x = PIstatPooled$group, pattern = paste(pool1, collapse = "|"), replacement = unique(groupdescriptions)[1]) #rename the ones from the first pool
PIstatPooled$group=gsub(x = PIstatPooled$group, pattern = paste(pool2, collapse = "|"), replacement = unique(groupdescriptions)[2]) #rename the ones from the second pool
#unmelted df
PIprofilePooled=dcast(PIstatPooled[c("group", "PIs")], PIs~...)[,2:3] #create new dataframe for PIs in the pooled groups this doesn't work with unequal samplesizes: as.data.frame(lapply(dcast(PIstatPooled[c("group", "PIs")], PIs~...), na.omit))
samplesizesPooled=colSums(!is.na(PIprofilePooled))  #find the new samplesizes for the different groups
}
###### continue for all projects with two groups
#### call RMarkdown for project evaluations ################################################
rmarkdown::render(paste(start.wd,"/project.Rmd", sep=""),
output_file = paste(project.data$experiment$name,"html", sep = "."),
output_dir = evaluation.path)
#### end RMarkdown for project evaluations #################################################
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
c(unique(groupdescriptions)[1],pool1)
#create table with pooled groups for later plotting
PooledGroups <- as.data.frame(c(unique(groupdescriptions)[1],pool1))
View(PooledGroups)
sq <- seq(max(length(pool1), length(pool2)))
data.frame(n[sq], s[sq])
sq <- seq(max(length(pool1), length(pool2)))
data.frame(pool1[sq], pool2[sq])
sq <- seq(max(length(pool1), length(pool2)))
PooledGroups <- data.frame(pool1[sq], pool2[sq])
colnames(PooledGroups)=unique(groupdescriptions)
View(PooledGroups)
cat("\n## Statistical tests between pooled groups\n")
cat("The following experimental groups were pooled into two groups:\n")
kable(PooledGroups)
utest = signif(wilcox.test(PIprofilePooled[[1]],PIprofilePooled[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIprofilePooled[[1]],PIprofilePooled[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIprofilePooled[,1]), na.omit(PIprofilePooled[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizesPooled[1], n2= samplesizesPooled[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofilePooled[[1]]), na.omit(PIprofilePooled[[2]])))
#calculate FPR for priors set in project file#
#run first prior
prior=priorval[1]
out=calc.FPR(samplesizesPooled,utest,prior,abs(cohend))  #output=c(FPR,x0,y0,x1,y1)
fpz1=out[1]
#run second prior
prior=priorval[2]
out=calc.FPR(samplesizesPooled,utest,prior,abs(cohend))  #output=c(FPR,x0,y0,x1,y1)
fpz2=out[1]
#Power and likelihood ratio: NB for two sided test, need 2*y0
LR=out[5]/(2*out[3])        #lik ratio (Hi1/H0) =y1/2*y0
#make tidy table of results
results.utest<-data.frame(values=c(signif[1],
w.statistic,
cohend,
power,
signif(bayesF$bf, 3),
signif(bayesF$error, 3),
signif(fpz1, 3),
signif(fpz2, 3),
signif(LR, 3)))
rownames(results.utest)<-c("Significance level",
"MW U-Test, W",
"Cohen's D",
"stat. Power",
"Bayes Factor",
"Bayes Factor error",
paste("FP risk, prior ",priorval[1]),
paste("FP risk, prior ",priorval[2]),
"Likelihood Ratio")
# plot two PIs with asterisks
plots.2test<-list(ggplot(PIstatPooled, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors[1:2], notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data=PIstatPooled, aes(group, PIs, fill=category), position=position_jitter(0.3), shape=21, size=3) +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIprofilePooled[1]), colnames(PIprofilePooled[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes[1:2], samplesizesPooled))
#add table with results and plot
plots.2test[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.2test, ncol=2)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
