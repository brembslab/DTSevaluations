theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(aes(color="black"),
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(inherit.aes=FALSE,
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(color="black",
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(color="black",
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=4, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(color="black",
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=4, vjust=0.1) +
samplesizes.annotate(boxes, samplesizes)
View(sequence)
any(sequence$type)="yt"
any(sequence$type="yt")
any(sequence$type=="yt")
any(sequence$type=="color")
knitr::opts_chunk$set(echo = TRUE)
PIs_present & om & any(sequence$type=="yt")
load("B:/GitHub/DTSevaluations/.RData")
PIs_present & om & any(sequence$type=="yt")
PIs_present
om
PIs_present & beforeafter & any(sequence$type=="yt")
PIs_present & beforeafter & any(sequence$type=="yt")
PIs_present & beforeafter & any(sequence$type=="yt")
PIs_present
OMvariables
OMperiods
View(OMparamsBefore_1)
View(OMparamsBefore_2)
View(OMparamsBefore_1)
PIstat
NofGroups
PIs_present & beforeafter & any(sequence$type=="yt") & NofGroups==2
PIstatCombined
avgPretest
PIprofile
groupnames[x]
View(PIstatPooled)
View(PIprofile)
View(PIprofilePooled)
grouped.PIcombined[[x]]
PIprofile <- grouped.PIcombined[[x]]
View(OMparamsBefore_1)
View(OMparamsBefore_2)
View(plotOMparamsBefore)
source("B:/GitHub/DTSevaluations/evaluate_datasets.R")
View(plotOMparamsAfter)
View(plotOMparamsBefore)
View(PIstatCombined)
View(PIprofile)
View(PI_tab)
View(PIplots)
View(pretestPIs)
testperiods
cumsum(c(1, diff(testperiods) != 1)))
cumsum(c(1, diff(testperiods) != 1))
as.vector(unlist(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[1]))
diff(testperiods)
diff(testperiods) != 1
as.vector(unlist(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[2]))
postperiods=as.vector(unlist(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[3]))
postperiods=as.vector(unlist(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[3]))
postperiods=as.vector(unlist(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[1]))
postperiods=as.vector(unlist(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[3]))
as.vector(unlist(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[3]))
split(testperiods, cumsum(c(1, diff(testperiods) != 1)))
testperiods, cumsum(c(1, diff(testperiods) != 1))
cumsum(c(1, diff(testperiods) != 1))
split(testperiods, cumsum(c(1, diff(testperiods) != 1)))
levels(split(testperiods, cumsum(c(1, diff(testperiods) != 1))))
max(split(testperiods, cumsum(c(1, diff(testperiods) != 1))))
length(split(testperiods, cumsum(c(1, diff(testperiods) != 1))))
tempL=length(split(testperiods, cumsum(c(1, diff(testperiods) != 1))))
postperiods=as.vector(unlist(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[tempL]))
postperiods
if(PIs_present){
postPIs <- list()
for(x in 1:NofGroups){
postPIs[[x]] <- grouped.PIprofiles[[x]][postperiods]     #extract the PIs into a temporary list
postPIs[[x]] <- rowMeans(postPIs[[x]])
}
postPIs <- as.data.frame(t(plyr::ldply(postPIs, rbind)))                    #convert PI list to a temproary data.frame
colnames(postPIs) <- unlist(sapply(dataset.data[["resources"]], '[', 'name'))  #add group names as column names to PItemp
postPIs <- melt(postPIs, measure.vars = names(postPIs), variable.name = "group", value.name = "category") #melt categories into dataframe with group as id-variable
}
View(postPIs)
if(PIs_present){
pretestPIs <- list()
for(x in 1:NofGroups){
pretestPIs[[x]] <- grouped.PIprofiles[[x]][pretestperiods]     #extract the PIs into a temporary list
pretestPIs[[x]] <- rowMeans(pretestPIs[[x]])
}
pretestPIs <- as.data.frame(t(plyr::ldply(pretestPIs, rbind)))                    #convert PI list to a temproary data.frame
colnames(pretestPIs) <- unlist(sapply(dataset.data[["resources"]], '[', 'name'))  #add group names as column names to PItemp
pretestPIs <- melt(pretestPIs, measure.vars = names(pretestPIs), variable.name = "group", value.name = "category", na.rm = TRUE) #melt categories into dataframe with group as id-variable
}
#Compute average post-training values and create dataframe
if(PIs_present){
postPIs <- list()
for(x in 1:NofGroups){
postPIs[[x]] <- grouped.PIprofiles[[x]][postperiods]     #extract the PIs into a temporary list
postPIs[[x]] <- rowMeans(postPIs[[x]])
}
postPIs <- as.data.frame(t(plyr::ldply(postPIs, rbind)))                    #convert PI list to a temproary data.frame
colnames(postPIs) <- unlist(sapply(dataset.data[["resources"]], '[', 'name'))  #add group names as column names to PItemp
postPIs <- melt(postPIs, measure.vars = names(postPIs), variable.name = "group", value.name = "category", na.rm = TRUE) #melt categories into dataframe with group as id-variable
}
OMPIcorr$OMBefore <- plotOMparamsBefore$AI.OM.
test_df=merge(plotOMparamsBefore, pretestPIs, plotOMparamsAfter, postPIs)
test_df=merge(plotOMparamsBefore, pretestPIs, plotOMparamsAfter, postPIs, all.y=TRUE)
test_df <- c(plotOMparamsBefore$AI.OM., pretestPIs$category, plotOMparamsAfter$AI.OM., postPIs$category)
test_df <- as.dataframe(plotOMparamsBefore$AI.OM., pretestPIs$category, plotOMparamsAfter$AI.OM., postPIs$category)
test_df <- as.data.frame(plotOMparamsBefore$AI.OM., pretestPIs$category, plotOMparamsAfter$AI.OM., postPIs$category)
test_df <- data.frame(plotOMparamsBefore$AI.OM., pretestPIs$category, plotOMparamsAfter$AI.OM., postPIs$category)
View(test_df)
OMPIcorr <- data.frame(plotOMparamsBefore$AI.OM., pretestPIs$category, plotOMparamsAfter$AI.OM., postPIs$category)
ggplot(OMPIcorr, aes(OMPIcorr$plotOMparamsBefore.AI.OM., OMPIcorr$pretestPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
plotOMparamsBefore$group=="right"
plotOMparamsBefore[plotOMparamsBefore$group=="right"]
plotOMparamsBefore[plotOMparamsBefore$group=="right",]
plotOMparamsBefore[plotOMparamsBefore$group=="right",]$AI.OM.
plotOMparamsBefore[plotOMparamsBefore$group=="right",]
-plotOMparamsBefore[plotOMparamsBefore$group=="right",]$AI.OM.
plotOMparamsBeforeplotOMparamsBefore[plotOMparamsBefore$group=="right",]$AI.OM.=-plotOMparamsBefore[plotOMparamsBefore$group=="right",]$AI.OM.
plotOMparamsBefore[plotOMparamsBefore$group=="right",]$AI.OM.=-plotOMparamsBefore[plotOMparamsBefore$group=="right",]$AI.OM.
plotOMparamsAfter[plotOMparamsBefore$group=="right",]$AI.OM.=-plotOMparamsAfter[plotOMparamsBefore$group=="right",]$AI.OM.
OMPIcorr <- data.frame(plotOMparamsBefore$AI.OM., pretestPIs$category, plotOMparamsAfter$AI.OM., postPIs$category)
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
OMPIcorr <- data.frame(plotOMparamsBefore$AI.OM., pretestPIs$category, plotOMparamsAfter$AI.OM., postPIs$category, postPIs$group)
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category, color = factor(postPIs.group))) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point(color = factor(postPIs.group)) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category, color = factor(postPIs.group))) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category, color = factor(postPIs.group))) +
geom_point() +
scale_fill_manual(values=c("purple", "blue")) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category, color = factor(postPIs.group))) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point() +
scale_fill_manual(values=c("purple", "blue")) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category, color = factor(postPIs.group))) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category, color = postPIs.group)) +
geom_point() +
scale_fill_manual(values=c("purple", "blue")) +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category, color = postPIs.group)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category, color = postPIs.group)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
dataset.data[["resources"]][[x]][["title"]]
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category, color = postPIs.group)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
ggtitle(paste("Correlation before training", ", N=",samplesizes[x]))
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
ggtitle(paste("Correlation before training", ", N=",samplesizes[x]))
samplesizes
sum(samplesizes)
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
ggtitle(paste("Correlation before training", ", N=",sum(samplesizes)))
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
ggtitle(paste("Correlation before training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
ggtitle(paste("Correlation before training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
scale_x_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
ggtitle(paste("Correlation before training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggtitle(paste("Correlation before training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth")
ggtitle(paste("Correlation after training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category))) +
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
ggtitle(paste("Correlation after training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
ggtitle(paste("Correlation after training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
ggtitle(paste("Correlation after training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1.2)) +
scale_x_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
ggtitle(paste("Correlation after training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1.4)) +
scale_x_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
ggtitle(paste("Correlation after training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
scale_x_continuous(breaks = seq(-1, 1, .2), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
ggtitle(paste("Correlation after training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
ggtitle(paste("Correlation before training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
geom = "smooth") +
stat_poly_eq() +
ggtitle(paste("Correlation after training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
library(ggpmisc)
ggplot(OMPIcorr, aes(plotOMparamsAfter.AI.OM., postPIs.category)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation after training",", N=",sum(samplesizes))) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
library(ggpmisc)
source("B:/GitHub/DTSevaluations/evaluate_datasets.R")
source("B:/GitHub/DTSevaluations/evaluate_datasets.R")
