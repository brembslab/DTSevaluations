#str(parameter_fit)
############################Extract parameter
### slopes
asloperight <- parameter_fit$slope1    #slope right
aslopeleft <- parameter_fit$slope2     #slope left
OS <- mean(c(abs(asloperight),abs(aslopeleft)))
### magnitudes
aMaxasympright <- (parameter_fit$maximum_y)-transform   #Asymp  max right
aMinasymp <- (parameter_fit$finalAsymptoteIntensity)-transform    #Asymp  min left
OM <- (abs(diff(c(aMaxasympright,aMinasymp)))/2)    # Opt magnitude
######## Asymmetry Index sigmoidal Model
AI_OM <- (aMaxasympright +aMinasymp)/(abs(aMaxasympright)+abs(aMinasymp))   #normalized AS OM for doublesigmoidal fit
AI_OS <- (asloperight +aslopeleft)/(abs(asloperight)+abs(aslopeleft))   #normalized AS OM for doublesigmoidal fit
}
allparameters <- c(OM,OS,AI_OM,AI_OS)
tempOMparams <- as.data.frame(rbind(as.numeric(allparameters)))      #convert to dataframe
names(tempOMparams) = c("OM","OS","AI(OM)", "AI(OS)")    #set column names
rownames(tempOMparams)[1]=as.character(flyname)                   #set row names to flynames
#delete used variables
rm(OM,OS,AI_OM,AI_OS, fitObjall, DoubleSig, transform, AllOMtraces)
if(experiment$meter_type=="Goetz"){ #adjust for differences in measuring devices
startOM=20
slopeduration=100
crit_diff=10
crit_slope=0.001
} else {
startOM=200
slopeduration=300
crit_diff=50
crit_slope=0.01
}
########################################################  subset traces (right and left)
OMmidpoint = OMdata$time[nrow(OMdata)]/2
#right turning traces
x1=OMdata$time[OMdata$time<=OMmidpoint]                     #time
y=OMdata[[as.character(flyname)]][OMdata$time<=OMmidpoint]  #mean right OM response
righttraces <-sortedXyData(x1,y)                                     #create sortedXYdata object
#left turning traces
x1=OMdata$time[OMdata$time>OMmidpoint]                      #time
y=OMdata[[as.character(flyname)]][OMdata$time>OMmidpoint]   #mean left OM response
lefttraces <-sortedXyData(x1,y)                             #create sortedXYdata object
#all traces
xall = OMdata$time   #time
yall = OMdata[[as.character(flyname)]] # mean OM response
AllOMtraces <- sortedXyData(xall,yall)   #create sortedXYdata object
#################################################################### Optomotor Differences start-end
###right
rightbegin <-head(righttraces, startOM)  #beginning of OM
rightend <- tail(righttraces, 200) #traces at last 10s
meanrbegin <-mean(rightbegin$y)    #mean response begin
meanrend <-mean(rightend$y)        #mean response end
diffresponseright <-diff(c(meanrbegin,meanrend))   # Difference OM Response begin and end
###left
leftbegin <-head(lefttraces, startOM)  #beginning of OM
leftend <- tail(lefttraces, 200) #traces at last 10s
meanlbegin <-mean(leftbegin$y)    #mean response begin
meanlend <-mean(leftend$y)        #mean response end
diffresponseleft <-diff(c(meanlbegin,meanlend))   # Differenz Response begin and end
## mean
diffresponse <- mean(c(abs(diffresponseright),abs(diffresponseleft)))     # mean Difference Optomotor Response
################################################################# Optomotor Slope
rightstart <-head(righttraces, 200)  #traces at first 10s
sloperight <- lm(y~x,data = rightstart)$coefficients[2]
leftstart <-head(lefttraces, 200)  #traces at first 10s
slopeleft <- lm(y~x,data = leftstart)$coefficients[2]
slope <- mean(c(abs(sloperight),abs(slopeleft)))
###################################################################### Plot Parameters for debugging and checking
decidemod <-ggplot(data=AllOMtraces, aes(x=x, y=y)) + geom_point() +
geom_vline(xintercept = 30000,size=1.5)+
geom_segment(x = 0, y = meanrbegin, xend = 5000, yend = meanrbegin,col="blue")+
geom_segment(x = 25000, y = meanrend, xend = OMmidpoint, yend = meanrend,col="blue")+
geom_segment(x = 25000, y = meanrbegin, xend = 25000, yend = meanrend,col="red")+
geom_segment(x = OMmidpoint, y = meanlbegin, xend = 35000, yend = meanlbegin,col="blue")+
geom_segment(x = 55000, y = meanlend, xend = OMmidpoint*2, yend = meanlend,col="blue")+
geom_segment(x = 35000, y = meanlbegin, xend = 35000, yend = meanlend,col="red")+
geom_smooth(method='lm', formula= y~x,data = rightstart,col ="orange")+
geom_smooth(method='lm', formula= y~x,data = leftstart,col ="orange")
#  plot(decidemod)
################################################################# Decide between Models
if (diffresponse<crit_diff | slope<crit_slope | sloperight<0 | slopeleft>0) {   #if OM/Slope  low, or slope for right traces negative, slope for left traces positive ->  take linear Model
####################################linear model
###right traces
linfitright <- lm(y~x,data = righttraces)      # fit linear model
linmagnright <- mean(righttraces$y)            # mean OM response right
linsloperight <-linfitright$coefficients[2]    # slope right
###left traces
linfitleft <- lm(y~x,data = lefttraces)        # fit linear Model
linmagnleft <- mean(lefttraces$y)              # mean OM response left
linslopeleft <-linfitleft$coefficients[2]      # slope left
### plot linear Model for debugging and testing
linplot <- ggplot(data=AllOMtraces, aes(x=x, y=y)) + geom_point() +geom_vline(xintercept = 30000,size=1.5) +
geom_smooth(method='lm', formula= y~x,data = righttraces,col ="blue")+
geom_smooth(method='lm', formula= y~x,data = lefttraces,col ="red")
plot(linplot)
### Optomotor magnnitude and slop
OS <- mean(c(abs(linsloperight),abs(linslopeleft)))           # mean slopes lin mod
OM <- (abs(diff(c(linmagnright,linmagnleft)))/2)              # mean Opto mags lin mod
### Asymmetry index linear Model
AI_OM <- (linmagnright+linmagnleft)/(abs(linmagnright)+abs(linmagnleft))   # normalized AI OM for linear Model
AI_OS <- (linsloperight+linslopeleft)/(abs(linsloperight)+abs(linslopeleft)) #normalized AI OS for linear Model
} else {
#################################  double sigmoidal Model
transform <- abs(min(AllOMtraces$y))      # find smallest value in OM traces for shifting to positive values
AllOMtraces$y <- AllOMtraces$y + transform # transform y values positive
colnames(AllOMtraces) <- c("time", "intensity")   #change colnames
fitObjall <- fitAndCategorize(AllOMtraces, threshold_minimum_for_intensity_maximum  = 0.3,    # fit sigmoidal model
threshold_intensity_range=0.1,
threshold_t0_max_int = 3000)
DoubleSig <- figureModelCurves(dataInput = fitObjall$normalizedInput,
doubleSigmoidalFitVector = fitObjall$doubleSigmoidalModel,    # double sigmoid plot
showParameterRelatedLines = TRUE)
plot(DoubleSig)   #plot souble sigmoid model
parameter_fit<- fitObjall$doubleSigmoidalModel    # parameter
#str(parameter_fit)
############################Extract parameter
### slopes
asloperight <- parameter_fit$slope1    #slope right
aslopeleft <- parameter_fit$slope2     #slope left
OS <- mean(c(abs(asloperight),abs(aslopeleft)))
### magnitudes
aMaxasympright <- (parameter_fit$maximum_y)-transform   #Asymp  max right
aMinasymp <- (parameter_fit$finalAsymptoteIntensity)-transform    #Asymp  min left
OM <- (abs(diff(c(aMaxasympright,aMinasymp)))/2)    # Opt magnitude
######## Asymmetry Index sigmoidal Model
AI_OM <- (aMaxasympright +aMinasymp)/(abs(aMaxasympright)+abs(aMinasymp))   #normalized AS OM for doublesigmoidal fit
AI_OS <- (asloperight +aslopeleft)/(abs(asloperight)+abs(aslopeleft))   #normalized AS OM for doublesigmoidal fit
}
allparameters <- c(OM,OS,AI_OM,AI_OS)
tempOMparams <- as.data.frame(rbind(as.numeric(allparameters)))      #convert to dataframe
names(tempOMparams) = c("OM","OS","AI(OM)", "AI(OS)")    #set column names
rownames(tempOMparams)[1]=as.character(flyname)                   #set row names to flynames
#delete used variables
rm(OM,OS,AI_OM,AI_OS, fitObjall, DoubleSig, transform, AllOMtraces)
if(experiment$meter_type=="Goetz"){ #adjust for differences in measuring devices
startOM=20
slopeduration=100
crit_diff=10
crit_slope=0.001
} else {
startOM=200
slopeduration=300
crit_diff=50
crit_slope=0.01
}
########################################################  subset traces (right and left)
OMmidpoint = OMdata$time[nrow(OMdata)]/2
#right turning traces
x1=OMdata$time[OMdata$time<=OMmidpoint]                     #time
y=OMdata[[as.character(flyname)]][OMdata$time<=OMmidpoint]  #mean right OM response
righttraces <-sortedXyData(x1,y)                                     #create sortedXYdata object
#left turning traces
x1=OMdata$time[OMdata$time>OMmidpoint]                      #time
y=OMdata[[as.character(flyname)]][OMdata$time>OMmidpoint]   #mean left OM response
lefttraces <-sortedXyData(x1,y)                             #create sortedXYdata object
#all traces
xall = OMdata$time   #time
yall = OMdata[[as.character(flyname)]] # mean OM response
AllOMtraces <- sortedXyData(xall,yall)   #create sortedXYdata object
#################################################################### Optomotor Differences start-end
###right
rightbegin <-head(righttraces, startOM)  #beginning of OM
rightend <- tail(righttraces, 200) #traces at last 10s
meanrbegin <-mean(rightbegin$y)    #mean response begin
meanrend <-mean(rightend$y)        #mean response end
diffresponseright <-diff(c(meanrbegin,meanrend))   # Difference OM Response begin and end
###left
leftbegin <-head(lefttraces, startOM)  #beginning of OM
leftend <- tail(lefttraces, 200) #traces at last 10s
meanlbegin <-mean(leftbegin$y)    #mean response begin
meanlend <-mean(leftend$y)        #mean response end
diffresponseleft <-diff(c(meanlbegin,meanlend))   # Differenz Response begin and end
## mean
diffresponse <- mean(c(abs(diffresponseright),abs(diffresponseleft)))     # mean Difference Optomotor Response
################################################################# Optomotor Slope
rightstart <-head(righttraces, 200)  #traces at first 10s
sloperight <- lm(y~x,data = rightstart)$coefficients[2]
leftstart <-head(lefttraces, 200)  #traces at first 10s
slopeleft <- lm(y~x,data = leftstart)$coefficients[2]
slope <- mean(c(abs(sloperight),abs(slopeleft)))
###################################################################### Plot Parameters for debugging and checking
decidemod <-ggplot(data=AllOMtraces, aes(x=x, y=y)) + geom_point() +
geom_vline(xintercept = 30000,size=1.5)+
geom_segment(x = 0, y = meanrbegin, xend = 5000, yend = meanrbegin,col="blue")+
geom_segment(x = 25000, y = meanrend, xend = OMmidpoint, yend = meanrend,col="blue")+
geom_segment(x = 25000, y = meanrbegin, xend = 25000, yend = meanrend,col="red")+
geom_segment(x = OMmidpoint, y = meanlbegin, xend = 35000, yend = meanlbegin,col="blue")+
geom_segment(x = 55000, y = meanlend, xend = OMmidpoint*2, yend = meanlend,col="blue")+
geom_segment(x = 35000, y = meanlbegin, xend = 35000, yend = meanlend,col="red")+
geom_smooth(method='lm', formula= y~x,data = rightstart,col ="orange")+
geom_smooth(method='lm', formula= y~x,data = leftstart,col ="orange")
#  plot(decidemod)
################################################################# Decide between Models
if (diffresponse<crit_diff | slope<crit_slope | sloperight<0 | slopeleft>0) {   #if OM/Slope  low, or slope for right traces negative, slope for left traces positive ->  take linear Model
####################################linear model
###right traces
linfitright <- lm(y~x,data = righttraces)      # fit linear model
linmagnright <- mean(righttraces$y)            # mean OM response right
linsloperight <-linfitright$coefficients[2]    # slope right
###left traces
linfitleft <- lm(y~x,data = lefttraces)        # fit linear Model
linmagnleft <- mean(lefttraces$y)              # mean OM response left
linslopeleft <-linfitleft$coefficients[2]      # slope left
### plot linear Model for debugging and testing
linplot <- ggplot(data=AllOMtraces, aes(x=x, y=y)) + geom_point() +geom_vline(xintercept = 30000,size=1.5) +
geom_smooth(method='lm', formula= y~x,data = righttraces,col ="blue")+
geom_smooth(method='lm', formula= y~x,data = lefttraces,col ="red")
plot(linplot)
### Optomotor magnnitude and slop
OS <- mean(c(abs(linsloperight),abs(linslopeleft)))           # mean slopes lin mod
OM <- (abs(diff(c(linmagnright,linmagnleft)))/2)              # mean Opto mags lin mod
### Asymmetry index linear Model
AI_OM <- (linmagnright+linmagnleft)/(abs(linmagnright)+abs(linmagnleft))   # normalized AI OM for linear Model
AI_OS <- (linsloperight+linslopeleft)/(abs(linsloperight)+abs(linslopeleft)) #normalized AI OS for linear Model
} else {
#################################  double sigmoidal Model
transform <- abs(min(AllOMtraces$y))      # find smallest value in OM traces for shifting to positive values
AllOMtraces$y <- AllOMtraces$y + transform # transform y values positive
colnames(AllOMtraces) <- c("time", "intensity")   #change colnames
fitObjall <- fitAndCategorize(AllOMtraces, threshold_minimum_for_intensity_maximum  = 0.3,    # fit sigmoidal model
threshold_intensity_range=0.1,
threshold_t0_max_int = 3000)
DoubleSig <- figureModelCurves(dataInput = fitObjall$normalizedInput,
doubleSigmoidalFitVector = fitObjall$doubleSigmoidalModel,    # double sigmoid plot
showParameterRelatedLines = TRUE)
plot(DoubleSig)   #plot souble sigmoid model
parameter_fit<- fitObjall$doubleSigmoidalModel    # parameter
#str(parameter_fit)
############################Extract parameter
### slopes
asloperight <- parameter_fit$slope1    #slope right
aslopeleft <- parameter_fit$slope2     #slope left
OS <- mean(c(abs(asloperight),abs(aslopeleft)))
### magnitudes
aMaxasympright <- (parameter_fit$maximum_y)-transform   #Asymp  max right
aMinasymp <- (parameter_fit$finalAsymptoteIntensity)-transform    #Asymp  min left
OM <- (abs(diff(c(aMaxasympright,aMinasymp)))/2)    # Opt magnitude
######## Asymmetry Index sigmoidal Model
AI_OM <- (aMaxasympright +aMinasymp)/(abs(aMaxasympright)+abs(aMinasymp))   #normalized AS OM for doublesigmoidal fit
AI_OS <- (asloperight +aslopeleft)/(abs(asloperight)+abs(aslopeleft))   #normalized AS OM for doublesigmoidal fit
}
allparameters <- c(OM,OS,AI_OM,AI_OS)
tempOMparams <- as.data.frame(rbind(as.numeric(allparameters)))      #convert to dataframe
names(tempOMparams) = c("OM","OS","AI(OM)", "AI(OS)")    #set column names
rownames(tempOMparams)[1]=as.character(flyname)                   #set row names to flynames
#delete used variables
rm(OM,OS,AI_OM,AI_OS, fitObjall, DoubleSig, transform, AllOMtraces)
if(experiment$meter_type=="Goetz"){ #adjust for differences in measuring devices
startOM=20
slopeduration=100
crit_diff=10
crit_slope=0.001
} else {
startOM=200
slopeduration=300
crit_diff=50
crit_slope=0.01
}
########################################################  subset traces (right and left)
OMmidpoint = OMdata$time[nrow(OMdata)]/2
#right turning traces
x1=OMdata$time[OMdata$time<=OMmidpoint]                     #time
y=OMdata[[as.character(flyname)]][OMdata$time<=OMmidpoint]  #mean right OM response
righttraces <-sortedXyData(x1,y)                                     #create sortedXYdata object
#left turning traces
x1=OMdata$time[OMdata$time>OMmidpoint]                      #time
y=OMdata[[as.character(flyname)]][OMdata$time>OMmidpoint]   #mean left OM response
lefttraces <-sortedXyData(x1,y)                             #create sortedXYdata object
#all traces
xall = OMdata$time   #time
yall = OMdata[[as.character(flyname)]] # mean OM response
AllOMtraces <- sortedXyData(xall,yall)   #create sortedXYdata object
#################################################################### Optomotor Differences start-end
###right
rightbegin <-head(righttraces, startOM)  #beginning of OM
rightend <- tail(righttraces, 200) #traces at last 10s
meanrbegin <-mean(rightbegin$y)    #mean response begin
meanrend <-mean(rightend$y)        #mean response end
diffresponseright <-diff(c(meanrbegin,meanrend))   # Difference OM Response begin and end
###left
leftbegin <-head(lefttraces, startOM)  #beginning of OM
leftend <- tail(lefttraces, 200) #traces at last 10s
meanlbegin <-mean(leftbegin$y)    #mean response begin
meanlend <-mean(leftend$y)        #mean response end
diffresponseleft <-diff(c(meanlbegin,meanlend))   # Differenz Response begin and end
## mean
diffresponse <- mean(c(abs(diffresponseright),abs(diffresponseleft)))     # mean Difference Optomotor Response
################################################################# Optomotor Slope
rightstart <-head(righttraces, 200)  #traces at first 10s
sloperight <- lm(y~x,data = rightstart)$coefficients[2]
leftstart <-head(lefttraces, 200)  #traces at first 10s
slopeleft <- lm(y~x,data = leftstart)$coefficients[2]
slope <- mean(c(abs(sloperight),abs(slopeleft)))
###################################################################### Plot Parameters for debugging and checking
decidemod <-ggplot(data=AllOMtraces, aes(x=x, y=y)) + geom_point() +
geom_vline(xintercept = 30000,size=1.5)+
geom_segment(x = 0, y = meanrbegin, xend = 5000, yend = meanrbegin,col="blue")+
geom_segment(x = 25000, y = meanrend, xend = OMmidpoint, yend = meanrend,col="blue")+
geom_segment(x = 25000, y = meanrbegin, xend = 25000, yend = meanrend,col="red")+
geom_segment(x = OMmidpoint, y = meanlbegin, xend = 35000, yend = meanlbegin,col="blue")+
geom_segment(x = 55000, y = meanlend, xend = OMmidpoint*2, yend = meanlend,col="blue")+
geom_segment(x = 35000, y = meanlbegin, xend = 35000, yend = meanlend,col="red")+
geom_smooth(method='lm', formula= y~x,data = rightstart,col ="orange")+
geom_smooth(method='lm', formula= y~x,data = leftstart,col ="orange")
#  plot(decidemod)
################################################################# Decide between Models
if (diffresponse<crit_diff | slope<crit_slope | sloperight<0 | slopeleft>0) {   #if OM/Slope  low, or slope for right traces negative, slope for left traces positive ->  take linear Model
####################################linear model
###right traces
linfitright <- lm(y~x,data = righttraces)      # fit linear model
linmagnright <- mean(righttraces$y)            # mean OM response right
linsloperight <-linfitright$coefficients[2]    # slope right
###left traces
linfitleft <- lm(y~x,data = lefttraces)        # fit linear Model
linmagnleft <- mean(lefttraces$y)              # mean OM response left
linslopeleft <-linfitleft$coefficients[2]      # slope left
### plot linear Model for debugging and testing
linplot <- ggplot(data=AllOMtraces, aes(x=x, y=y)) + geom_point() +geom_vline(xintercept = 30000,size=1.5) +
geom_smooth(method='lm', formula= y~x,data = righttraces,col ="blue")+
geom_smooth(method='lm', formula= y~x,data = lefttraces,col ="red")
plot(linplot)
### Optomotor magnnitude and slop
OS <- mean(c(abs(linsloperight),abs(linslopeleft)))           # mean slopes lin mod
OM <- (abs(diff(c(linmagnright,linmagnleft)))/2)              # mean Opto mags lin mod
### Asymmetry index linear Model
AI_OM <- (linmagnright+linmagnleft)/(abs(linmagnright)+abs(linmagnleft))   # normalized AI OM for linear Model
AI_OS <- (linsloperight+linslopeleft)/(abs(linsloperight)+abs(linslopeleft)) #normalized AI OS for linear Model
} else {
#################################  double sigmoidal Model
transform <- abs(min(AllOMtraces$y))      # find smallest value in OM traces for shifting to positive values
AllOMtraces$y <- AllOMtraces$y + transform # transform y values positive
colnames(AllOMtraces) <- c("time", "intensity")   #change colnames
fitObjall <- fitAndCategorize(AllOMtraces, threshold_minimum_for_intensity_maximum  = 0.3,    # fit sigmoidal model
threshold_intensity_range=0.1,
threshold_t0_max_int = 3000)
DoubleSig <- figureModelCurves(dataInput = fitObjall$normalizedInput,
doubleSigmoidalFitVector = fitObjall$doubleSigmoidalModel,    # double sigmoid plot
showParameterRelatedLines = TRUE)
plot(DoubleSig)   #plot souble sigmoid model
parameter_fit<- fitObjall$doubleSigmoidalModel    # parameter
#str(parameter_fit)
############################Extract parameter
### slopes
asloperight <- parameter_fit$slope1    #slope right
aslopeleft <- parameter_fit$slope2     #slope left
OS <- mean(c(abs(asloperight),abs(aslopeleft)))
### magnitudes
aMaxasympright <- (parameter_fit$maximum_y)-transform   #Asymp  max right
aMinasymp <- (parameter_fit$finalAsymptoteIntensity)-transform    #Asymp  min left
OM <- (abs(diff(c(aMaxasympright,aMinasymp)))/2)    # Opt magnitude
######## Asymmetry Index sigmoidal Model
AI_OM <- (aMaxasympright +aMinasymp)/(abs(aMaxasympright)+abs(aMinasymp))   #normalized AS OM for doublesigmoidal fit
AI_OS <- (asloperight +aslopeleft)/(abs(asloperight)+abs(aslopeleft))   #normalized AS OM for doublesigmoidal fit
}
allparameters <- c(OM,OS,AI_OM,AI_OS)
tempOMparams <- as.data.frame(rbind(as.numeric(allparameters)))      #convert to dataframe
names(tempOMparams) = c("OM","OS","AI(OM)", "AI(OS)")    #set column names
rownames(tempOMparams)[1]=as.character(flyname)                   #set row names to flynames
#delete used variables
rm(OM,OS,AI_OM,AI_OS, fitObjall, DoubleSig, transform, AllOMtraces)
if(experiment$meter_type=="Goetz"){ #adjust for differences in measuring devices
startOM=20
slopeduration=100
crit_diff=10
crit_slope=0.001
} else {
startOM=200
slopeduration=300
crit_diff=50
crit_slope=0.01
}
########################################################  subset traces (right and left)
OMmidpoint = OMdata$time[nrow(OMdata)]/2
#right turning traces
x1=OMdata$time[OMdata$time<=OMmidpoint]                     #time
y=OMdata[[as.character(flyname)]][OMdata$time<=OMmidpoint]  #mean right OM response
righttraces <-sortedXyData(x1,y)                                     #create sortedXYdata object
#left turning traces
x1=OMdata$time[OMdata$time>OMmidpoint]                      #time
y=OMdata[[as.character(flyname)]][OMdata$time>OMmidpoint]   #mean left OM response
lefttraces <-sortedXyData(x1,y)                             #create sortedXYdata object
#all traces
xall = OMdata$time   #time
yall = OMdata[[as.character(flyname)]] # mean OM response
AllOMtraces <- sortedXyData(xall,yall)   #create sortedXYdata object
#################################################################### Optomotor Differences start-end
###right
rightbegin <-head(righttraces, startOM)  #beginning of OM
rightend <- tail(righttraces, 200) #traces at last 10s
meanrbegin <-mean(rightbegin$y)    #mean response begin
meanrend <-mean(rightend$y)        #mean response end
diffresponseright <-diff(c(meanrbegin,meanrend))   # Difference OM Response begin and end
###left
leftbegin <-head(lefttraces, startOM)  #beginning of OM
leftend <- tail(lefttraces, 200) #traces at last 10s
meanlbegin <-mean(leftbegin$y)    #mean response begin
meanlend <-mean(leftend$y)        #mean response end
diffresponseleft <-diff(c(meanlbegin,meanlend))   # Differenz Response begin and end
## mean
diffresponse <- mean(c(abs(diffresponseright),abs(diffresponseleft)))     # mean Difference Optomotor Response
################################################################# Optomotor Slope
rightstart <-head(righttraces, 200)  #traces at first 10s
sloperight <- lm(y~x,data = rightstart)$coefficients[2]
leftstart <-head(lefttraces, 200)  #traces at first 10s
slopeleft <- lm(y~x,data = leftstart)$coefficients[2]
slope <- mean(c(abs(sloperight),abs(slopeleft)))
###################################################################### Plot Parameters for debugging and checking
decidemod <-ggplot(data=AllOMtraces, aes(x=x, y=y)) + geom_point() +
geom_vline(xintercept = 30000,size=1.5)+
geom_segment(x = 0, y = meanrbegin, xend = 5000, yend = meanrbegin,col="blue")+
geom_segment(x = 25000, y = meanrend, xend = OMmidpoint, yend = meanrend,col="blue")+
geom_segment(x = 25000, y = meanrbegin, xend = 25000, yend = meanrend,col="red")+
geom_segment(x = OMmidpoint, y = meanlbegin, xend = 35000, yend = meanlbegin,col="blue")+
geom_segment(x = 55000, y = meanlend, xend = OMmidpoint*2, yend = meanlend,col="blue")+
geom_segment(x = 35000, y = meanlbegin, xend = 35000, yend = meanlend,col="red")+
geom_smooth(method='lm', formula= y~x,data = rightstart,col ="orange")+
geom_smooth(method='lm', formula= y~x,data = leftstart,col ="orange")
#  plot(decidemod)
################################################################# Decide between Models
if (diffresponse<crit_diff | slope<crit_slope | sloperight<0 | slopeleft>0) {   #if OM/Slope  low, or slope for right traces negative, slope for left traces positive ->  take linear Model
####################################linear model
###right traces
linfitright <- lm(y~x,data = righttraces)      # fit linear model
linmagnright <- mean(righttraces$y)            # mean OM response right
linsloperight <-linfitright$coefficients[2]    # slope right
###left traces
linfitleft <- lm(y~x,data = lefttraces)        # fit linear Model
linmagnleft <- mean(lefttraces$y)              # mean OM response left
linslopeleft <-linfitleft$coefficients[2]      # slope left
### plot linear Model for debugging and testing
linplot <- ggplot(data=AllOMtraces, aes(x=x, y=y)) + geom_point() +geom_vline(xintercept = 30000,size=1.5) +
geom_smooth(method='lm', formula= y~x,data = righttraces,col ="blue")+
geom_smooth(method='lm', formula= y~x,data = lefttraces,col ="red")
plot(linplot)
### Optomotor magnnitude and slop
OS <- mean(c(abs(linsloperight),abs(linslopeleft)))           # mean slopes lin mod
OM <- (abs(diff(c(linmagnright,linmagnleft)))/2)              # mean Opto mags lin mod
### Asymmetry index linear Model
AI_OM <- (linmagnright+linmagnleft)/(abs(linmagnright)+abs(linmagnleft))   # normalized AI OM for linear Model
AI_OS <- (linsloperight+linslopeleft)/(abs(linsloperight)+abs(linslopeleft)) #normalized AI OS for linear Model
} else {
#################################  double sigmoidal Model
transform <- abs(min(AllOMtraces$y))      # find smallest value in OM traces for shifting to positive values
AllOMtraces$y <- AllOMtraces$y + transform # transform y values positive
colnames(AllOMtraces) <- c("time", "intensity")   #change colnames
fitObjall <- fitAndCategorize(AllOMtraces, threshold_minimum_for_intensity_maximum  = 0.3,    # fit sigmoidal model
threshold_intensity_range=0.1,
threshold_t0_max_int = 3000)
DoubleSig <- figureModelCurves(dataInput = fitObjall$normalizedInput,
doubleSigmoidalFitVector = fitObjall$doubleSigmoidalModel,    # double sigmoid plot
showParameterRelatedLines = TRUE)
plot(DoubleSig)   #plot souble sigmoid model
parameter_fit<- fitObjall$doubleSigmoidalModel    # parameter
#str(parameter_fit)
############################Extract parameter
### slopes
asloperight <- parameter_fit$slope1    #slope right
aslopeleft <- parameter_fit$slope2     #slope left
OS <- mean(c(abs(asloperight),abs(aslopeleft)))
### magnitudes
aMaxasympright <- (parameter_fit$maximum_y)-transform   #Asymp  max right
aMinasymp <- (parameter_fit$finalAsymptoteIntensity)-transform    #Asymp  min left
OM <- (abs(diff(c(aMaxasympright,aMinasymp)))/2)    # Opt magnitude
######## Asymmetry Index sigmoidal Model
AI_OM <- (aMaxasympright +aMinasymp)/(abs(aMaxasympright)+abs(aMinasymp))   #normalized AS OM for doublesigmoidal fit
AI_OS <- (asloperight +aslopeleft)/(abs(asloperight)+abs(aslopeleft))   #normalized AS OM for doublesigmoidal fit
}
allparameters <- c(OM,OS,AI_OM,AI_OS)
tempOMparams <- as.data.frame(rbind(as.numeric(allparameters)))      #convert to dataframe
names(tempOMparams) = c("OM","OS","AI(OM)", "AI(OS)")    #set column names
rownames(tempOMparams)[1]=as.character(flyname)                   #set row names to flynames
#delete used variables
rm(OM,OS,AI_OM,AI_OS, fitObjall, DoubleSig, transform, AllOMtraces)
fitObjall <- fitAndCategorize(AllOMtraces, threshold_minimum_for_intensity_maximum  = 0.3,    # fit sigmoidal model
threshold_intensity_range=0.1,
threshold_t0_max_int = 3000)
install.packages("wrMIsc")
install.packages("wrMisc")
install.packages("raincloudplots")
install.packages("raincloudplots")
knitr::opts_chunk$set(echo = TRUE)
cat("\n# Dwelling Times\n")
dwellmeanplots = list() #create a list to store all the plots
for(x in 1:NofGroups){
grouped.dwell[[x]]$punished = -grouped.dwell[[x]]$punished #invert the punished values to make the bars go downwards
dwellmeans[[x]] = reshape2::melt(grouped.dwell[[x]])       #load each group of data into a dataframe
colnames(dwellmeans[[x]])=c("period","value","Outcome")
dwellmeanplots[[x]] <-   ggplot(dwellmeans[[x]], aes(as.factor(period), value, fill = Outcome)) +
stat_summary(geom = "bar", fun = mean, col="black", width = 0.7)+
stat_summary(geom = "errorbar", fun.data = mean_se, width = 0.3)+
geom_hline(yintercept = 0, colour = "#887000", size = 1.2)+
geom_jitter(pch=21, colour="Black", size=2.3, width = 0.25)+
ggtitle(paste(dataset.data[["resources"]][[x]][["title"]], ", N=",samplesizes[x]))+
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank()
,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA))+
theme(axis.text.y = element_text(size=18), legend.position = "none")+
ylab("mean dwelling [sec]")+
labs(fill = "Outcome") +
xlab("Experiment Sequence")+
scale_fill_manual(values=c("red1", "steelblue4"))+
scale_color_manual(values=c("firebrick4", "steelblue3"))+
theme(panel.grid.major = element_line(colour = "#808080")) +
annotate("rect", xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = 0,
alpha = .3)+
ylim(dwellrange) +
guides(fill = FALSE, size = FALSE)
}
source("B:/GitHub/DTSevaluations/evaluate_datasets.R")
grouped.OMdataBefore_swapped <-list()  #For swapping left and right OM traces
grouped.OMdataAfter_swapped <-list()   #For swapping left and right OM traces
source("include/optomotor.R")
View(OMdataBefore_swapped)
