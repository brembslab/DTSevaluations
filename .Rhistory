for(i in 1:NofPeriods){
#set a vector to sort the punished/unpunished data
dwellvector = NA #initialize the dwellvector dataframe.
dwellvector$Unpunished <- ifelse(dwellperiod[[i]]$sign[1] == 0, 2, 1) []
dwellvector$Punished <- ifelse(dwellperiod[[i]]$sign[1] == 1, 2, 1)
#if punished and unpunished data exist within the same period, i.e. the fly did not spend the entire duration in one domain
if (length(unique(dwellperiod[[i]]$sign)) == 2) {
dwellperiod[[i]] = rle(dwellperiod[[i]]$sign)[[1]] #counts the consecutive data. The [[1]] sorts out the unwanted data
#To avoid using the confusion of a for loop within a for loop, the punished/unpunished data gets seperated into its own listed dataframe.
#The two folling lines seperates punished/unpunished data and transforms the data into seconds. It also transforms the data to a melted table.
#The dwellvector simply selects every other data point. As every other is maintained throught the entire duration of the
#period this can be used to select outcome (datapoint 1,3,5,... = punished, 2,4,6,... = unpunished, or 1,3,5,... = unpunished, 2,4,6,... = punished).
#As the period does not always start with the same outcome an individual vector is created to differentiate between these two scenarios.
dwelldata$unpunished[[i]] <- (dwellperiod[[i]][seq(dwellvector$Unpunished, length(dwellperiod[[i]]), 2)]*0.05)
dwelldata$punished[[i]]<- (dwellperiod[[i]][seq(dwellvector$Punished, length(dwellperiod[[i]]), 2)]*0.05)
#In the case that 100% of the dwelling time is in the punished/unpunished zone, the two following
#if statements sets either the punished to 100%, or unpunished to 100%
#if  only punished data exists for the particular period, punished is set to 100% and unpunished to 0%
#This will generate two single dots on the chart, both of them at either 0% or 100%
} else if (length(unique(dwellperiod[[i]]$sign)) == 1 && (unique(dwellperiod[[i]]$sign)) == 1) {
dwelldata$unpunished[[i]] = as.factor(0)
dwelldata$punished[[i]] = as.factor(120)
#if  only unpunished data exists for the particular period, punished is set to 0% and unpunished to 100%
} else if (length(unique(dwellperiod[[i]]$sign)) == 1 && (unique(dwellperiod[[i]]$sign)) == 0){
dwelldata$unpunished[[i]] = as.integer(120)
dwelldata$punished[[i]] = as.integer(0)
}
dwelltimes$unpunished[[i]] = unique(sort(dwelldata$unpunished[[i]]))
dwelltimes$punished[[i]] = unique(sort(dwelldata$punished[[i]]))
dwelldata$unpunished[[i]] = shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag")
dwelldata$punished[[i]] = shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag")
# dwelldata$punished[[i]] = melt(unique(sort(dwelldata$punished[[i]])))
# dwelldata$unpunished[[i]] = melt(unique(sort(dwelldata$unpunished[[i]])))
#
# dwelldata$unpunished[[i]]$percent = (dwellpercent$unpunished[[i]])
# dwelldata$punished[[i]]$percent = (dwellpercent$punished[[i]])
#plots the data
# dwellplots[[i]] = ggplot() +
#   geom_line(data = melt(dwelldata$punished[[i]]), aes(x = melt(dwelltimes$punished[[i]]), color = "blue"))+
#   geom_line(data = dwelldata$unpunished[[i]], aes(x = dwelltimes$unpunished[[i]], color = "red"))+
#   geom_point(data = dwelldata$punished[[i]], aes(x = value, y = percent, color = "blue"))+
#   geom_point(data = dwelldata$unpunished[[i]], aes(x = value, y = percent, color = "red"))+
#   scale_y_log10( breaks=c(0,10,100))+
#   scale_x_log10() +
#   ggtitle(paste(flyname, "Period", i))+
# theme_light() +
# labs(x="time [sec]", y="% events",  color = "Outcome") +
# annotate("text", Inf, Inf, label = training[i], hjust =1.05, vjust = 1)+
# theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
# labs(color='Outcome') +
# scale_color_manual(values=c("red", "blue"),
#                  name="Experimental\nCondition",
#                   labels=c("Punished", "Unpunished"))+
# theme(plot.title = element_text(color="black", size=12, face="bold", hjust = 0.5))
}
#
# multiplot(plotlist = dwellplots, cols=2)
typeof(dwelldata$unpunished)
ggplot() +
geom_line(data = melt(dwelldata$punished[[i]]))
melt(dwelldata$punished[[i]]
melt(dwelldata$punished[[i]])
melt(dwelldata$punished[[i]]
melt(dwelldata$punished[[i]])
melt(dwelltimes$punished[[i]])
melt(dwelltimes$punished[[i]])
ggplot() +
geom_line(data = melt(dwelldata$punished[[i]]), aes(y = value, x = melt(dwelltimes$punished[[i]]), color = "blue"))
melt(dwelldata$punished[[i]])$value
ggplot() +
geom_line(data = melt(dwelldata$punished[[i]]), aes(y = melt(dwelldata$punished[[i]])$value, x = melt(dwelltimes$punished[[i]]), color = "blue"))
library(summarytools)
temp  <- rawdata #store the entire data set for the fly
temp$sign <- ifelse(temp$fly > 0, 1, 0) #If temp$fly is equal to 0 then it adds 0 in the sign column, everything else gets a 1. It automatically sets 0 as to be punished and unpunished is set to 1.
dwellperiod = list()
dwellperiod <- split(temp, temp$period) #splits data into periods
dwelldata = list()
dwellplots = list()
dwelltimes= list()
for(i in 1:NofPeriods){
#set a vector to sort the punished/unpunished data
dwellvector = NA #initialize the dwellvector dataframe.
dwellvector$Unpunished <- ifelse(dwellperiod[[i]]$sign[1] == 0, 2, 1) []
dwellvector$Punished <- ifelse(dwellperiod[[i]]$sign[1] == 1, 2, 1)
#if punished and unpunished data exist within the same period, i.e. the fly did not spend the entire duration in one domain
if (length(unique(dwellperiod[[i]]$sign)) == 2) {
dwellperiod[[i]] = rle(dwellperiod[[i]]$sign)[[1]] #counts the consecutive data. The [[1]] sorts out the unwanted data
#To avoid using the confusion of a for loop within a for loop, the punished/unpunished data gets seperated into its own listed dataframe.
#The two folling lines seperates punished/unpunished data and transforms the data into seconds. It also transforms the data to a melted table.
#The dwellvector simply selects every other data point. As every other is maintained throught the entire duration of the
#period this can be used to select outcome (datapoint 1,3,5,... = punished, 2,4,6,... = unpunished, or 1,3,5,... = unpunished, 2,4,6,... = punished).
#As the period does not always start with the same outcome an individual vector is created to differentiate between these two scenarios.
dwelldata$unpunished[[i]] <- (dwellperiod[[i]][seq(dwellvector$Unpunished, length(dwellperiod[[i]]), 2)]*0.05)
dwelldata$punished[[i]]<- (dwellperiod[[i]][seq(dwellvector$Punished, length(dwellperiod[[i]]), 2)]*0.05)
#In the case that 100% of the dwelling time is in the punished/unpunished zone, the two following
#if statements sets either the punished to 100%, or unpunished to 100%
#if  only punished data exists for the particular period, punished is set to 100% and unpunished to 0%
#This will generate two single dots on the chart, both of them at either 0% or 100%
} else if (length(unique(dwellperiod[[i]]$sign)) == 1 && (unique(dwellperiod[[i]]$sign)) == 1) {
dwelldata$unpunished[[i]] = as.factor(0)
dwelldata$punished[[i]] = as.factor(120)
#if  only unpunished data exists for the particular period, punished is set to 0% and unpunished to 100%
} else if (length(unique(dwellperiod[[i]]$sign)) == 1 && (unique(dwellperiod[[i]]$sign)) == 0){
dwelldata$unpunished[[i]] = as.integer(120)
dwelldata$punished[[i]] = as.integer(0)
}
dwelltimes$unpunished[[i]] = unique(sort(dwelldata$unpunished[[i]]))
dwelltimes$punished[[i]] = unique(sort(dwelldata$punished[[i]]))
dwelldata$unpunished[[i]] = shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag")
dwelldata$punished[[i]] = shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag")
#plots the data
# dwellplots[[i]] = ggplot() +
#   geom_line(data = dwelldata$punished[[i]], aes(y = value, x = melt(dwelltimes$punished[[i]]), color = "blue"))
#
#   geom_point(data = dwelldata$punished[[i]], aes(x = value, y = percent, color = "blue"))+
#   geom_line(data = dwelldata$unpunished[[i]], aes(x = dwelltimes$unpunished[[i]], color = "red"))+
#   geom_point(data = dwelldata$unpunished[[i]], aes(x = value, y = percent, color = "red"))+
#   scale_y_log10( breaks=c(0,10,100))+
#   scale_x_log10() +
#   ggtitle(paste(flyname, "Period", i))+
# theme_light() +
# labs(x="time [sec]", y="% events",  color = "Outcome") +
# annotate("text", Inf, Inf, label = training[i], hjust =1.05, vjust = 1)+
# theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
# labs(color='Outcome') +
# scale_color_manual(values=c("red", "blue"),
#                  name="Experimental\nCondition",
#                   labels=c("Punished", "Unpunished"))+
# theme(plot.title = element_text(color="black", size=12, face="bold", hjust = 0.5))
}
#
# multiplot(plotlist = dwellplots, cols=2)
dwelldata$unpunished
rbind(dwelldata$unpunished)
do.call(rbind,dwelldata$unpunished)
ldply (dwelldata, data.frame)
library(summarytools)
temp  <- rawdata #store the entire data set for the fly
temp$sign <- ifelse(temp$fly > 0, 1, 0) #If temp$fly is equal to 0 then it adds 0 in the sign column, everything else gets a 1. It automatically sets 0 as to be punished and unpunished is set to 1.
dwellperiod = list()
dwellperiod <- split(temp, temp$period) #splits data into periods
dwelldata = list()
dwellplots = list()
dwelltimes= list()
for(i in 1:NofPeriods){
#set a vector to sort the punished/unpunished data
dwellvector = NA #initialize the dwellvector dataframe.
dwellvector$Unpunished <- ifelse(dwellperiod[[i]]$sign[1] == 0, 2, 1) []
dwellvector$Punished <- ifelse(dwellperiod[[i]]$sign[1] == 1, 2, 1)
#if punished and unpunished data exist within the same period, i.e. the fly did not spend the entire duration in one domain
if (length(unique(dwellperiod[[i]]$sign)) == 2) {
dwellperiod[[i]] = rle(dwellperiod[[i]]$sign)[[1]] #counts the consecutive data. The [[1]] sorts out the unwanted data
#To avoid using the confusion of a for loop within a for loop, the punished/unpunished data gets seperated into its own listed dataframe.
#The two folling lines seperates punished/unpunished data and transforms the data into seconds. It also transforms the data to a melted table.
#The dwellvector simply selects every other data point. As every other is maintained throught the entire duration of the
#period this can be used to select outcome (datapoint 1,3,5,... = punished, 2,4,6,... = unpunished, or 1,3,5,... = unpunished, 2,4,6,... = punished).
#As the period does not always start with the same outcome an individual vector is created to differentiate between these two scenarios.
dwelldata$unpunished[[i]] <- (dwellperiod[[i]][seq(dwellvector$Unpunished, length(dwellperiod[[i]]), 2)]*0.05)
dwelldata$punished[[i]]<- (dwellperiod[[i]][seq(dwellvector$Punished, length(dwellperiod[[i]]), 2)]*0.05)
#In the case that 100% of the dwelling time is in the punished/unpunished zone, the two following
#if statements sets either the punished to 100%, or unpunished to 100%
#if  only punished data exists for the particular period, punished is set to 100% and unpunished to 0%
#This will generate two single dots on the chart, both of them at either 0% or 100%
} else if (length(unique(dwellperiod[[i]]$sign)) == 1 && (unique(dwellperiod[[i]]$sign)) == 1) {
dwelldata$unpunished[[i]] = as.factor(0)
dwelldata$punished[[i]] = as.factor(120)
#if  only unpunished data exists for the particular period, punished is set to 0% and unpunished to 100%
} else if (length(unique(dwellperiod[[i]]$sign)) == 1 && (unique(dwellperiod[[i]]$sign)) == 0){
dwelldata$unpunished[[i]] = as.integer(120)
dwelldata$punished[[i]] = as.integer(0)
}
dwelltimes$unpunished[[i]] = unique(sort(dwelldata$unpunished[[i]]))
dwelltimes$punished[[i]] = unique(sort(dwelldata$punished[[i]]))
dwelldata$unpunished[[i]] = shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag")
dwelldata$punished[[i]] = shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag")
#plots the data
# dwellplots[[i]] = ggplot() +
#   geom_line(data = dwelldata$punished[[i]], aes(y = value, x = melt(dwelltimes$punished[[i]]), color = "blue"))
#
#   geom_point(data = dwelldata$punished[[i]], aes(x = value, y = percent, color = "blue"))+
#   geom_line(data = dwelldata$unpunished[[i]], aes(x = dwelltimes$unpunished[[i]], color = "red"))+
#   geom_point(data = dwelldata$unpunished[[i]], aes(x = value, y = percent, color = "red"))+
#   scale_y_log10( breaks=c(0,10,100))+
#   scale_x_log10() +
#   ggtitle(paste(flyname, "Period", i))+
# theme_light() +
# labs(x="time [sec]", y="% events",  color = "Outcome") +
# annotate("text", Inf, Inf, label = training[i], hjust =1.05, vjust = 1)+
# theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
# labs(color='Outcome') +
# scale_color_manual(values=c("red", "blue"),
#                  name="Experimental\nCondition",
#                   labels=c("Punished", "Unpunished"))+
# theme(plot.title = element_text(color="black", size=12, face="bold", hjust = 0.5))
}
#
# multiplot(plotlist = dwellplots, cols=2)
dwelltimes$unpunished
dwelltimes$unpunished[[9]]
dwelldata$unpunished[[9]]
typeof(dwelltimes$unpunished[[9]])
x = melt(dwelltimes$unpunished[[9]])
x
x$percent =  melt(dwelldata$unpunished[[9]])
x
dwelldata$unpunished[[9]]
melt(dwelldata$unpunished[[9]])
y =
y =  melt(dwelldata$unpunished[[9]])
test$percet = y
test$percent = y
test$value = x
test
y =
y =  melt(dwelldata$unpunished[[9]])
y =  melt(dwelldata$unpunished[[9]])
t
y
test$percent = y
test$value = x
test
test = NA
test$percent = y
test$value = x
test
melt(dwelldata$unpunished[[9]])
a =  melt(dwelldata$unpunished[[9]])
a
melt(dwelltimes$punished[[i]])
melt(dwelldata$punished[[i]])
ggplot() +
geom_line(aes(y = melt(dwelldata$punished[[i]]), x = melt(dwelltimes$punished[[i]]), color = "blue"))
y = melt(dwelldata$punished[[i]])
ggplot() +
geom_line(aes(y = y, x = melt(dwelltimes$punished[[i]]), color = "blue"))
x = melt(dwelltimes$punished[[i]])
ggplot() +
geom_line(aes(y = y, x =x, color = "blue"))
y
x
ggplot() +
geom_bar(aes(y = y, x =x, color = "blue"))
i
y = melt(dwelldata$punished[[9]])
x = melt(dwelltimes$punished[[9]])
y
x
ggplot() +
geom_bar(aes(y = y, x =x, color = "blue"))
library(summarytools)
temp  <- rawdata #store the entire data set for the fly
temp$sign <- ifelse(temp$fly > 0, 1, 0) #If temp$fly is equal to 0 then it adds 0 in the sign column, everything else gets a 1. It automatically sets 0 as to be punished and unpunished is set to 1.
dwellperiod = list()
dwellperiod <- split(temp, temp$period) #splits data into periods
dwelldata = list()
dwellplots = list()
dwelltimes= list()
for(i in 1:NofPeriods){
#set a vector to sort the punished/unpunished data
dwellvector = NA #initialize the dwellvector dataframe.
dwellvector$Unpunished <- ifelse(dwellperiod[[i]]$sign[1] == 0, 2, 1) []
dwellvector$Punished <- ifelse(dwellperiod[[i]]$sign[1] == 1, 2, 1)
#if punished and unpunished data exist within the same period, i.e. the fly did not spend the entire duration in one domain
if (length(unique(dwellperiod[[i]]$sign)) == 2) {
dwellperiod[[i]] = rle(dwellperiod[[i]]$sign)[[1]] #counts the consecutive data. The [[1]] sorts out the unwanted data
#To avoid using the confusion of a for loop within a for loop, the punished/unpunished data gets seperated into its own listed dataframe.
#The two folling lines seperates punished/unpunished data and transforms the data into seconds. It also transforms the data to a melted table.
#The dwellvector simply selects every other data point. As every other is maintained throught the entire duration of the
#period this can be used to select outcome (datapoint 1,3,5,... = punished, 2,4,6,... = unpunished, or 1,3,5,... = unpunished, 2,4,6,... = punished).
#As the period does not always start with the same outcome an individual vector is created to differentiate between these two scenarios.
dwelldata$unpunished[[i]] <- (dwellperiod[[i]][seq(dwellvector$Unpunished, length(dwellperiod[[i]]), 2)]*0.05)
dwelldata$punished[[i]]<- (dwellperiod[[i]][seq(dwellvector$Punished, length(dwellperiod[[i]]), 2)]*0.05)
#In the case that 100% of the dwelling time is in the punished/unpunished zone, the two following
#if statements sets either the punished to 100%, or unpunished to 100%
#if  only punished data exists for the particular period, punished is set to 100% and unpunished to 0%
#This will generate two single dots on the chart, both of them at either 0% or 100%
} else if (length(unique(dwellperiod[[i]]$sign)) == 1 && (unique(dwellperiod[[i]]$sign)) == 1) {
dwelldata$unpunished[[i]] = as.factor(0)
dwelldata$punished[[i]] = as.factor(120)
#if  only unpunished data exists for the particular period, punished is set to 0% and unpunished to 100%
} else if (length(unique(dwellperiod[[i]]$sign)) == 1 && (unique(dwellperiod[[i]]$sign)) == 0){
dwelldata$unpunished[[i]] = as.integer(120)
dwelldata$punished[[i]] = as.integer(0)
}
# dwelltimes$unpunished[[i]] = unique(sort(dwelldata$unpunished[[i]]))
# dwelltimes$punished[[i]] = unique(sort(dwelldata$punished[[i]]))
# dwelldata$unpunished[[i]] = shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag")
# dwelldata$punished[[i]] = shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag")
#plots the data
# dwellplots[[i]] = ggplot() +
#   geom_line(aes(y = melt(dwelldata$punished[[i]]), x = melt(dwelltimes$punished[[i]]), color = "blue"))+
#   geom_point(data = dwelldata$punished[[i]], aes(x = value, y = percent, color = "blue"))+
#   # geom_line(data = dwelldata$unpunished[[i]], aes(x = dwelltimes$unpunished[[i]], color = "red"))+
#   # geom_point(data = dwelldata$unpunished[[i]], aes(x = value, y = percent, color = "red"))+
#   scale_y_log10( breaks=c(0,10,100))+
#   scale_x_log10() +
#   ggtitle(paste(flyname, "Period", i))+
# theme_light() +
# labs(x="time [sec]", y="% events",  color = "Outcome") +
# annotate("text", Inf, Inf, label = training[i], hjust =1.05, vjust = 1)+
# theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
# labs(color='Outcome') +
# scale_color_manual(values=c("red", "blue"),
#                  name="Experimental\nCondition",
#                   labels=c("Punished", "Unpunished"))+
# theme(plot.title = element_text(color="black", size=12, face="bold", hjust = 0.5))
}
#
# multiplot(plotlist = dwellplots, cols=2)
dwelldata$punished[[i]]
test = dwelldata$punished[[i]]
test
test$data = dwelldata$punished[[i]]
test
test$data = dwelldata$punished[[0]]
test = NA
test$data = dwelldata$punished[[0]]
test$data = dwelldata$punished[[9]]
test$data = as.data.frame(dwelldata$punished[[9]])
test
test = as.data.frame(dwelldata$punished[[9]])
test
test = NA
test = as.data.frame(dwelldata$punished[[9]])
test
test = as.data.frame(dwelltimes$punished[[9]])
test
as.data.frame(dwelltimes$punished[[9]])
test
test = as.data.frame(dwelldata$punished[[9]])
test
library(summarytools)
temp  <- rawdata #store the entire data set for the fly
temp$sign <- ifelse(temp$fly > 0, 1, 0) #If temp$fly is equal to 0 then it adds 0 in the sign column, everything else gets a 1. It automatically sets 0 as to be punished and unpunished is set to 1.
dwellperiod = list()
dwellperiod <- split(temp, temp$period) #splits data into periods
dwelldata = list()
dwellplots = list()
dwelltimes= list()
for(i in 1:NofPeriods){
#set a vector to sort the punished/unpunished data
dwellvector = NA #initialize the dwellvector dataframe.
dwellvector$Unpunished <- ifelse(dwellperiod[[i]]$sign[1] == 0, 2, 1) []
dwellvector$Punished <- ifelse(dwellperiod[[i]]$sign[1] == 1, 2, 1)
#if punished and unpunished data exist within the same period, i.e. the fly did not spend the entire duration in one domain
if (length(unique(dwellperiod[[i]]$sign)) == 2) {
dwellperiod[[i]] = rle(dwellperiod[[i]]$sign)[[1]] #counts the consecutive data. The [[1]] sorts out the unwanted data
#To avoid using the confusion of a for loop within a for loop, the punished/unpunished data gets seperated into its own listed dataframe.
#The two folling lines seperates punished/unpunished data and transforms the data into seconds. It also transforms the data to a melted table.
#The dwellvector simply selects every other data point. As every other is maintained throught the entire duration of the
#period this can be used to select outcome (datapoint 1,3,5,... = punished, 2,4,6,... = unpunished, or 1,3,5,... = unpunished, 2,4,6,... = punished).
#As the period does not always start with the same outcome an individual vector is created to differentiate between these two scenarios.
dwelldata$unpunished[[i]] <- (dwellperiod[[i]][seq(dwellvector$Unpunished, length(dwellperiod[[i]]), 2)]*0.05)
dwelldata$punished[[i]]<- (dwellperiod[[i]][seq(dwellvector$Punished, length(dwellperiod[[i]]), 2)]*0.05)
#In the case that 100% of the dwelling time is in the punished/unpunished zone, the two following
#if statements sets either the punished to 100%, or unpunished to 100%
#if  only punished data exists for the particular period, punished is set to 100% and unpunished to 0%
#This will generate two single dots on the chart, both of them at either 0% or 100%
} else if (length(unique(dwellperiod[[i]]$sign)) == 1 && (unique(dwellperiod[[i]]$sign)) == 1) {
dwelldata$unpunished[[i]] = as.factor(0)
dwelldata$punished[[i]] = as.factor(120)
#if  only unpunished data exists for the particular period, punished is set to 0% and unpunished to 100%
} else if (length(unique(dwellperiod[[i]]$sign)) == 1 && (unique(dwellperiod[[i]]$sign)) == 0){
dwelldata$unpunished[[i]] = as.integer(120)
dwelldata$punished[[i]] = as.integer(0)
}
# dwelltimes$unpunished[[i]] = unique(sort(dwelldata$unpunished[[i]]))
# dwelltimes$punished[[i]] = unique(sort(dwelldata$punished[[i]]))
dwelldata$unpunished[[i]] = shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag")
dwelldata$punished[[i]] = shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag")
#plots the data
# dwellplots[[i]] = ggplot() +
#   geom_line(aes(y = melt(dwelldata$punished[[i]]), x = melt(dwelltimes$punished[[i]]), color = "blue"))+
#   geom_point(data = dwelldata$punished[[i]], aes(x = value, y = percent, color = "blue"))+
#   # geom_line(data = dwelldata$unpunished[[i]], aes(x = dwelltimes$unpunished[[i]], color = "red"))+
#   # geom_point(data = dwelldata$unpunished[[i]], aes(x = value, y = percent, color = "red"))+
#   scale_y_log10( breaks=c(0,10,100))+
#   scale_x_log10() +
#   ggtitle(paste(flyname, "Period", i))+
# theme_light() +
# labs(x="time [sec]", y="% events",  color = "Outcome") +
# annotate("text", Inf, Inf, label = training[i], hjust =1.05, vjust = 1)+
# theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
# labs(color='Outcome') +
# scale_color_manual(values=c("red", "blue"),
#                  name="Experimental\nCondition",
#                   labels=c("Punished", "Unpunished"))+
# theme(plot.title = element_text(color="black", size=12, face="bold", hjust = 0.5))
}
#
# multiplot(plotlist = dwellplots, cols=2)
dwelldata$punished[[i]]
test
# dwelltimes$unpunished[[i]] = unique(sort(dwelldata$unpunished[[i]]))
dwelltimes$punished[[i]] = unique(sort(dwelldata$punished[[i]]))
dwelldata$unpunished[[i]] = shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag")
test$a = as.data.frame(dwelldata$punished[[i]])
test= NA
test$a = as.data.frame(dwelldata$punished[[i]])
test$a = as.data.frame(dwelldata$punished[[9]])
test= NA
test$a = as.data.frame(dwelldata$punished[[9]])
test
test$a
test$a[1]
test$a[[1]]
test = melt(dwelldata$punished[[9]])
test= NA
test = melt(dwelldata$punished[[9]])
test
print(test)
dwelltimes$punished[[9]]
length(dwelldata$punished[[i]])
data = dwelltimes$punished[[9]]
melt(data)
a = melt(data)
a
a %>%
rename(
value = data
)
a %>%
rename(
value = data)
a %>%
rename(
value = value.1)
a
a$
a %>%
rename(value = value.1)
names(a)[names(a) == "a"] <- "sepal_length"
a
names(a)[names(a) == "value"] <- "sepal_length"
a
names(a)[names(a) == "value"] <- "sepal"
a
dwelldata$punished[[9]]
dwelltimes$punished[[9]]
library(summarytools)
temp  <- rawdata #store the entire data set for the fly
temp$sign <- ifelse(temp$fly > 0, 1, 0) #If temp$fly is equal to 0 then it adds 0 in the sign column, everything else gets a 1. It automatically sets 0 as to be punished and unpunished is set to 1.
dwellperiod = list()
dwellperiod <- split(temp, temp$period) #splits data into periods
dwelldata = list()
dwellplots = list()
dwelltimes= list()
for(i in 1:NofPeriods){
#set a vector to sort the punished/unpunished data
dwellvector = NA #initialize the dwellvector dataframe.
dwellvector$Unpunished <- ifelse(dwellperiod[[i]]$sign[1] == 0, 2, 1) []
dwellvector$Punished <- ifelse(dwellperiod[[i]]$sign[1] == 1, 2, 1)
#if punished and unpunished data exist within the same period, i.e. the fly did not spend the entire duration in one domain
if (length(unique(dwellperiod[[i]]$sign)) == 2) {
dwellperiod[[i]] = rle(dwellperiod[[i]]$sign)[[1]] #counts the consecutive data. The [[1]] sorts out the unwanted data
#To avoid using the confusion of a for loop within a for loop, the punished/unpunished data gets seperated into its own listed dataframe.
#The two folling lines seperates punished/unpunished data and transforms the data into seconds. It also transforms the data to a melted table.
#The dwellvector simply selects every other data point. As every other is maintained throught the entire duration of the
#period this can be used to select outcome (datapoint 1,3,5,... = punished, 2,4,6,... = unpunished, or 1,3,5,... = unpunished, 2,4,6,... = punished).
#As the period does not always start with the same outcome an individual vector is created to differentiate between these two scenarios.
dwelldata$unpunished[[i]] <- (dwellperiod[[i]][seq(dwellvector$Unpunished, length(dwellperiod[[i]]), 2)]*0.05)
dwelldata$punished[[i]]<- (dwellperiod[[i]][seq(dwellvector$Punished, length(dwellperiod[[i]]), 2)]*0.05)
#In the case that 100% of the dwelling time is in the punished/unpunished zone, the two following
#if statements sets either the punished to 100%, or unpunished to 100%
#if  only punished data exists for the particular period, punished is set to 100% and unpunished to 0%
#This will generate two single dots on the chart, both of them at either 0% or 100%
} else if (length(unique(dwellperiod[[i]]$sign)) == 1 && (unique(dwellperiod[[i]]$sign)) == 1) {
dwelldata$unpunished[[i]] = as.factor(0)
dwelldata$punished[[i]] = as.factor(120)
#if  only unpunished data exists for the particular period, punished is set to 0% and unpunished to 100%
} else if (length(unique(dwellperiod[[i]]$sign)) == 1 && (unique(dwellperiod[[i]]$sign)) == 0){
dwelldata$unpunished[[i]] = as.integer(120)
dwelldata$punished[[i]] = as.integer(0)
}
# dwelltimes$unpunished[[i]] = unique(sort(dwelldata$unpunished[[i]]))
dwelltimes$punished[[i]] = unique(sort(dwelldata$punished[[i]]))
dwelldata$unpunished[[i]] = shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag")
dwelldata$punished[[i]] = shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag")
#plots the data
# dwellplots[[i]] = ggplot() +
#   geom_line(aes(y = melt(dwelldata$punished[[i]]), x = melt(dwelltimes$punished[[i]]), color = "blue"))+
#   geom_point(data = dwelldata$punished[[i]], aes(x = value, y = percent, color = "blue"))+
#   # geom_line(data = dwelldata$unpunished[[i]], aes(x = dwelltimes$unpunished[[i]], color = "red"))+
#   # geom_point(data = dwelldata$unpunished[[i]], aes(x = value, y = percent, color = "red"))+
#   scale_y_log10( breaks=c(0,10,100))+
#   scale_x_log10() +
#   ggtitle(paste(flyname, "Period", i))+
# theme_light() +
# labs(x="time [sec]", y="% events",  color = "Outcome") +
# annotate("text", Inf, Inf, label = training[i], hjust =1.05, vjust = 1)+
# theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
# labs(color='Outcome') +
# scale_color_manual(values=c("red", "blue"),
#                  name="Experimental\nCondition",
#                   labels=c("Punished", "Unpunished"))+
# theme(plot.title = element_text(color="black", size=12, face="bold", hjust = 0.5))
}
#
# multiplot(plotlist = dwellplots, cols=2)
dwelltimes$punished[[i]]
test = melt(dwelltimes$punished[[i]])
test
a$b = test
a
ggplot() +
geom_bar(data = a aes(y = sepal_length, x = value, color = "blue"))
ggplot() +
geom_bar(data = a, aes(y = sepal_length, x = value, color = "blue"))
a
a$b
ggplot() +
geom_bar(data = a, aes(y = sepal_length, x = b, color = "blue"))
