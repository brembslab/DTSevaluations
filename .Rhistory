violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
#scale_shape_manual(values = c(1,16))+ #shape of the points
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes) +
wilcox.annotate(boxes, wilcoxon)
gplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes) +
wilcox.annotate(boxes, wilcoxon)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes) +
wilcox.annotate(boxes, wilcoxon)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes) +
wilcox.annotate(boxes, wilcoxon)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=4/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(aes(fill=group, color=group),
point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(aes(color="black")
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(aes(color="black"),
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(inherit.aes=FALSE,
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(color="black",
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(color="black",
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=4, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(color="black",
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=4, vjust=0.1) +
samplesizes.annotate(boxes, samplesizes)
knitr::opts_chunk$set(echo = TRUE)
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
library(ggplot2)
library(cowplot)
library(ggiraph)
library(tidyr)
library(dygraphs)
library(grid)
library(reshape2)
library(plyr)
library(dplyr)
library(gridExtra)
library(yaml)
library(ggsignif)
library(effsize)
library(pwr)
library(BayesFactor)
library(genefilter)
library(seewave)
library(lubridate)
library(rmarkdown)
library(markdown)
library(knitr)
library(dabestr)
library(zoo)
library(tidyverse)
library(questionr)
library(data.table)
library(DescTools)
library(magick)
library(reactable)
library(raincloudplots)
library(sicegar)
library(ggpmisc)
library(ggrain)
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
load("B:/GitHub/DTSevaluations/.RData")
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(pretestPIs.category, plotOMparamsBefore.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(pretestPIs.category, plotOMparamsBefore.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(postPIs.category, plotOMparamsAfter.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation after training")) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
scale_x_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(postPIs.category, plotOMparamsAfter.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation after training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(pretestPIs.category, plotOMparamsBefore.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(postPIs.category, plotOMparamsAfter.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation after training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(pretestPIs.category, plotOMparamsBefore.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
install.packages(c("askpass", "BiocManager", "broom", "bslib", "cachem", "class", "classInt", "cpp11", "curl", "dbplyr", "DescTools", "deSolve", "digest", "dplyr", "evaluate", "fontawesome", "fs", "gargle", "ggbeeswarm", "ggplot2", "googledrive", "googlesheets4", "gss", "gtable", "haven", "htmltools", "httpuv", "httr", "jsonlite", "KernSmooth", "knitr", "labeling", "labelled", "later", "lattice", "lmom", "magick", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "mvtnorm", "nlme", "nnet", "openssl", "pbapply", "processx", "promises", "ps", "purrr", "Rcpp", "RCurl", "readxl", "rematch", "remotes", "rlang", "rmarkdown", "RSQLite", "rstudioapi", "sass", "seewave", "shiny", "spatial", "styler", "survival", "sys", "timeSeries", "tinytex", "tuneR", "tzdb", "uuid", "vctrs", "viridisLite", "vroom", "xfun", "xml2", "xts", "zoo"))
knitr::opts_chunk$set(echo = TRUE)
exists(plotOMparamsBefore$group), "right")
"right" %in% plotOMparamsBefore$group
install.packages(c("DescTools", "digest", "dplyr", "htmltools", "lattice", "MASS", "Matrix", "Rcpp", "rlang", "survival", "vctrs", "xfun"))
library(ggplot2)
library(cowplot)
library(ggiraph)
library(tidyr)
library(dygraphs)
library(grid)
library(reshape2)
library(plyr)
library(dplyr)
library(gridExtra)
library(yaml)
library(ggsignif)
library(effsize)
library(pwr)
library(BayesFactor)
library(genefilter)
library(seewave)
library(lubridate)
library(rmarkdown)
library(markdown)
library(knitr)
library(dabestr)
library(zoo)
library(tidyverse)
library(questionr)
library(data.table)
library(DescTools)
library(magick)
library(reactable)
library(raincloudplots)
library(sicegar)
library(ggpmisc)
library(ggrain)
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
install.packages("ggiraph")
install.packages("ggiraph")
install.packages("ggiraph")
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
source("B:/GitHub/Evaluate-Senec-PV-data/power.R")
source("B:/GitHub/DTSevaluations/evaluate_datasets.R")
