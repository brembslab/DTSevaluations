dwellperiod <- split(rawdata$punished, rawdata$period) #split the punished/unpunished datapoints by period
dwellperiod[[i]] = rle(dwellperiod[[i]])                                                    #run length encode the punished and unpunished data points
dwellperiod[[i]][[1]] = dwellperiod[[i]][[1]]*0.05                                          #convert run lenghts into seconds. Now we have the raw dwelling times.
dwelldata$unpunished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["0"]) #unpunished dwelling times
dwelldata$punished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["1"])   #punished dwelling times
if(is.null(dwelldata$unpunished[[i]])){dwelldata$unpunished[[i]]=as.integer(0)}             #if no data points, set to zero seconds
if(is.null(dwelldata$punished[[i]])){dwelldata$punished[[i]]=as.integer(0)}                 #if no data points, set to zero seconds
dwellmeans$unpunished[l,i] =  mean(dwelldata$unpunished[[i]])
dwellmeans$punished[l,i] =  mean(dwelldata$punished[[i]])
dwelltimes$punished[[i]] = sort(unique(dwelldata$punished[[i]])) #calculate the dwelling times. It sorts the unique values in ascending order.
dwelltimes$unpunished[[i]] = sort(unique(dwelldata$unpunished[[i]])) #calculate the dwelling times
dwelldata$unpunished[[i]] = melt(shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
dwelldata$punished[[i]] = melt(shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
dwelldata$punished[[i]]$times = dwelltimes$punished[[i]]
dwelldata$unpunished[[i]]$times = dwelltimes$unpunished[[i]]
View(dwelldata)
dwelldata = dwellplots = dwelltimes = grouped.dwell = list()
dwelldata$unpunished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["0"]) #unpunished dwelling times
dwelldata$punished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["1"])   #punished dwelling times
View(dwelldata)
is.null(dwelldata$unpunished[[i]])
is.null(dwelldata$punished[[i]])
dwellmeans$unpunished[l,i] =  mean(dwelldata$unpunished[[i]])
dwellmeans$punished[l,i] =  mean(dwelldata$punished[[i]])
dwellmeans = list()
dwellmeans$unpunished <- dwellmeans$punished <- data.frame(matrix(ncol = NofPeriods))
dwellmeans$unpunished[l,i] =  mean(dwelldata$unpunished[[i]])
dwellmeans$punished[l,i] =  mean(dwelldata$punished[[i]])
View(dwelldata)
dwelltimes$punished[[i]] = sort(unique(dwelldata$punished[[i]])) #calculate the dwelling times. It sorts the unique values in ascending order.
dwelltimes$unpunished[[i]] = sort(unique(dwelldata$unpunished[[i]])) #calculate the dwelling times
dwelldata$unpunished[[i]] = melt(shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
dwelldata$punished[[i]] = melt(shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
dwelldata$punished[[i]]$times = dwelltimes$punished[[i]]
dwelldata$unpunished[[i]]$times = dwelltimes$unpunished[[i]]
View(dwelldata)
i=2
dwellperiod[[i]] = rle(dwellperiod[[i]])                                                    #run length encode the punished and unpunished data points
dwellperiod[[i]][[1]] = dwellperiod[[i]][[1]]*0.05                                          #convert run lenghts into seconds. Now we have the raw dwelling times.
dwelldata$unpunished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["0"]) #unpunished dwelling times
dwelldata$punished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["1"])   #punished dwelling times
if(is.null(dwelldata$unpunished[[i]])){dwelldata$unpunished[[i]]=as.integer(0)}             #if no data points, set to zero seconds
if(is.null(dwelldata$punished[[i]])){dwelldata$punished[[i]]=as.integer(0)}                 #if no data points, set to zero seconds
#calculate mean dwelling times and add them to the list used in prject evaluations
dwellmeans$unpunished[l,i] =  mean(dwelldata$unpunished[[i]])
dwellmeans$punished[l,i] =  mean(dwelldata$punished[[i]])
#Prepare data for plotting cumulative percentages
#calculate x-axis for cumulative distributions
dwelltimes$punished[[i]] = sort(unique(dwelldata$punished[[i]])) #calculate the dwelling times. It sorts the unique values in ascending order.
dwelltimes$unpunished[[i]] = sort(unique(dwelldata$unpunished[[i]])) #calculate the dwelling times
#calculate the cumulative percentages and shift the data down. Shift moves the data down by the number specified in n, fill=100 replaces the shifted value with 100, type="lag" decides in which direction to shift the data.
dwelldata$unpunished[[i]] = melt(shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
dwelldata$punished[[i]] = melt(shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
#move x-axes to dwelldata dataframe
dwelldata$punished[[i]]$times = dwelltimes$punished[[i]]
dwelldata$unpunished[[i]]$times = dwelltimes$unpunished[[i]]
i=3
dwellperiod[[i]] = rle(dwellperiod[[i]])                                                    #run length encode the punished and unpunished data points
dwellperiod[[i]][[1]] = dwellperiod[[i]][[1]]*0.05                                          #convert run lenghts into seconds. Now we have the raw dwelling times.
dwelldata$unpunished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["0"]) #unpunished dwelling times
dwelldata$punished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["1"])   #punished dwelling times
if(is.null(dwelldata$unpunished[[i]])){dwelldata$unpunished[[i]]=as.integer(0)}             #if no data points, set to zero seconds
if(is.null(dwelldata$punished[[i]])){dwelldata$punished[[i]]=as.integer(0)}                 #if no data points, set to zero seconds
#calculate mean dwelling times and add them to the list used in prject evaluations
dwellmeans$unpunished[l,i] =  mean(dwelldata$unpunished[[i]])
dwellmeans$punished[l,i] =  mean(dwelldata$punished[[i]])
#Prepare data for plotting cumulative percentages
#calculate x-axis for cumulative distributions
dwelltimes$punished[[i]] = sort(unique(dwelldata$punished[[i]])) #calculate the dwelling times. It sorts the unique values in ascending order.
dwelltimes$unpunished[[i]] = sort(unique(dwelldata$unpunished[[i]])) #calculate the dwelling times
#calculate the cumulative percentages and shift the data down. Shift moves the data down by the number specified in n, fill=100 replaces the shifted value with 100, type="lag" decides in which direction to shift the data.
dwelldata$unpunished[[i]] = melt(shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
dwelldata$punished[[i]] = melt(shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
#move x-axes to dwelldata dataframe
dwelldata$punished[[i]]$times = dwelltimes$punished[[i]]
dwelldata$unpunished[[i]]$times = dwelltimes$unpunished[[i]]
for (i in NofPeriods) {
dwellperiod[[i]] = rle(dwellperiod[[i]])                                                    #run length encode the punished and unpunished data points
dwellperiod[[i]][[1]] = dwellperiod[[i]][[1]]*0.05                                          #convert run lenghts into seconds. Now we have the raw dwelling times.
dwelldata$unpunished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["0"]) #unpunished dwelling times
dwelldata$punished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["1"])   #punished dwelling times
if(is.null(dwelldata$unpunished[[i]])){dwelldata$unpunished[[i]]=as.integer(0)}             #if no data points, set to zero seconds
if(is.null(dwelldata$punished[[i]])){dwelldata$punished[[i]]=as.integer(0)}                 #if no data points, set to zero seconds
#calculate mean dwelling times and add them to the list used in prject evaluations
dwellmeans$unpunished[l,i] =  mean(dwelldata$unpunished[[i]])
dwellmeans$punished[l,i] =  mean(dwelldata$punished[[i]])
#Prepare data for plotting cumulative percentages
#calculate x-axis for cumulative distributions
dwelltimes$punished[[i]] = sort(unique(dwelldata$punished[[i]])) #calculate the dwelling times. It sorts the unique values in ascending order.
dwelltimes$unpunished[[i]] = sort(unique(dwelldata$unpunished[[i]])) #calculate the dwelling times
#calculate the cumulative percentages and shift the data down. Shift moves the data down by the number specified in n, fill=100 replaces the shifted value with 100, type="lag" decides in which direction to shift the data.
dwelldata$unpunished[[i]] = melt(shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
dwelldata$punished[[i]] = melt(shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
#move x-axes to dwelldata dataframe
dwelldata$punished[[i]]$times = dwelltimes$punished[[i]]
dwelldata$unpunished[[i]]$times = dwelltimes$unpunished[[i]]
#plots the cumulative percentage data
# dwellplots[[i]] =ggplot() +
#   geom_line(data= dwelldata$unpunished[[i]], aes(x=times, y=value,color="goldenrod"))+
#   geom_point(data= dwelldata$unpunished[[i]], aes(x=times, y=value,color="goldenrod"))+
#   geom_line(data= dwelldata$punished[[i]], aes(x=times, y=value,color="blue"))+
#   geom_point(data= dwelldata$punished[[i]], aes(x=times, y=value,color="blue"))+
#   scale_y_log10( breaks=c(0,10,100))+
#   scale_x_log10() +
#   ggtitle(paste(flyname, "Period", i))+
#   theme_light() +
#   labs(x="time [sec]", y="% events",  color = "Outcome") +
#   annotate("text", Inf, Inf, label = training[i], hjust =1.05, vjust = 1)+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
#   labs(color='Outcome') +
#   scale_color_manual(values=c("firebrick3", "steelblue4"),
#                      name="Experimental\nCondition",
#                      labels=c("Punished", "Unpunished"))+
#   theme(plot.title = element_text(color="black", size=12, face="bold", hjust = 0.5))
} #...for NofPeriods
multiplot(plotlist = dwellplots, cols=2)
for (i in NofPeriods) {
dwellperiod[[i]] = rle(dwellperiod[[i]])                                                    #run length encode the punished and unpunished data points
dwellperiod[[i]][[1]] = dwellperiod[[i]][[1]]*0.05                                          #convert run lenghts into seconds. Now we have the raw dwelling times.
dwelldata$unpunished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["0"]) #unpunished dwelling times
dwelldata$punished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["1"])   #punished dwelling times
if(is.null(dwelldata$unpunished[[i]])){dwelldata$unpunished[[i]]=as.integer(0)}             #if no data points, set to zero seconds
if(is.null(dwelldata$punished[[i]])){dwelldata$punished[[i]]=as.integer(0)}                 #if no data points, set to zero seconds
#calculate mean dwelling times and add them to the list used in prject evaluations
dwellmeans$unpunished[l,i] =  mean(dwelldata$unpunished[[i]])
dwellmeans$punished[l,i] =  mean(dwelldata$punished[[i]])
#Prepare data for plotting cumulative percentages
#calculate x-axis for cumulative distributions
dwelltimes$punished[[i]] = sort(unique(dwelldata$punished[[i]])) #calculate the dwelling times. It sorts the unique values in ascending order.
dwelltimes$unpunished[[i]] = sort(unique(dwelldata$unpunished[[i]])) #calculate the dwelling times
#calculate the cumulative percentages and shift the data down. Shift moves the data down by the number specified in n, fill=100 replaces the shifted value with 100, type="lag" decides in which direction to shift the data.
dwelldata$unpunished[[i]] = melt(shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
dwelldata$punished[[i]] = melt(shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
#move x-axes to dwelldata dataframe
dwelldata$punished[[i]]$times = dwelltimes$punished[[i]]
dwelldata$unpunished[[i]]$times = dwelltimes$unpunished[[i]]
#plots the cumulative percentage data
# dwellplots[[i]] =ggplot() +
#   geom_line(data= dwelldata$unpunished[[i]], aes(x=times, y=value,color="goldenrod"))+
#   geom_point(data= dwelldata$unpunished[[i]], aes(x=times, y=value,color="goldenrod"))+
#   geom_line(data= dwelldata$punished[[i]], aes(x=times, y=value,color="blue"))+
#   geom_point(data= dwelldata$punished[[i]], aes(x=times, y=value,color="blue"))+
#   scale_y_log10( breaks=c(0,10,100))+
#   scale_x_log10() +
#   ggtitle(paste(flyname, "Period", i))+
#   theme_light() +
#   labs(x="time [sec]", y="% events",  color = "Outcome") +
#   annotate("text", Inf, Inf, label = training[i], hjust =1.05, vjust = 1)+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
#   labs(color='Outcome') +
#   scale_color_manual(values=c("firebrick3", "steelblue4"),
#                      name="Experimental\nCondition",
#                      labels=c("Punished", "Unpunished"))+
#   theme(plot.title = element_text(color="black", size=12, face="bold", hjust = 0.5))
}
dwellperiod <- split(rawdata$punished, rawdata$period) #split the punished/unpunished datapoints by period
for (i in NofPeriods) {
dwellperiod[[i]] = rle(dwellperiod[[i]])                                                    #run length encode the punished and unpunished data points
dwellperiod[[i]][[1]] = dwellperiod[[i]][[1]]*0.05                                          #convert run lenghts into seconds. Now we have the raw dwelling times.
dwelldata$unpunished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["0"]) #unpunished dwelling times
dwelldata$punished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["1"])   #punished dwelling times
if(is.null(dwelldata$unpunished[[i]])){dwelldata$unpunished[[i]]=as.integer(0)}             #if no data points, set to zero seconds
if(is.null(dwelldata$punished[[i]])){dwelldata$punished[[i]]=as.integer(0)}                 #if no data points, set to zero seconds
#calculate mean dwelling times and add them to the list used in prject evaluations
dwellmeans$unpunished[l,i] =  mean(dwelldata$unpunished[[i]])
dwellmeans$punished[l,i] =  mean(dwelldata$punished[[i]])
#Prepare data for plotting cumulative percentages
#calculate x-axis for cumulative distributions
dwelltimes$punished[[i]] = sort(unique(dwelldata$punished[[i]])) #calculate the dwelling times. It sorts the unique values in ascending order.
dwelltimes$unpunished[[i]] = sort(unique(dwelldata$unpunished[[i]])) #calculate the dwelling times
#calculate the cumulative percentages and shift the data down. Shift moves the data down by the number specified in n, fill=100 replaces the shifted value with 100, type="lag" decides in which direction to shift the data.
dwelldata$unpunished[[i]] = melt(shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
dwelldata$punished[[i]] = melt(shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
#move x-axes to dwelldata dataframe
dwelldata$punished[[i]]$times = dwelltimes$punished[[i]]
dwelldata$unpunished[[i]]$times = dwelltimes$unpunished[[i]]
#plots the cumulative percentage data
# dwellplots[[i]] =ggplot() +
#   geom_line(data= dwelldata$unpunished[[i]], aes(x=times, y=value,color="goldenrod"))+
#   geom_point(data= dwelldata$unpunished[[i]], aes(x=times, y=value,color="goldenrod"))+
#   geom_line(data= dwelldata$punished[[i]], aes(x=times, y=value,color="blue"))+
#   geom_point(data= dwelldata$punished[[i]], aes(x=times, y=value,color="blue"))+
#   scale_y_log10( breaks=c(0,10,100))+
#   scale_x_log10() +
#   ggtitle(paste(flyname, "Period", i))+
#   theme_light() +
#   labs(x="time [sec]", y="% events",  color = "Outcome") +
#   annotate("text", Inf, Inf, label = training[i], hjust =1.05, vjust = 1)+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
#   labs(color='Outcome') +
#   scale_color_manual(values=c("firebrick3", "steelblue4"),
#                      name="Experimental\nCondition",
#                      labels=c("Punished", "Unpunished"))+
#   theme(plot.title = element_text(color="black", size=12, face="bold", hjust = 0.5))
}
i=1
dwellperiod <- split(rawdata$punished, rawdata$period) #split the punished/unpunished datapoints by period
for (i in NofPeriods) {
dwellperiod[[i]] = rle(dwellperiod[[i]])                                                    #run length encode the punished and unpunished data points
dwellperiod[[i]][[1]] = dwellperiod[[i]][[1]]*0.05                                          #convert run lenghts into seconds. Now we have the raw dwelling times.
dwelldata$unpunished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["0"]) #unpunished dwelling times
dwelldata$punished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["1"])   #punished dwelling times
if(is.null(dwelldata$unpunished[[i]])){dwelldata$unpunished[[i]]=as.integer(0)}             #if no data points, set to zero seconds
if(is.null(dwelldata$punished[[i]])){dwelldata$punished[[i]]=as.integer(0)}                 #if no data points, set to zero seconds
#calculate mean dwelling times and add them to the list used in prject evaluations
dwellmeans$unpunished[l,i] =  mean(dwelldata$unpunished[[i]])
dwellmeans$punished[l,i] =  mean(dwelldata$punished[[i]])
#Prepare data for plotting cumulative percentages
#calculate x-axis for cumulative distributions
dwelltimes$punished[[i]] = sort(unique(dwelldata$punished[[i]])) #calculate the dwelling times. It sorts the unique values in ascending order.
dwelltimes$unpunished[[i]] = sort(unique(dwelldata$unpunished[[i]])) #calculate the dwelling times
#calculate the cumulative percentages and shift the data down. Shift moves the data down by the number specified in n, fill=100 replaces the shifted value with 100, type="lag" decides in which direction to shift the data.
dwelldata$unpunished[[i]] = melt(shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
dwelldata$punished[[i]] = melt(shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
#move x-axes to dwelldata dataframe
dwelldata$punished[[i]]$times = dwelltimes$punished[[i]]
dwelldata$unpunished[[i]]$times = dwelltimes$unpunished[[i]]
#plots the cumulative percentage data
# dwellplots[[i]] =ggplot() +
#   geom_line(data= dwelldata$unpunished[[i]], aes(x=times, y=value,color="goldenrod"))+
#   geom_point(data= dwelldata$unpunished[[i]], aes(x=times, y=value,color="goldenrod"))+
#   geom_line(data= dwelldata$punished[[i]], aes(x=times, y=value,color="blue"))+
#   geom_point(data= dwelldata$punished[[i]], aes(x=times, y=value,color="blue"))+
#   scale_y_log10( breaks=c(0,10,100))+
#   scale_x_log10() +
#   ggtitle(paste(flyname, "Period", i))+
#   theme_light() +
#   labs(x="time [sec]", y="% events",  color = "Outcome") +
#   annotate("text", Inf, Inf, label = training[i], hjust =1.05, vjust = 1)+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
#   labs(color='Outcome') +
#   scale_color_manual(values=c("firebrick3", "steelblue4"),
#                      name="Experimental\nCondition",
#                      labels=c("Punished", "Unpunished"))+
#   theme(plot.title = element_text(color="black", size=12, face="bold", hjust = 0.5))
}
dwellperiod <- split(rawdata$punished, rawdata$period) #split the punished/unpunished datapoints by period
for (i in 1:NofPeriods) {
dwellperiod[[i]] = rle(dwellperiod[[i]])                                                    #run length encode the punished and unpunished data points
dwellperiod[[i]][[1]] = dwellperiod[[i]][[1]]*0.05                                          #convert run lenghts into seconds. Now we have the raw dwelling times.
dwelldata$unpunished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["0"]) #unpunished dwelling times
dwelldata$punished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["1"])   #punished dwelling times
if(is.null(dwelldata$unpunished[[i]])){dwelldata$unpunished[[i]]=as.integer(0)}             #if no data points, set to zero seconds
if(is.null(dwelldata$punished[[i]])){dwelldata$punished[[i]]=as.integer(0)}                 #if no data points, set to zero seconds
#calculate mean dwelling times and add them to the list used in prject evaluations
dwellmeans$unpunished[l,i] =  mean(dwelldata$unpunished[[i]])
dwellmeans$punished[l,i] =  mean(dwelldata$punished[[i]])
#Prepare data for plotting cumulative percentages
#calculate x-axis for cumulative distributions
dwelltimes$punished[[i]] = sort(unique(dwelldata$punished[[i]])) #calculate the dwelling times. It sorts the unique values in ascending order.
dwelltimes$unpunished[[i]] = sort(unique(dwelldata$unpunished[[i]])) #calculate the dwelling times
#calculate the cumulative percentages and shift the data down. Shift moves the data down by the number specified in n, fill=100 replaces the shifted value with 100, type="lag" decides in which direction to shift the data.
dwelldata$unpunished[[i]] = melt(shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
dwelldata$punished[[i]] = melt(shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
#move x-axes to dwelldata dataframe
dwelldata$punished[[i]]$times = dwelltimes$punished[[i]]
dwelldata$unpunished[[i]]$times = dwelltimes$unpunished[[i]]
#plots the cumulative percentage data
# dwellplots[[i]] =ggplot() +
#   geom_line(data= dwelldata$unpunished[[i]], aes(x=times, y=value,color="goldenrod"))+
#   geom_point(data= dwelldata$unpunished[[i]], aes(x=times, y=value,color="goldenrod"))+
#   geom_line(data= dwelldata$punished[[i]], aes(x=times, y=value,color="blue"))+
#   geom_point(data= dwelldata$punished[[i]], aes(x=times, y=value,color="blue"))+
#   scale_y_log10( breaks=c(0,10,100))+
#   scale_x_log10() +
#   ggtitle(paste(flyname, "Period", i))+
#   theme_light() +
#   labs(x="time [sec]", y="% events",  color = "Outcome") +
#   annotate("text", Inf, Inf, label = training[i], hjust =1.05, vjust = 1)+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
#   labs(color='Outcome') +
#   scale_color_manual(values=c("firebrick3", "steelblue4"),
#                      name="Experimental\nCondition",
#                      labels=c("Punished", "Unpunished"))+
#   theme(plot.title = element_text(color="black", size=12, face="bold", hjust = 0.5))
}
dwellperiod <- split(rawdata$punished, rawdata$period) #split the punished/unpunished datapoints by period
for (i in 1:NofPeriods) {
dwellperiod[[i]] = rle(dwellperiod[[i]])                                                    #run length encode the punished and unpunished data points
dwellperiod[[i]][[1]] = dwellperiod[[i]][[1]]*0.05                                          #convert run lenghts into seconds. Now we have the raw dwelling times.
dwelldata$unpunished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["0"]) #unpunished dwelling times
dwelldata$punished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["1"])   #punished dwelling times
if(is.null(dwelldata$unpunished[[i]])){dwelldata$unpunished[[i]]=as.integer(0)}             #if no data points, set to zero seconds
if(is.null(dwelldata$punished[[i]])){dwelldata$punished[[i]]=as.integer(0)}                 #if no data points, set to zero seconds
#calculate mean dwelling times and add them to the list used in prject evaluations
dwellmeans$unpunished[l,i] =  mean(dwelldata$unpunished[[i]])
dwellmeans$punished[l,i] =  mean(dwelldata$punished[[i]])
#Prepare data for plotting cumulative percentages
#calculate x-axis for cumulative distributions
dwelltimes$punished[[i]] = sort(unique(dwelldata$punished[[i]])) #calculate the dwelling times. It sorts the unique values in ascending order.
dwelltimes$unpunished[[i]] = sort(unique(dwelldata$unpunished[[i]])) #calculate the dwelling times
#calculate the cumulative percentages and shift the data down. Shift moves the data down by the number specified in n, fill=100 replaces the shifted value with 100, type="lag" decides in which direction to shift the data.
dwelldata$unpunished[[i]] = melt(shift((100-freq(dwelldata$unpunished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
dwelldata$punished[[i]] = melt(shift((100-freq(dwelldata$punished[[i]], cum = TRUE)$`val%cum`), n=1, fill=100, type="lag"))
#move x-axes to dwelldata dataframe
dwelldata$punished[[i]]$times = dwelltimes$punished[[i]]
dwelldata$unpunished[[i]]$times = dwelltimes$unpunished[[i]]
#plots the cumulative percentage data
dwellplots[[i]] =ggplot() +
geom_line(data= dwelldata$unpunished[[i]], aes(x=times, y=value,color="goldenrod"))+
geom_point(data= dwelldata$unpunished[[i]], aes(x=times, y=value,color="goldenrod"))+
geom_line(data= dwelldata$punished[[i]], aes(x=times, y=value,color="blue"))+
geom_point(data= dwelldata$punished[[i]], aes(x=times, y=value,color="blue"))+
scale_y_log10( breaks=c(0,10,100))+
scale_x_log10() +
ggtitle(paste(flyname, "Period", i))+
theme_light() +
labs(x="time [sec]", y="% events",  color = "Outcome") +
annotate("text", Inf, Inf, label = training[i], hjust =1.05, vjust = 1)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(color='Outcome') +
scale_color_manual(values=c("firebrick3", "steelblue4"),
name="Experimental\nCondition",
labels=c("Punished", "Unpunished"))+
theme(plot.title = element_text(color="black", size=12, face="bold", hjust = 0.5))
} #...for NofPeriods
multiplot(plotlist = dwellplots, cols=2)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
dwellperiod[[i]] = rle(dwellperiod[[i]])                                                    #run length encode the punished and unpunished data points
dwellperiod[[i]] = rle(dwellperiod[[i]])                                                    #run length encode the punished and unpunished data points
View(dwelldata)
dwelldata$unpunished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["0"]) #unpunished dwelling times
dwelldata$punished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["1"])   #punished dwelling times
View(dwelldata)
unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["1"])
unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["0"])
dwelldata$punished[[i]]
dwelldata$punished[[5]]
dwelldata$punished[[i]]
dwelldata$punished[[i]] = unlist(split(dwellperiod[[i]][[1]],dwellperiod[[i]][[2]])["1"])
View(dwelldata)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
install.packages("simpleboot", dependencies = TRUE)
###### continue for all projects with two groups
#### ----- call RMarkdown for project evaluations ----- ################################################
rmarkdown::render(paste(start.wd,"/project.Rmd", sep=""),                                          #####
output_file = paste(project.data$experiment$name,"html", sep = "."),             #####
output_dir = evaluation.path)                                                    #####
#### ----- end RMarkdown for project evaluations ----- #################################################
Runtime = round(((Sys.time() - start_time)), 3) #Subtracts the endtime with the starttime to get the total analysis time
print(paste0("Runtime per fly was ", ((Runtime)*60)/totalflies, " seconds", ", in total ", round(Runtime, 3), " minutes")) #prints the time per fly and the total time
setwd(start.wd)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
install.packages("RColorBrewer", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
unpaired_median_diff <- dabest(PIstatCombined, group, PIs, idx = groupnames, paired = FALSE, func = median) #create estimation results list
print(plot(unpaired_median_diff)) #plot results
install.packages("ggbeeswarm", dependencies = TRUE)
install.packages("dabestr", dependencies = TRUE)
install.packages("dabestr", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
unpaired_median_diff <- dabest(PIstatCombined, group, PIs, idx = groupnames, paired = FALSE, func = median) #create estimation results list
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
install.packages("beeswarm", dependencies = TRUE)
unpaired_median_diff <- dabest(PIstatCombined, group, PIs, idx = groupnames, paired = FALSE, func = median) #create estimation results list
print(plot(unpaired_median_diff)) #plot results
install.packages("vipor", dependencies = TRUE)
unpaired_median_diff <- dabest(PIstatCombined, group, PIs, idx = groupnames, paired = FALSE, func = median) #create estimation results list
print(plot(unpaired_median_diff)) #plot results
install.packages("cowplot", dependencies = TRUE)
unpaired_median_diff <- dabest(PIstatCombined, group, PIs, idx = groupnames, paired = FALSE, func = median) #create estimation results list
print(plot(unpaired_median_diff)) #plot results
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
ggplot(dwellmeans[[x]], aes(as.factor(period), value, fill = Outcome)) +
geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = 0), fill=("lightgrey")) +
stat_summary(geom = "errorbar", fun.data = mean_se, width = 0.3)+
stat_summary(geom = "bar", fun = mean, col="black", width = 0.7)+
geom_hline(yintercept = 0, colour = "#887000", size = 1.2)+
geom_jitter(aes(colour = Outcome), colour="black",pch=21, size=3, alpha=0.5)+
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",samplesizes[x]))+
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank()
,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA))+
theme(axis.text.y = element_text(size=18))+
ylab("mean dwelling [sec]")+
labs(fill = "Outcome") +
xlab("Experiment Sequence")+
scale_y_continuous(labels=abs)+
xlim(0, 30) +
guides(fill = FALSE, size = FALSE)
ggplot(dwellmeans[[x]], aes(as.factor(period), value, fill = Outcome)) +
geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = 0), fill=("lightgrey")) +
stat_summary(geom = "errorbar", fun.data = mean_se, width = 0.3)+
stat_summary(geom = "bar", fun = mean, col="black", width = 0.7)+
geom_hline(yintercept = 0, colour = "#887000", size = 1.2)+
geom_jitter(aes(colour = Outcome), colour="black",pch=21, size=3, alpha=0.5)+
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",samplesizes[x]))+
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank()
,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA))+
theme(axis.text.y = element_text(size=18))+
ylab("mean dwelling [sec]")+
labs(fill = "Outcome") +
xlab("Experiment Sequence")+
scale_y_continuous(labels=abs)+
#xlim(0, 30) +
guides(fill = FALSE, size = FALSE)
ggplot(dwellmeans[[x]], aes(as.factor(period), value, fill = Outcome)) +
geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = 0), fill=("lightgrey")) +
stat_summary(geom = "errorbar", fun.data = mean_se, width = 0.3)+
stat_summary(geom = "bar", fun = mean, col="black", width = 0.7)+
geom_hline(yintercept = 0, colour = "#887000", size = 1.2)+
geom_jitter(aes(colour = Outcome), colour="black",pch=21, size=3, alpha=0.5)+
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",samplesizes[x]))+
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank()
,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA))+
theme(axis.text.y = element_text(size=18))+
ylab("mean dwelling [sec]")+
labs(fill = "Outcome") +
xlab("Experiment Sequence")+
scale_y_continuous(labels=abs)+
ylim(0, 30) +
guides(fill = FALSE, size = FALSE)
ggplot(dwellmeans[[x]], aes(as.factor(period), value, fill = Outcome)) +
geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = 0), fill=("lightgrey")) +
stat_summary(geom = "errorbar", fun.data = mean_se, width = 0.3)+
stat_summary(geom = "bar", fun = mean, col="black", width = 0.7)+
geom_hline(yintercept = 0, colour = "#887000", size = 1.2)+
geom_jitter(aes(colour = Outcome), colour="black",pch=21, size=3, alpha=0.5)+
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",samplesizes[x]))+
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank()
,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA))+
theme(axis.text.y = element_text(size=18))+
ylab("mean dwelling [sec]")+
labs(fill = "Outcome") +
xlab("Experiment Sequence")+
scale_y_continuous(labels=abs)+
ylim(-30, 30) +
guides(fill = FALSE, size = FALSE)
View(dwellmeans)
View(dwellmeans$punished)
View(dwellmeans$unpunished)
dwellmeans[[1]]
grouped.dwell[[x]]
max(colMeans(dwellmeans$unpunished))
max(colMeans(PIprofile))
View(PIprofile)
View(PIstat)
max(colMeans(PIstat))
max(colMeans(PIstat, na.rm = TRUE))
dwellrange=NA
dwellrange[1]=30
dwellrange[2]=40
dwellrange[3]=60
dwellrange[4]=10
dwellrange[5]=80
max(dwellrange)
dwellrange=max(dwellrange)
dwellrange=-dwellrange
dwellrange[2]=-dwellrange
ggplot(dwellmeans[[x]], aes(as.factor(period), value, fill = Outcome)) +
geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = 0), fill=("lightgrey")) +
stat_summary(geom = "errorbar", fun.data = mean_se, width = 0.3)+
stat_summary(geom = "bar", fun = mean, col="black", width = 0.7)+
geom_hline(yintercept = 0, colour = "#887000", size = 1.2)+
geom_jitter(aes(colour = Outcome), colour="black",pch=21, size=3, alpha=0.5)+
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",samplesizes[x]))+
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank()
,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA))+
theme(axis.text.y = element_text(size=18))+
ylab("mean dwelling [sec]")+
labs(fill = "Outcome") +
xlab("Experiment Sequence")+
scale_y_continuous(labels=abs)+
ylim(dwellrange) +
guides(fill = FALSE, size = FALSE)
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
exists(dwellrange)
exists("dwellrange")
!exists("dwellrange"
)
if(!exists("dwellrange")){dwellrange=NA}
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
xml_name
sequence$type %like% 'yt|color|sw|fs'
unique(sequence$type %like% 'yt|color|sw|fs')
any(sequence$type=='yt|color|sw|fs')
any(sequence$type==fs)
any(sequence$type=="fs")
any(sequence$type=="fs"|"color")
any(sequence$type==c("fs"|"color"))
any(sequence$type=="fs,color")
any(sequence$type=="fs|color")
'yt|color|sw|fs' in sequence$type
'yt|color|sw|fs' %in% sequence$type
"yt|color|sw|fs" %in% sequence$type
c("yt,"color","sw","fs") %in% sequence$type
c("yt","color","sw","fs") %in% sequence$type
any(c("yt","color","sw","fs")) %in% sequence$type
which(c("yt","color","sw","fs")) %in% sequence$type
which(c("yt","color","sw","fs") %in% sequence$type)
any(c("yt","color","sw","fs") %in% sequence$type)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
View(rawdata)
i=1
knitr::opts_chunk$set(echo = TRUE)
sequence$contingency[i] == 'left_torque'
