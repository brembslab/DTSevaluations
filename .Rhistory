library(rmarkdown)
library(markdown)
library(knitr)
library(dabestr)
library(zoo)
library(tidyverse)
library(questionr)
library(data.table)
library(DescTools)
library(magick)
library(reactable)
library(raincloudplots)
library(sicegar)
library(ggpmisc)
library(ggrain)
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
load("B:/GitHub/DTSevaluations/.RData")
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(pretestPIs.category, plotOMparamsBefore.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(pretestPIs.category, plotOMparamsBefore.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(postPIs.category, plotOMparamsAfter.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation after training")) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
scale_x_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(postPIs.category, plotOMparamsAfter.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation after training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(pretestPIs.category, plotOMparamsBefore.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(postPIs.category, plotOMparamsAfter.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation after training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(pretestPIs.category, plotOMparamsBefore.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
install.packages(c("askpass", "BiocManager", "broom", "bslib", "cachem", "class", "classInt", "cpp11", "curl", "dbplyr", "DescTools", "deSolve", "digest", "dplyr", "evaluate", "fontawesome", "fs", "gargle", "ggbeeswarm", "ggplot2", "googledrive", "googlesheets4", "gss", "gtable", "haven", "htmltools", "httpuv", "httr", "jsonlite", "KernSmooth", "knitr", "labeling", "labelled", "later", "lattice", "lmom", "magick", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "mvtnorm", "nlme", "nnet", "openssl", "pbapply", "processx", "promises", "ps", "purrr", "Rcpp", "RCurl", "readxl", "rematch", "remotes", "rlang", "rmarkdown", "RSQLite", "rstudioapi", "sass", "seewave", "shiny", "spatial", "styler", "survival", "sys", "timeSeries", "tinytex", "tuneR", "tzdb", "uuid", "vctrs", "viridisLite", "vroom", "xfun", "xml2", "xts", "zoo"))
knitr::opts_chunk$set(echo = TRUE)
exists(plotOMparamsBefore$group), "right")
"right" %in% plotOMparamsBefore$group
install.packages(c("DescTools", "digest", "dplyr", "htmltools", "lattice", "MASS", "Matrix", "Rcpp", "rlang", "survival", "vctrs", "xfun"))
library(ggplot2)
library(cowplot)
library(ggiraph)
library(tidyr)
library(dygraphs)
library(grid)
library(reshape2)
library(plyr)
library(dplyr)
library(gridExtra)
library(yaml)
library(ggsignif)
library(effsize)
library(pwr)
library(BayesFactor)
library(genefilter)
library(seewave)
library(lubridate)
library(rmarkdown)
library(markdown)
library(knitr)
library(dabestr)
library(zoo)
library(tidyverse)
library(questionr)
library(data.table)
library(DescTools)
library(magick)
library(reactable)
library(raincloudplots)
library(sicegar)
library(ggpmisc)
library(ggrain)
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
install.packages("ggiraph")
install.packages("ggiraph")
install.packages("ggiraph")
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
install.packages(c("askpass", "BayesFactor", "BH", "BiocManager", "bit", "blob", "broom", "bslib", "cachem", "callr", "classInt", "cli", "colorspace", "commonmark", "cpp11", "crayon", "curl", "dabestr", "data.table", "dbplyr", "DescTools", "deSolve", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "Exact", "expm", "fansi", "fastmap", "fBasics", "fontawesome", "forcats", "fs", "gargle", "ggbeeswarm", "ggforce", "gghalves", "ggiraph", "ggplot2", "ggsignif", "gld", "googledrive", "googlesheets4", "gss", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "labeling", "labelled", "later", "lattice", "lifecycle", "lmom", "lubridate", "magick", "markdown", "MatrixModels", "minpack.lm", "modelr", "mvtnorm", "openssl", "pbapply", "pillar", "plyr", "png", "polyclip", "prettyunits", "processx", "promises", "ps", "purrr", "questionr", "R.utils", "Rcpp", "RcppEigen", "RCurl", "reactable", "reactR", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rootSolve", "RSQLite", "rstudioapi", "rvest", "sass", "scales", "seewave", "shiny", "sourcetools", "stringi", "stringr", "styler", "sys", "systemfonts", "tibble", "tidyr", "tidyselect", "tidyverse", "timeDate", "timeSeries", "tinytex", "tuneR", "tweenr", "tzdb", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "withr", "xfun", "XML", "xml2", "xts", "yaml", "zoo"))
install.packages(c("askpass", "BayesFactor", "BH", "BiocManager", "bit", "blob", "broom", "bslib", "cachem", "callr", "classInt", "cli", "colorspace", "commonmark", "cpp11", "crayon", "curl", "dabestr", "data.table", "dbplyr", "DescTools", "deSolve", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "Exact", "expm", "fansi", "fastmap", "fBasics", "fontawesome", "forcats", "fs", "gargle", "ggbeeswarm", "ggforce", "gghalves", "ggiraph", "ggplot2", "ggsignif", "gld", "googledrive", "googlesheets4", "gss", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "labeling", "labelled", "later", "lattice", "lifecycle", "lmom", "lubridate", "magick", "markdown", "MatrixModels", "minpack.lm", "modelr", "mvtnorm", "openssl", "pbapply", "pillar", "plyr", "png", "polyclip", "prettyunits", "processx", "promises", "ps", "purrr", "questionr", "R.utils", "Rcpp", "RcppEigen", "RCurl", "reactable", "reactR", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rootSolve", "RSQLite", "rstudioapi", "rvest", "sass", "scales", "seewave", "shiny", "sourcetools", "stringi", "stringr", "styler", "sys", "systemfonts", "tibble", "tidyr", "tidyselect", "tidyverse", "timeDate", "timeSeries", "tinytex", "tuneR", "tweenr", "tzdb", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "withr", "xfun", "XML", "xml2", "xts", "yaml", "zoo"))
install.packages(c("cli", "colorspace", "dplyr", "fansi", "lattice", "purrr", "rlang", "tibble", "utf8", "vctrs"))
package_version("dabestr")
package_version("dplyr")
library("dabestr")
package_version("dabestr")
install.packages(c("BayesFactor", "BH", "bslib", "cli", "cluster", "cowplot", "cpp11", "curl", "dabestr", "data.table", "DBI", "dbplyr", "DescTools", "deSolve", "digest", "dplyr", "e1071", "evaluate", "expm", "fansi", "fBasics", "foreign", "ggiraph", "ggplot2", "ggpmisc", "ggpp", "glue", "gtools", "haven", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "knitr", "later", "lattice", "lifecycle", "lubridate", "magick", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minpack.lm", "mvtnorm", "nlme", "openssl", "plyr", "polyclip", "prettyunits", "processx", "progress", "R.utils", "ragg", "Rcpp", "RcppEigen", "RCurl", "reactR", "readr", "reprex", "rlang", "rmarkdown", "rootSolve", "rpart", "rprojroot", "RSQLite", "sandwich", "sass", "scales", "seewave", "shiny", "signal", "splus2R", "stringi", "stringr", "systemfonts", "textshaping", "timeDate", "timeSeries", "tinytex", "tuneR", "utf8", "uuid", "vctrs", "vipor", "vroom", "withr", "xfun", "XML", "xml2", "yaml"))
packageVersion("dabestr")
install.packages(c("cli", "coda", "commonmark", "data.table", "DescTools"))
install.packages(c("cli", "coda", "commonmark", "data.table", "DescTools"))
install.packages(c("cluster", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("lattice", "MASS", "Matrix"))
source("B:/GitHub/DTSevaluations/evaluate_datasets.R")
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
OMdata=grouped.OMdataAfter_swapped
ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(ymin=means-sem, ymax=means+sem, fill = group), alpha=0.5) +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Errors") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", Inf, -Inf, label = "Right (clockwise) arena rotations",hjust=1.1, vjust=-1.5)+
annotate("text", -Inf, Inf, label = "Left (counter-clockwise) arena rotations", hjust =-.2, vjust = 1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)+
scale_y_continuous(n.breaks=20))
plotOM=grouped.OMdataAfter_swapped
ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(ymin=means-sem, ymax=means+sem, fill = group), alpha=0.5) +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Errors") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", Inf, -Inf, label = "Right (clockwise) arena rotations",hjust=1.1, vjust=-1.5)+
annotate("text", -Inf, Inf, label = "Left (counter-clockwise) arena rotations", hjust =-.2, vjust = 1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)+
scale_y_continuous(n.breaks=20))
ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(ymin=means-sem, ymax=means+sem, fill = group), alpha=0.5) +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Errors") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", Inf, -Inf, label = "Right (clockwise) arena rotations",hjust=1.1, vjust=-1.5)+
annotate("text", -Inf, Inf, label = "Left (counter-clockwise) arena rotations", hjust =-.2, vjust = 1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)+
scale_y_continuous(n.breaks=20))
plotOM=ldply(OMdata, data.frame)            #move the dataframes for each group into a single dataframe
plotOM=plotOM[,c("time","means","sd","sem","group")]
ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(ymin=means-sem, ymax=means+sem, fill = group), alpha=0.5) +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Errors") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", Inf, -Inf, label = "Right (clockwise) arena rotations",hjust=1.1, vjust=-1.5)+
annotate("text", -Inf, Inf, label = "Left (counter-clockwise) arena rotations", hjust =-.2, vjust = 1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)+
scale_y_continuous(n.breaks=20))
View(plotOM)
ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(ymin=means-sem, ymax=means+sem, fill = group), alpha=0.5) +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Errors") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", Inf, -Inf, label = "Right (clockwise) arena rotations",hjust=1.1, vjust=-1.5)+
annotate("text", -Inf, Inf, label = "Left (counter-clockwise) arena rotations", hjust =-.2, vjust = 1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)+
#    scale_y_continuous(n.breaks=20)
)
ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(ymin=means-sem, ymax=means+sem, fill = group), alpha=0.5) +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Errors") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", Inf, -Inf, label = "Right (clockwise) arena rotations",hjust=1.1, vjust=-1.5)+
annotate("text", -Inf, Inf, label = "Left (counter-clockwise) arena rotations", hjust =-.2, vjust = 1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0))
ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(ymin=means-sem, ymax=means+sem, fill = group), alpha=0.5) +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Errors") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", Inf, -Inf, label = "Right (clockwise) arena rotations",hjust=1.1, vjust=-1.5)+
annotate("text", -Inf, Inf, label = "Left (counter-clockwise) arena rotations", hjust =-.2, vjust = 1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0))+
scale_y_continuous(n.breaks=20)
ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(ymin=means-sem, ymax=means+sem, fill = group), alpha=0.5) +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Errors") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", Inf, -Inf, label = "Right (clockwise) arena rotations",hjust=1.1, vjust=-1.5)+
annotate("text", -Inf, Inf, label = "Left (counter-clockwise) arena rotations", hjust =-.2, vjust = 1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0))+
scale_y_continuous(n.breaks=10)
ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(ymin=means-sem, ymax=means+sem, fill = group), alpha=0.5) +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Errors") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", Inf, -Inf, label = "Right (clockwise) arena rotations",hjust=1.1, vjust=-1.5)+
annotate("text", -Inf, Inf, label = "Left (counter-clockwise) arena rotations", hjust =-.2, vjust = 1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0))+
scale_y_continuous(n.breaks=8)
ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_hline(yintercept = 0, color="black") +
geom_ribbon(aes(ymin=means-sem, ymax=means+sem, fill = group), alpha=0.5) +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Errors") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", Inf, -Inf, label = "Right (clockwise) arena rotations",hjust=1.1, vjust=-1.5)+
annotate("text", -Inf, Inf, label = "Left (counter-clockwise) arena rotations", hjust =-.2, vjust = 1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0))+
scale_y_continuous(n.breaks=6)
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
