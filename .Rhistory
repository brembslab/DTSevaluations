geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_bar(fill = sequence$color, position=position_dodge(), stat="identity", colour="black") +
geom_errorbar(aes(ymin=mean-sem, ymax=mean+sem),
width=0,
size=1.5,
position=position_dodge(.9)) +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(PIprofile))) +
scale_x_continuous(breaks = seq(1, NofPeriods, 1)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.major.x = element_blank(),panel.grid.minor = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=16))+ ylab("PI [rel. units]") + theme(aspect.ratio=4/NofPeriods)
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
# Plot box&dotplot with notches
for(x in 1:NofGroups)
{
PIprofile <- grouped.PIprofiles[[x]]
PIplots[[x]] <- ggplot(melt(PIprofile), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = sequence$color, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIprofile), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(PIprofile))) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Experiment Sequence") + theme(aspect.ratio=4/NofPeriods)
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
# Plot box&dotplot without notches
for(x in 1:NofGroups)
{
PIprofile <- grouped.PIprofiles[[x]]
PIplots[[x]] <- ggplot(melt(PIprofile), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = sequence$color, notch = FALSE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIprofile), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(PIprofile))) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Experiment Sequence") + theme(aspect.ratio=4/NofPeriods)
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
# plot violin plot
for(x in 1:NofGroups)
{
PIprofile <- grouped.PIprofiles[[x]]
PIplots[[x]] <- ggplot(melt(PIprofile), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_violin(width = 1.1) +
geom_boxplot(fill = sequence$color, width = 0.1, outlier.color="darkred") +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(PIprofile))) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Experiment Sequence") + theme(aspect.ratio=4/NofPeriods)
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
###### if there are more than two groups, try to pool the data into 'experimental' and 'control'
if(NofGroups>2){}
###### statistical evaluations ######
if(!is.null(project.data[["statistics"]])) #check if there are statistics instructions
{
signif = project.data[["statistics"]][["significance-levels"]] #get significance levels
learningscore=project.data[["statistics"]][["learning-score"]][["data"]] #get the PI that is going to be tested
#create new dataframe with only the chosen PI values
PIstat <- list()
for(x in 1:NofGroups)
{
PIstat[[x]] <- grouped.PIprofiles[[x]][[learningscore]]
}
PIstat <- as.data.frame(t(plyr::ldply(PIstat, rbind))) #convert PI list to data.frame
colnames(PIstat) <- unlist(sapply(project.data[["resources"]], '[', 'name')) #add group names as column names to PIstat
###generate important variables for ater plotting and anotation
colorrange = project.data[["statistics"]][["color-range"]]
boxcolors = c(colorrange[1:NofGroups])
boxes<-c(1:NofGroups)
samplesizes<-as.numeric(apply(PIstat, 2, function(x) length(na.omit(x))))
##### Single group tests against zero #####
if(project.data[["statistics"]][["single.groups"]][["data"]]==1) #check if instructions contain Wlcoxon test against zero
{
wilcoxon<-numeric()
for(x in 1:NofGroups){wilcoxon[x] = signif(wilcox.test(PIstat[[x]])$p.value, 3)} #test all groups against zero
#compute Bayes Factor for each group
results.bayes<-list()
for(x in 1:NofGroups)
{
results.bayes[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))
row.names(results.bayes[[x]])[1] <- project.data[["resources"]][[x]][["name"]]
}
results.bayes<-do.call("rbind", results.bayes) #fuse all Bayes results into one dataframe
results.bayes <- results.bayes[-c(3,4)]# drop the date and code columns
#  results.bayes <- lapply(sapply(results.bayes, is.numeric) , signif, 3) # reduce results to 3 significant digits
# plot PI box plot with power analysis and asterisks for Wilcoxon test against zero
plots.singles<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = FALSE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle("Wilcoxon") +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes) +
wilcox.annotate(boxes, wilcoxon))
#add table with results and plot
plots.singles[[2]]<-tableGrob(results.bayes)
grid.arrange(grobs = plots.singles, ncol=2)
}
##### Tests between two independent samples #####
if(project.data[["statistics"]][["two.groups"]][["data"]]==1 || NofGroups==2) #check if instructions contain U-test between two groups and if we have two grouos
{
utest = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
#make tidy table of results
results.utest<-data.frame(values=c(signif[1], w.statistic, cohend, power, signif(bayesF$bf, 3), signif(bayesF$error, 3)))
rownames(results.utest)<-c("Significance level" ,"MW U-Test, W", "Cohen's D", "stat. Power", "Bayes Factor", "Bayes Factor error")
# plot two PIs with asterisks
plots.2test<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))), map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1])) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.2test[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.2test, ncol=2)
}
} #for if exists statistics
dev.off()
setwd(start.wd)
lapply(sapply(results.bayes, is.numeric) , signif, 3)
lapply(results.bayes , signif, 3)
grid.table(lapply(results.bayes , signif, 3))
test<-lapply(results.bayes , signif, 3)
test<-as.data.frame(lapply(results.bayes , signif, 3))
View(test)
pdf(file=paste(project.data$name,"pdf", sep = "."), paper="a4r", pointsize=1, width = 0, height = 0)
#title page with meta-data
plot.new() #write text header to summary data
#write titles
mtext("Project Evaluation Sheet", line = 1, font=2, cex=4)
mtext(project.data$title, line = -1, font=2, cex=1.8)
mtext(paste("Description:", project.data$description), line = -4, font=2, cex=1.3)
mtext(paste("Experimenter:", project.data[["author"]][[2]]), line = -5, font=2, cex=1.3)
mtext("Experimental design:", line = -8, font=2, cex=1.3)
#Write table of period design
periods <- periods[-6,]
periods[3,periods["outcome",]==0]="test"
periods[3,periods["outcome",]==1]="training"
grid.table(periods)
#plot torque histograms
for(x in 1:NofGroups)
{
trqhistos <- grouped.trqhistos[[x]]
multiplot(plotlist = trqhistos, cols=2) #torquehistos
mtext(project.data[["resources"]][[x]][["title"]], line = 3, font=2, cex=2)
}
#plot position histograms
for(x in 1:NofGroups)
{
poshistos <- grouped.poshistos[[x]]
multiplot(plotlist = poshistos, cols=2) #positionhistos
mtext(project.data[["resources"]][[x]][["title"]], line = 3, font=2, cex=2)
}
#plot bar plot with SEM
PIplots <- list()
for(x in 1:NofGroups)
{
PIprofile <- grouped.PIprofiles[[x]]
# compute summary statistics
error <- data.frame(period=integer(ncol(PIprofile)), mean=numeric(ncol(PIprofile)), sem=numeric(ncol(PIprofile)))
for(e in 1:ncol(PIprofile))
{
error$period[e]=e
error$mean[e]=mean(PIprofile[,e])
error$sem[e]=sd(PIprofile[,e]/sqrt(nrow(PIprofile)))
}
# plot graph
PIplots[[x]] <- ggplot(error, aes(x=period, y=mean)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_bar(fill = sequence$color, position=position_dodge(), stat="identity", colour="black") +
geom_errorbar(aes(ymin=mean-sem, ymax=mean+sem),
width=0,
size=1.5,
position=position_dodge(.9)) +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(PIprofile))) +
scale_x_continuous(breaks = seq(1, NofPeriods, 1)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.major.x = element_blank(),panel.grid.minor = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=16))+ ylab("PI [rel. units]") + theme(aspect.ratio=4/NofPeriods)
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
# Plot box&dotplot with notches
for(x in 1:NofGroups)
{
PIprofile <- grouped.PIprofiles[[x]]
PIplots[[x]] <- ggplot(melt(PIprofile), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = sequence$color, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIprofile), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(PIprofile))) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Experiment Sequence") + theme(aspect.ratio=4/NofPeriods)
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
# Plot box&dotplot without notches
for(x in 1:NofGroups)
{
PIprofile <- grouped.PIprofiles[[x]]
PIplots[[x]] <- ggplot(melt(PIprofile), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = sequence$color, notch = FALSE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIprofile), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(PIprofile))) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Experiment Sequence") + theme(aspect.ratio=4/NofPeriods)
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
# plot violin plot
for(x in 1:NofGroups)
{
PIprofile <- grouped.PIprofiles[[x]]
PIplots[[x]] <- ggplot(melt(PIprofile), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_violin(width = 1.1) +
geom_boxplot(fill = sequence$color, width = 0.1, outlier.color="darkred") +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(PIprofile))) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Experiment Sequence") + theme(aspect.ratio=4/NofPeriods)
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
###### if there are more than two groups, try to pool the data into 'experimental' and 'control'
if(NofGroups>2){}
###### statistical evaluations ######
if(!is.null(project.data[["statistics"]])) #check if there are statistics instructions
{
signif = project.data[["statistics"]][["significance-levels"]] #get significance levels
learningscore=project.data[["statistics"]][["learning-score"]][["data"]] #get the PI that is going to be tested
#create new dataframe with only the chosen PI values
PIstat <- list()
for(x in 1:NofGroups)
{
PIstat[[x]] <- grouped.PIprofiles[[x]][[learningscore]]
}
PIstat <- as.data.frame(t(plyr::ldply(PIstat, rbind))) #convert PI list to data.frame
colnames(PIstat) <- unlist(sapply(project.data[["resources"]], '[', 'name')) #add group names as column names to PIstat
###generate important variables for ater plotting and anotation
colorrange = project.data[["statistics"]][["color-range"]]
boxcolors = c(colorrange[1:NofGroups])
boxes<-c(1:NofGroups)
samplesizes<-as.numeric(apply(PIstat, 2, function(x) length(na.omit(x))))
##### Single group tests against zero #####
if(project.data[["statistics"]][["single.groups"]][["data"]]==1) #check if instructions contain Wlcoxon test against zero
{
wilcoxon<-numeric()
for(x in 1:NofGroups){wilcoxon[x] = signif(wilcox.test(PIstat[[x]])$p.value, 3)} #test all groups against zero
#compute Bayes Factor for each group
results.bayes<-list()
for(x in 1:NofGroups){results.bayes[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))} #extract BayesFactors for all groups
results.bayes<-do.call("rbind", results.bayes) #fuse all Bayes results into one dataframe
results.bayes <- results.bayes[-c(3,4)]# drop the date and code columns
results.bayes <- as.data.frame(sapply(results.bayes , signif, 3)) # reduce results to 3 significant digits
for(x in 1:NofGroups){row.names(results.bayes[[x]])[1] <- project.data[["resources"]][[x]][["name"]]} #add group names as row names
# plot PI box plot with power analysis and asterisks for Wilcoxon test against zero
plots.singles<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = FALSE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle("Wilcoxon") +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes) +
wilcox.annotate(boxes, wilcoxon))
#add table with results and plot
plots.singles[[2]]<-tableGrob(results.bayes)
grid.arrange(grobs = plots.singles, ncol=2)
}
##### Tests between two independent samples #####
if(project.data[["statistics"]][["two.groups"]][["data"]]==1 || NofGroups==2) #check if instructions contain U-test between two groups and if we have two grouos
{
utest = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
#make tidy table of results
results.utest<-data.frame(values=c(signif[1], w.statistic, cohend, power, signif(bayesF$bf, 3), signif(bayesF$error, 3)))
rownames(results.utest)<-c("Significance level" ,"MW U-Test, W", "Cohen's D", "stat. Power", "Bayes Factor", "Bayes Factor error")
# plot two PIs with asterisks
plots.2test<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))), map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1])) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.2test[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.2test, ncol=2)
}
} #for if exists statistics
dev.off()
setwd(start.wd)
View(results.bayes)
sapply(project.data[["resources"]], function(x), x["name"])
sapply(project.data[["resources"]], function(x) x["name"])
groupnames <- sapply(project.data[["resources"]], function(x), x["name"])
groupnames <- sapply(project.data[["resources"]], function(x) x["name"])
groupnames <- as.vector(sapply(project.data[["resources"]], function(x) x["name"]))
groupnames <- unlist(sapply(project.data[["resources"]], function(x) x["name"]))
row.names(results.bayes) <- groupnames
View(results.bayes)
View(results.bayes)
pdf(file=paste(project.data$name,"pdf", sep = "."), paper="a4r", pointsize=1, width = 0, height = 0)
#title page with meta-data
plot.new() #write text header to summary data
#write titles
mtext("Project Evaluation Sheet", line = 1, font=2, cex=4)
mtext(project.data$title, line = -1, font=2, cex=1.8)
mtext(paste("Description:", project.data$description), line = -4, font=2, cex=1.3)
mtext(paste("Experimenter:", project.data[["author"]][[2]]), line = -5, font=2, cex=1.3)
mtext("Experimental design:", line = -8, font=2, cex=1.3)
#Write table of period design
periods <- periods[-6,]
periods[3,periods["outcome",]==0]="test"
periods[3,periods["outcome",]==1]="training"
grid.table(periods)
#plot torque histograms
for(x in 1:NofGroups)
{
trqhistos <- grouped.trqhistos[[x]]
multiplot(plotlist = trqhistos, cols=2) #torquehistos
mtext(project.data[["resources"]][[x]][["title"]], line = 3, font=2, cex=2)
}
#plot position histograms
for(x in 1:NofGroups)
{
poshistos <- grouped.poshistos[[x]]
multiplot(plotlist = poshistos, cols=2) #positionhistos
mtext(project.data[["resources"]][[x]][["title"]], line = 3, font=2, cex=2)
}
#plot bar plot with SEM
PIplots <- list()
for(x in 1:NofGroups)
{
PIprofile <- grouped.PIprofiles[[x]]
# compute summary statistics
error <- data.frame(period=integer(ncol(PIprofile)), mean=numeric(ncol(PIprofile)), sem=numeric(ncol(PIprofile)))
for(e in 1:ncol(PIprofile))
{
error$period[e]=e
error$mean[e]=mean(PIprofile[,e])
error$sem[e]=sd(PIprofile[,e]/sqrt(nrow(PIprofile)))
}
# plot graph
PIplots[[x]] <- ggplot(error, aes(x=period, y=mean)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_bar(fill = sequence$color, position=position_dodge(), stat="identity", colour="black") +
geom_errorbar(aes(ymin=mean-sem, ymax=mean+sem),
width=0,
size=1.5,
position=position_dodge(.9)) +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(PIprofile))) +
scale_x_continuous(breaks = seq(1, NofPeriods, 1)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.major.x = element_blank(),panel.grid.minor = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=16))+ ylab("PI [rel. units]") + theme(aspect.ratio=4/NofPeriods)
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
# Plot box&dotplot with notches
for(x in 1:NofGroups)
{
PIprofile <- grouped.PIprofiles[[x]]
PIplots[[x]] <- ggplot(melt(PIprofile), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = sequence$color, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIprofile), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(PIprofile))) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Experiment Sequence") + theme(aspect.ratio=4/NofPeriods)
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
# Plot box&dotplot without notches
for(x in 1:NofGroups)
{
PIprofile <- grouped.PIprofiles[[x]]
PIplots[[x]] <- ggplot(melt(PIprofile), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = sequence$color, notch = FALSE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIprofile), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(PIprofile))) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Experiment Sequence") + theme(aspect.ratio=4/NofPeriods)
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
# plot violin plot
for(x in 1:NofGroups)
{
PIprofile <- grouped.PIprofiles[[x]]
PIplots[[x]] <- ggplot(melt(PIprofile), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_violin(width = 1.1) +
geom_boxplot(fill = sequence$color, width = 0.1, outlier.color="darkred") +
ggtitle(paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(PIprofile))) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Experiment Sequence") + theme(aspect.ratio=4/NofPeriods)
}
grid.arrange(grobs = PIplots, nrow=NofGroups)
###### if there are more than two groups, try to pool the data into 'experimental' and 'control'
if(NofGroups>2){}
###### statistical evaluations ######
if(!is.null(project.data[["statistics"]])) #check if there are statistics instructions
{
signif = project.data[["statistics"]][["significance-levels"]] #get significance levels
learningscore=project.data[["statistics"]][["learning-score"]][["data"]] #get the PI that is going to be tested
groupnames <- unlist(sapply(project.data[["resources"]], function(x) x["name"])) #get a vector with all group names
#create new dataframe with only the chosen PI values
PIstat <- list()
for(x in 1:NofGroups)
{
PIstat[[x]] <- grouped.PIprofiles[[x]][[learningscore]]
}
PIstat <- as.data.frame(t(plyr::ldply(PIstat, rbind))) #convert PI list to data.frame
colnames(PIstat) <- unlist(sapply(project.data[["resources"]], '[', 'name')) #add group names as column names to PIstat
###generate important variables for ater plotting and anotation
colorrange = project.data[["statistics"]][["color-range"]]
boxcolors = c(colorrange[1:NofGroups])
boxes<-c(1:NofGroups)
samplesizes<-as.numeric(apply(PIstat, 2, function(x) length(na.omit(x))))
##### Single group tests against zero #####
if(project.data[["statistics"]][["single.groups"]][["data"]]==1) #check if instructions contain Wlcoxon test against zero
{
wilcoxon<-numeric()
for(x in 1:NofGroups){wilcoxon[x] = signif(wilcox.test(PIstat[[x]])$p.value, 3)} #test all groups against zero
#compute Bayes Factor for each group
results.bayes<-list()
for(x in 1:NofGroups){results.bayes[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))} #extract BayesFactors for all groups
results.bayes<-do.call("rbind", results.bayes) #fuse all Bayes results into one dataframe
results.bayes <- results.bayes[-c(3,4)]# drop the date and code columns
results.bayes <- as.data.frame(sapply(results.bayes , signif, 3)) # reduce results to 3 significant digits
#add group names as row names
row.names(results.bayes) <- groupnames
# plot PI box plot with power analysis and asterisks for Wilcoxon test against zero
plots.singles<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = FALSE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle("Wilcoxon") +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes) +
wilcox.annotate(boxes, wilcoxon))
#add table with results and plot
plots.singles[[2]]<-tableGrob(results.bayes)
grid.arrange(grobs = plots.singles, ncol=2)
}
##### Tests between two independent samples #####
if(project.data[["statistics"]][["two.groups"]][["data"]]==1 || NofGroups==2) #check if instructions contain U-test between two groups and if we have two grouos
{
utest = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
#make tidy table of results
results.utest<-data.frame(values=c(signif[1], w.statistic, cohend, power, signif(bayesF$bf, 3), signif(bayesF$error, 3)))
rownames(results.utest)<-c("Significance level" ,"MW U-Test, W", "Cohen's D", "stat. Power", "Bayes Factor", "Bayes Factor error")
# plot two PIs with asterisks
plots.2test<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))), map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1])) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.2test[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.2test, ncol=2)
}
} #for if exists statistics
dev.off()
setwd(start.wd)
