boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(aes(color="black")
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(aes(color="black"),
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(inherit.aes=FALSE,
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(color="black",
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=8, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(color="black",
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=4, vjust=0.5) +
samplesizes.annotate(boxes, samplesizes)
ggplot(PIstatCombined, aes(group, PIs, fill=group, color=group)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_rain(point.args = list(size = 6, shape=HeatOn, alpha=(as.integer(as.factor(PIstatCombined$category))/2)),
point.args.pos = list(position = ggpp::position_jitternudge(width = 0.1, x = -0.25, nudge.from = "jittered")),
boxplot.args = list(fill="white", color = "black", outlier.shape = NA, size=1.1),
boxplot.args.pos = list(width = 0.12),
violin.args = list(color = NA, alpha = .8),
violin.args.pos = list(side = "r", width = 1)) +
stat_summary(fun.y = mean, color = "darkgrey", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
stat_summary(fun.y=median, color="black", geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.2, size = 2.1)+
scale_fill_manual(values = boxcolors) + #color of the violin plot
scale_color_manual(values = boxcolors) + #color of the points
scale_y_continuous(breaks = seq(-1, 1, .2)) +
guides(fill = 'none', color = 'none')+ # remove legends
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), axis.title.x=element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA), legend.position = "bottom", legend.direction = "horizontal") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18)) + ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+
theme(aspect.ratio=3/NofGroups)+
geom_signif(color="black",
comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=4, vjust=0.1) +
samplesizes.annotate(boxes, samplesizes)
knitr::opts_chunk$set(echo = TRUE)
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
library(ggplot2)
library(cowplot)
library(ggiraph)
library(tidyr)
library(dygraphs)
library(grid)
library(reshape2)
library(plyr)
library(dplyr)
library(gridExtra)
library(yaml)
library(ggsignif)
library(effsize)
library(pwr)
library(BayesFactor)
library(genefilter)
library(seewave)
library(lubridate)
library(rmarkdown)
library(markdown)
library(knitr)
library(dabestr)
library(zoo)
library(tidyverse)
library(questionr)
library(data.table)
library(DescTools)
library(magick)
library(reactable)
library(raincloudplots)
library(sicegar)
library(ggpmisc)
library(ggrain)
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
load("B:/GitHub/DTSevaluations/.RData")
ggplot(OMPIcorr, aes(plotOMparamsBefore.AI.OM., pretestPIs.category)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("Learning [rel. units]")+
xlab("OM Asymmetry [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(pretestPIs.category, plotOMparamsBefore.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1.2)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(pretestPIs.category, plotOMparamsBefore.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(postPIs.category, plotOMparamsAfter.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation after training")) +
scale_y_continuous(breaks = seq(-1, 1, .4)) +
scale_x_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(postPIs.category, plotOMparamsAfter.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation after training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(pretestPIs.category, plotOMparamsBefore.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(postPIs.category, plotOMparamsAfter.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation after training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
ggplot(OMPIcorr, aes(pretestPIs.category, plotOMparamsBefore.AI.OM.)) +
geom_point() +
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "adj.R2", "f", "p", "n"))) +
ggtitle(paste("Correlation before training")) +
scale_y_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
scale_x_continuous(breaks = seq(-1, 1, .4), limits = c(-1,1)) +
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+
ylab("OM Asymmetry [rel. units]")+
xlab("Torque preference [rel. units]") +
theme(aspect.ratio=aspect_ratio)
install.packages(c("askpass", "BiocManager", "broom", "bslib", "cachem", "class", "classInt", "cpp11", "curl", "dbplyr", "DescTools", "deSolve", "digest", "dplyr", "evaluate", "fontawesome", "fs", "gargle", "ggbeeswarm", "ggplot2", "googledrive", "googlesheets4", "gss", "gtable", "haven", "htmltools", "httpuv", "httr", "jsonlite", "KernSmooth", "knitr", "labeling", "labelled", "later", "lattice", "lmom", "magick", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "mvtnorm", "nlme", "nnet", "openssl", "pbapply", "processx", "promises", "ps", "purrr", "Rcpp", "RCurl", "readxl", "rematch", "remotes", "rlang", "rmarkdown", "RSQLite", "rstudioapi", "sass", "seewave", "shiny", "spatial", "styler", "survival", "sys", "timeSeries", "tinytex", "tuneR", "tzdb", "uuid", "vctrs", "viridisLite", "vroom", "xfun", "xml2", "xts", "zoo"))
knitr::opts_chunk$set(echo = TRUE)
exists(plotOMparamsBefore$group), "right")
"right" %in% plotOMparamsBefore$group
install.packages(c("DescTools", "digest", "dplyr", "htmltools", "lattice", "MASS", "Matrix", "Rcpp", "rlang", "survival", "vctrs", "xfun"))
library(ggplot2)
library(cowplot)
library(ggiraph)
library(tidyr)
library(dygraphs)
library(grid)
library(reshape2)
library(plyr)
library(dplyr)
library(gridExtra)
library(yaml)
library(ggsignif)
library(effsize)
library(pwr)
library(BayesFactor)
library(genefilter)
library(seewave)
library(lubridate)
library(rmarkdown)
library(markdown)
library(knitr)
library(dabestr)
library(zoo)
library(tidyverse)
library(questionr)
library(data.table)
library(DescTools)
library(magick)
library(reactable)
library(raincloudplots)
library(sicegar)
library(ggpmisc)
library(ggrain)
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
install.packages("ggiraph")
install.packages("ggiraph")
install.packages("ggiraph")
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
install.packages(c("askpass", "BayesFactor", "BH", "BiocManager", "bit", "blob", "broom", "bslib", "cachem", "callr", "classInt", "cli", "colorspace", "commonmark", "cpp11", "crayon", "curl", "dabestr", "data.table", "dbplyr", "DescTools", "deSolve", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "Exact", "expm", "fansi", "fastmap", "fBasics", "fontawesome", "forcats", "fs", "gargle", "ggbeeswarm", "ggforce", "gghalves", "ggiraph", "ggplot2", "ggsignif", "gld", "googledrive", "googlesheets4", "gss", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "labeling", "labelled", "later", "lattice", "lifecycle", "lmom", "lubridate", "magick", "markdown", "MatrixModels", "minpack.lm", "modelr", "mvtnorm", "openssl", "pbapply", "pillar", "plyr", "png", "polyclip", "prettyunits", "processx", "promises", "ps", "purrr", "questionr", "R.utils", "Rcpp", "RcppEigen", "RCurl", "reactable", "reactR", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rootSolve", "RSQLite", "rstudioapi", "rvest", "sass", "scales", "seewave", "shiny", "sourcetools", "stringi", "stringr", "styler", "sys", "systemfonts", "tibble", "tidyr", "tidyselect", "tidyverse", "timeDate", "timeSeries", "tinytex", "tuneR", "tweenr", "tzdb", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "withr", "xfun", "XML", "xml2", "xts", "yaml", "zoo"))
install.packages(c("askpass", "BayesFactor", "BH", "BiocManager", "bit", "blob", "broom", "bslib", "cachem", "callr", "classInt", "cli", "colorspace", "commonmark", "cpp11", "crayon", "curl", "dabestr", "data.table", "dbplyr", "DescTools", "deSolve", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "Exact", "expm", "fansi", "fastmap", "fBasics", "fontawesome", "forcats", "fs", "gargle", "ggbeeswarm", "ggforce", "gghalves", "ggiraph", "ggplot2", "ggsignif", "gld", "googledrive", "googlesheets4", "gss", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "labeling", "labelled", "later", "lattice", "lifecycle", "lmom", "lubridate", "magick", "markdown", "MatrixModels", "minpack.lm", "modelr", "mvtnorm", "openssl", "pbapply", "pillar", "plyr", "png", "polyclip", "prettyunits", "processx", "promises", "ps", "purrr", "questionr", "R.utils", "Rcpp", "RcppEigen", "RCurl", "reactable", "reactR", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rootSolve", "RSQLite", "rstudioapi", "rvest", "sass", "scales", "seewave", "shiny", "sourcetools", "stringi", "stringr", "styler", "sys", "systemfonts", "tibble", "tidyr", "tidyselect", "tidyverse", "timeDate", "timeSeries", "tinytex", "tuneR", "tweenr", "tzdb", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "withr", "xfun", "XML", "xml2", "xts", "yaml", "zoo"))
install.packages(c("cli", "colorspace", "dplyr", "fansi", "lattice", "purrr", "rlang", "tibble", "utf8", "vctrs"))
package_version("dabestr")
package_version("dplyr")
library("dabestr")
package_version("dabestr")
install.packages(c("BayesFactor", "BH", "bslib", "cli", "cluster", "cowplot", "cpp11", "curl", "dabestr", "data.table", "DBI", "dbplyr", "DescTools", "deSolve", "digest", "dplyr", "e1071", "evaluate", "expm", "fansi", "fBasics", "foreign", "ggiraph", "ggplot2", "ggpmisc", "ggpp", "glue", "gtools", "haven", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "knitr", "later", "lattice", "lifecycle", "lubridate", "magick", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minpack.lm", "mvtnorm", "nlme", "openssl", "plyr", "polyclip", "prettyunits", "processx", "progress", "R.utils", "ragg", "Rcpp", "RcppEigen", "RCurl", "reactR", "readr", "reprex", "rlang", "rmarkdown", "rootSolve", "rpart", "rprojroot", "RSQLite", "sandwich", "sass", "scales", "seewave", "shiny", "signal", "splus2R", "stringi", "stringr", "systemfonts", "textshaping", "timeDate", "timeSeries", "tinytex", "tuneR", "utf8", "uuid", "vctrs", "vipor", "vroom", "withr", "xfun", "XML", "xml2", "yaml"))
packageVersion("dabestr")
install.packages(c("cli", "coda", "commonmark", "data.table", "DescTools"))
install.packages(c("cli", "coda", "commonmark", "data.table", "DescTools"))
install.packages(c("cluster", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("cluster", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart"))
install.packages(c("lattice", "MASS", "Matrix"))
source("B:/GitHub/DTSevaluations/evaluate_datasets.R")
knitr::opts_chunk$set(echo = TRUE)
PItype <- list()
for (x in 1:NofGroups){
PItype[[x]] = data.frame(PIstat[[x]])
PItype[[x]]$desc = dataset.data$resources[[x]]$description
PItype[[x]]$name = dataset.data$resources[[x]]$name
}
if(length(unique(groupdescriptions))==2 & PIs_present) { #if two group descriptions are identical
PItypeSingleton <- na.omit(PItype[[grep(singleton[1], PItype)]])
PItypeDoubleton1 <- na.omit(PItype[[grep(doubleton[1], PItype)[1]]])
PItypeDoubleton2 <- na.omit(PItype[[grep(doubleton[1], PItype)[2]]])
PIname<-c(unique(PItypeSingleton$name), unique(PItypeDoubleton1$name), unique(PItypeDoubleton2$name))
test1 = statistical_test(PItypeSingleton$value, PItypeDoubleton1$value)
test2 = statistical_test(PItypeSingleton$value, PItypeDoubleton2$value)
results.test <- data.frame(cbind(test1, test2))
colnames(results.test) <- c(paste(PIname[1], PIname[2], sep="\n"),paste(PIname[1], PIname[3], sep="\n"))
rownames(results.test) <- c("Significance level",
"MW U-Test, W",
"U-Test p-value",
"Cohen's D",
"stat. Power",
"Bayes Factor",
"Bayes Factor error",
paste("FP risk, prior ",priorval[1]),
paste("FP risk, prior ",priorval[2]),
"Likelihood Ratio")
#plot two PIs with asterisks
plots.2test<-ggplot(PIstatCombined, aes(group, PIs)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data=PIstatCombined, aes(group, PIs, fill=category),
position=position_jitter(0.3), shape=21, size=3) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid",
colour = "black", fill=NA), legend.position = "top",
legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(size=18))+
ylab(paste("PI", learningscore, " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(unique(PItypeSingleton$name), unique(PItypeDoubleton1$name))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=5, vjust=0.1) +
geom_signif(comparisons = list(c(unique(PItypeSingleton$name), unique(PItypeDoubleton2$name))),
map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1]),
textsize=5, vjust=0.1, margin_top=0.15) +
samplesizes.annotate(boxes, samplesizes)
#add table with results and plot
plots.2utest<-tableGrob(results.test)
grid.arrange(plots.2test,plots.2utest, nrow = 1)
}
PItype_1 <- na.omit(PItype[[1]])
PItype_2 <- na.omit(PItype[[2]])
PItype_3 <- na.omit(PItype[[3]])
PIname<-c(unique(PItype_1$name), unique(PItype_2$name), unique(PItype_3$name))
test1 = statistical_test(PItype_1$value, PItype_2$value)
PItype_1 <- na.omit(PItype[[1]])
PItype_2 <- na.omit(PItype[[2]])
PItype_3 <- na.omit(PItype[[3]])
PIname<-c(unique(PItype_1$name), unique(PItype_2$name), unique(PItype_3$name))
test1 = statistical_test(PItype_1$value, PItype_2$value)
typeof(PItype[[1]])
View(PItype_1)
View(PItype)
View(PItype_1)
data.frame(PIstat[[x]])
data.frame(PIstat[[1]])
dataset.data$resources[[1]]$name
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
ggplot(dwellmeans[[x]], aes(as.factor(period), value, fill = Outcome)) +
stat_summary(geom = "bar", fun = mean, col="black", width = 0.7)+
stat_summary(geom = "errorbar", fun.data = mean_se, width = 0.3)+
geom_hline(yintercept = 0, colour = "#887000", size = 1.2)+
geom_jitter(pch=21, colour="Black", size=2.3, width = 0.25)+
ggtitle(paste(dataset.data[["resources"]][[x]][["title"]], ", N=",samplesizes[x]))+
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank()
,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA))+
theme(axis.text.y = element_text(size=18), legend.position = "none")+
ylab("mean dwelling [sec]")+
labs(fill = "Outcome") +
xlab("Experiment Sequence")+
scale_fill_manual(values=c("red1", "steelblue4"))+
scale_color_manual(values=c("firebrick4", "steelblue3"))+
theme(panel.grid.major = element_line(colour = "#808080")) +
annotate("rect", xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = 0,
alpha = .3)+
ylim(dwellrange) +
guides(fill = FALSE, size = FALSE)
grouped.dwell[[x]]$punished = -grouped.dwell[[x]]$punished #invert the punished values to make the bars go downwards
dwellmeans[[x]] = reshape2::melt(grouped.dwell[[x]])       #load each group of data into a dataframe
colnames(dwellmeans[[x]])=c("period","value","Outcome")
ggplot(dwellmeans[[x]], aes(as.factor(period), value, fill = Outcome)) +
stat_summary(geom = "bar", fun = mean, col="black", width = 0.7)+
stat_summary(geom = "errorbar", fun.data = mean_se, width = 0.3)+
geom_hline(yintercept = 0, colour = "#887000", size = 1.2)+
geom_jitter(pch=21, colour="Black", size=2.3, width = 0.25)+
ggtitle(paste(dataset.data[["resources"]][[x]][["title"]], ", N=",samplesizes[x]))+
theme_light(base_size = 16) +
theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank()
,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA))+
theme(axis.text.y = element_text(size=18), legend.position = "none")+
ylab("mean dwelling [sec]")+
labs(fill = "Outcome") +
xlab("Experiment Sequence")+
scale_fill_manual(values=c("red1", "steelblue4"))+
scale_color_manual(values=c("firebrick4", "steelblue3"))+
theme(panel.grid.major = element_line(colour = "#808080")) +
annotate("rect", xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = 0,
alpha = .3)+
ylim(dwellrange) +
guides(fill = FALSE, size = FALSE)
grouped.dwell[[3]]$punished
grouped.dwell[[2]]$punished
grouped.dwell[[1]]$punished
grouped.dwell[[1]]$unpunished
grouped.dwell[[2]]$unpunished
grouped.dwell[[3]]$unpunished
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
grouped.dwell[[x]]$punished = -grouped.dwell[[x]]$punished
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
rmarkdown::render(paste(start.wd,"/rmarkdown/dataset.Rmd", sep=""),                                #####
output_file = paste(dataset.data$experiment$name,"html", sep = "."),             #####
output_dir = dataset.path)                                                       #####
source("B:/GitHub/DTSevaluations/evaluate_datasets.R")
