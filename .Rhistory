library(zoo)
library(tidyverse)
library(questionr)
library(data.table)
library(DescTools)
library(magick)
install.packages(c("ggplot2","tidyr","dygraphs","grid","reshape","plyr","dplyr","gridExtra","yaml","ggsignif","effsize","pwr","BayesFactor","genefilter","bioconductor","seewave","lubridate","rmarkdown","markdown","knitr","dabestr","zoo","tidyverse","questionr","data.table","DescTools","magick"),dependencies = TRUE)
install.packages(c("ggplot2", "tidyr", "dygraphs", "grid", "reshape", "plyr", "dplyr", "gridExtra", "yaml", "ggsignif", "effsize", "pwr", "BayesFactor", "genefilter", "bioconductor", "seewave", "lubridate", "rmarkdown", "markdown", "knitr", "dabestr", "zoo", "tidyverse", "questionr", "data.table", "DescTools", "magick"), dependencies = TRUE)
update.packages(ask=FALSE, checkBuilt=TRUE)
library(ggplot2)
library(tidyr)
library(dygraphs)
library(grid)
library(reshape2)
library(plyr)
library(dplyr)
library(gridExtra)
library(yaml)
library(ggsignif)
library(effsize)
library(pwr)
library(BayesFactor)
library(genefilter)
library(seewave)
library(lubridate)
library(rmarkdown)
library(markdown)
library(knitr)
library(dabestr)
library(zoo)
library(tidyverse)
library(questionr)
library(data.table)
library(DescTools)
library(magick)
project.file <- file.choose()
library(yaml)
x=1
groupids <- unlist(sapply(project.data[["resources"]], function(x) x["id"]))                   #get a vector with all group FlyBase IDs
project.data <- yaml.load_file(project.file)
View(project.data)
project.data[["resources"]][[1]][["id"]]
groupids <- unlist(sapply(project.data[["resources"]], function(x) x["id"]))                   #get a vector with all group FlyBase IDs
x=2
groupids <- unlist(sapply(project.data[["resources"]], function(x) x["id"]))                   #get a vector with all group FlyBase IDs
groupids
knitr::opts_chunk$set(echo = TRUE)
paste('<a href="http://flybase.org/reports/',groupids,'">',groupids,'</a>', sep = '')
read.csv(text = groupids)
test=read.csv(text = groupids)
View(test)
test=read.csv(text = groupids[1])
View(test)
read.csv(text = groupids[1])
as.charactor(read.csv(text = groupids[1]))
as.character(read.csv(text = groupids[1]))
as.vector(read.csv(text = groupids[1]))
colnames(read.csv(text = groupids[1]))
colnames(read.csv(text = groupids[2]))
FBids=groupids
for (i in length(FBids)) {
groupid[i]=colnames(read.csv(text = groupids[i]))
}
lapply(colnames(read.csv(text = groupids)))
sapply(colnames(read.csv(text = groupids)))
apply(colnames(read.csv(text = groupids)))
sapply(groupids, colnames(read.csv(text = groupids)))
groupid<-vector
for (i in length(FBids)) {
groupid[i]=colnames(read.csv(text = groupids[i]))
}
groupid<-vector(mode="character", length=length(FBids))
for (i in length(FBids)) {
groupid[i]=colnames(read.csv(text = groupids[i]))
}
groupid
i=1
colnames(read.csv(text = groupids[i]))
groupid[i]=colnames(read.csv(text = groupids[i]))
idlist<-list()
for (i in length(FBids)) {
idlist[[i]]=colnames(read.csv(text = groupids[i]))
}
i=1
idlist[[i]]=colnames(read.csv(text = groupids[i]))
idlist<-list()
for (i in length(FBids)) {
idlist[[i]]=colnames(read.csv(text = groupids[i]))
}
length(FBids)
i=1
idlist[[i]]=colnames(read.csv(text = groupids[i]))
i=2
idlist[[i]]=colnames(read.csv(text = groupids[i]))
idlist<-list()
i=1
idlist[[i]]=colnames(read.csv(text = groupids[i]))
i=2
idlist[[i]]=colnames(read.csv(text = groupids[i]))
idlist<-list()
for (i in length(FBids)) {
idlist[[i]]=colnames(read.csv(text = groupids[i]))
}
idlist<-list()
for (i in length(FBids)) {
idlist[[i]]=colnames(read.csv(text = groupids[i]))
}
idlist<-list()
for (i in length(FBids)) {
idlist[[i]]=colnames(read.csv(text = groupids[i]))
}
idlist<-list()
for (i in length(FBids)) {
idlist[[i]]=colnames(read.csv(text = groupids[i]))
}
idlist<-list()
for (id in length(FBids)) {
idlist[[id]]=colnames(read.csv(text = groupids[id]))
}
id=1
idlist[[id]]=colnames(read.csv(text = groupids[id]))
for (id in length(FBids)) {
idlist[[id]]=colnames(read.csv(text = groupids[id]))
}
idlist<-list(length=length(FBids))
for (id in length(FBids)) {
idlist[[id]]=colnames(read.csv(text = groupids[id]))
}
View(idlist)
idlist<-list()
for (id in 2)) {
idlist[[id]]=colnames(read.csv(text = groupids[id]))
}
idlist<-list()
for (id in 2) {
idlist[[id]]=colnames(read.csv(text = groupids[id]))
}
idlist<-list()
for (id in 2) {
idlist[[id]]=colnames(read.csv(text = groupids[id]))
}
idlist<-list()
for (id in length(FBids)) {
idlist[id]=colnames(read.csv(text = groupids[id]))
}
for (id in length(FBids)) {
idlist[id]=colnames(read.csv(text = groupids[id]))
}
for (id in length(FBids)) {
idlist[id]=colnames(read.csv(text = groupids[id]))
}
for (id in length(FBids)) {
idlist[[id]]=colnames(read.csv(text = groupids[id]))
}
read.csv(text = groupids[id], header = FALSE)
read.csv(text = groupids, header = FALSE)
id.frame=read.csv(text = FBids, header = FALSE)
View(id.frame)
library(yaml)
project.file <- file.choose()
project.data <- yaml.load_file(project.file)
groupids <- unlist(sapply(project.data[["resources"]], function(x) x["id"]))                   #get a vector with all group FlyBase IDs
FBids=groupids
id.frame=read.csv(text = FBids, header = FALSE)
View(id.frame)
paste('<a href="http://flybase.org/reports/',id.frame[,1],'">',id.frame[,1],'</a>', sep = '')
View(id.frame)
paste('<a href="http://flybase.org/reports/',id.frame[1],'">',id.frame[1],'</a>', sep = '')
id.frame<-paste('<a href="http://flybase.org/reports/',id.frame,'">',id.frame,'</a>', sep = '')
id.frame
id.frame=read.csv(text = FBids, header = FALSE)
lapply(id.frame, function(x) paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''))
lapply(id.frame, function(x) paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''),na.rm=TRUE)
lapply(na.omit(id.frame), function(x) paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''),na.rm=TRUE)
lapply(na.omit(id.frame), function(x) paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''))
na.omit(id.frame)
test<-lapply(na.omit(id.frame), function(x) paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''))
View(test)
test[]<-lapply(na.omit(id.frame), function(x) paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''))
test<-as.data.frame(lapply(na.omit(id.frame), function(x) paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = '')))
View(test)
id.frame=na.omit(read.csv(text = FBids, header = FALSE))
View(id.frame)
test<-as.data.frame(lapply(id.frame, function(x) paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = '')))
View(test)
test<-as.data.frame(sapply(id.frame, function(x) paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = '')))
View(test)
test<-as.data.frame(sapply(id.frame, function(x) paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = '')),na.rm=TRUE)
View(test)
id.frame=read.csv(text = FBids, header = FALSE)
test<-as.data.frame(sapply(id.frame, function(x) paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = '')),na.rm=TRUE)
View(test)
rm(test)
test<-as.data.frame(sapply(id.frame, function(x) paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = '')),na.rm=TRUE)
View(test)
test<-as.data.frame(apply(id.frame, function(x) paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = '')),na.rm=TRUE)
View(id.frame)
id.frame=read.csv(text = FBids, header = FALSE)
View(id.frame)
rm(id.frame)
rm(test)
id.frame=read.csv(text = FBids, header = FALSE)
View(id.frame)
test<-as.data.frame(lapply(id.frame, function(x) paste('<a href="http://flybase.org/reports/',!is.na(x),'">',!is.na(x),'</a>', sep = '')))
View(test)
test<-as.data.frame(lapply(id.frame, function(x) paste('<a href="http://flybase.org/reports/',na.omit(x),'">',na.omit(x),'</a>', sep = '')))
View(test)
test<-as.data.frame(lapply(id.frame, function(x) if(!is.na(x)){paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = '')}))
View(test)
rm(test)
test<-as.data.frame(lapply(id.frame, function(x) if(!is.na(x)){paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = '')}))
View(test)
test<-as.data.frame(lapply(id.frame, function(x) ifelse(!is.na(x)){paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = '')}))
test<-as.data.frame(lapply(id.frame, function(x) ifelse(!is.na(x), paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''),)))
View(test)
rm(test)
test<-as.data.frame(lapply(id.frame, function(x) ifelse(!is.na(x), paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''),)))
View(test)
test<-as.data.frame(lapply(id.frame, function(x) ifelse(!is.na(x), paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''),NA)))
View(test)
id.frame[2,2]
read.csv(text = FBids, header = FALSE)
id.frame[2,2]=NA
id.frame[2,3]=NA
View(id.frame)
test<-as.data.frame(lapply(id.frame, function(x) ifelse(!is.na(x), paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''),NA)))
View(test)
id.frame=read.csv(text = FBids, header = FALSE)
View(id.frame)
id.frame=read.csv(text = FBids, header = FALSE, na.strings=c("","NA"))
View(id.frame)
test<-as.data.frame(lapply(id.frame, function(x) ifelse(!is.na(x), paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''),NA)))
View(test)
rm(test)
rm(id.frame)
id.frame<-as.data.frame(lapply(read.csv(text = FBids, header = FALSE, na.strings=c("","NA")), function(x) ifelse(!is.na(x), paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''),NA)))
View(id.frame)
View(id.frame)
shQuote(id.frame)
shQuote(id.frame[1,])
shQuote(id.frame[,1])
shQuote(id.frame[,2])
shQuote(id.frame[1,])
shQuote(na.omit(id.frame[1,]))
shQuote(na.omit(id.frame[2,]))
shQuote(na.omit(id.frame[1,]))
shQuote(na.omit(id.frame[2,]))
shQuote(na.omit(id.frame))
View(id.frame)
collapse(na.omit(id.frame))
paste(id.frame[1,])
paste(id.frame[1,], sep = ",")
paste(id.frame[1,], collapse = ",")
paste(id.frame, collapse = ",")
apply(id.frame,1,paste,collapse=",")
apply(na.omit(id.frame),1,paste,collapse=",")
FBids2=apply(id.frame,1,paste,collapse=",")
FBids2[1]
FBids2[2]
na.omit(id.frame)
id.frame[is.na(id.frame)]<-""
View(id.frame)
FBids2=apply(id.frame,1,paste,collapse=",")
FBids2
gsub(",,",'',FBids2)
tail(FBids2)
sub(",$", "", FBids2)
id.frame<-as.data.frame(lapply(read.csv(text = FBids, header = FALSE, na.strings=c("","NA")), function(x) ifelse(!is.na(x), paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''),NA)))
id.frame[is.na(id.frame)]<-"" #remove NAs
FBids=apply(id.frame,1,paste,collapse=",") #create strings
FBids=sub(",$", "", FBids2)  #remove trailing commas
FBids=gsub(",,",'',FBids)    #remove double commas
FBids=gsub(",,,",'',FBids)   #remove triple commas
FBids=gsub(",,,,",'',FBids2) #remove quadruple commas - should be enough
FBids
id.frame<-as.data.frame(lapply(read.csv(text = FBids, header = FALSE, na.strings=c("","NA")), function(x) ifelse(!is.na(x), paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''),NA)))
id.frame[is.na(id.frame)]<-"" #remove NAs
FBids=apply(id.frame,1,paste,collapse=",") #create strings
FBids=sub(",$", "", FBids)  #remove trailing commas
FBids=gsub(",,",'',FBids)    #remove double commas
FBids=gsub(",,,",'',FBids)   #remove triple commas
FBids=gsub(",,,,",'',FBids) #remove quadruple commas - should be enough
FBids
id.frame<-as.data.frame(lapply(read.csv(text = FBids, header = FALSE, na.strings=c("","NA")), function(x) ifelse(!is.na(x), paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''),NA)))
id.frame[is.na(id.frame)]<-"" #remove NAs
FBids=apply(id.frame,1,paste,collapse=",") #create strings
FBids
rm(FBids)
rm(FBids2)
FBids=groupids
id.frame<-as.data.frame(lapply(read.csv(text = FBids, header = FALSE, na.strings=c("","NA")), function(x) ifelse(!is.na(x), paste('<a href="http://flybase.org/reports/',x,'">',x,'</a>', sep = ''),NA)))
id.frame[is.na(id.frame)]<-"" #remove NAs
View(id.frame)
FBids=apply(id.frame,1,paste,collapse=",") #create strings
FBids
FBids=sub(",$", "", FBids)  #remove trailing commas
FBids
FBids=gsub(",,",'',FBids)    #remove double commas
FBids
FBids=apply(id.frame,1,paste,collapse=",") #create strings
FBids
install.packages(c("arm", "av", "backports", "bit", "bit64", "broom", "callr", "car", "chron", "coda", "covr", "cowplot", "dabestr", "data.table", "DescTools", "devtools", "diffobj", "dplyr", "DT", "effsize", "expm", "fs", "ggforce", "ggplot2", "glue", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "labelled", "Lahman", "later", "lmtest", "lubridate", "magick", "maptools", "MASS", "mgcv", "multcomp", "mvtnorm", "nanotime", "nlme", "nloptr", "openssl", "openxlsx", "pbapply", "pillar", "pkgbuild", "pkgdown", "processx", "promises", "ps", "quantreg", "questionr", "R.methodsS3", "R.oo", "R.rsp", "R.utils", "raster", "Rcpp", "RcppCCTZ", "reactable", "reactR", "readr", "remotes", "rgdal", "rgeos", "rlang", "rmarkdown", "roxygen2", "RSQLite", "rvest", "sandwich", "sf", "shiny", "showtext", "stringi", "survival", "svglite", "sys", "systemfonts", "testit", "tibble", "tidyr", "tikzDevice", "tinytex", "TTAinterfaceTrendAnalysis", "TTR", "tufte", "units", "usethis", "vctrs", "vdiffr", "vioplot", "withr", "xfun", "XML", "xts", "zip"))
install.packages(c("diffobj", "ps", "questionr", "readr", "vdiffr"))
install.packages("questionr")
install.packages(c("diffobj", "MASS", "mgcv", "nlme", "ps", "questionr", "readr", "survival", "vdiffr"))
install.packages(c("diffobj", "ps", "readr", "vdiffr"))
install.packages(c("openxlsx", "quantreg", "rlang", "tibble"))
install.packages(c("openxlsx", "quantreg", "rlang", "tibble"))
rm(list=ls())                      #clean memory
gc()                               #collect garbage
if(!is.null(dev.list())) dev.off() #clear plots
install.packages(c("openxlsx", "quantreg", "rlang", "tibble"))
rm(list=ls())                      #clean memory
gc()                               #collect garbage
if(!is.null(dev.list())) dev.off() #clear plots
install.packages("rlang")
install.packages("tibble")
install.packages(c("openxlsx", "quantreg"))
install.packages("openxlsx")
rm(list=ls())                      #clean memory
gc()                               #collect garbage
if(!is.null(dev.list())) dev.off() #clear plots
install.packages("quantreg")
install.packages(c("openxlsx", "quantreg"))
install.packages(c("openxlsx", "quantreg"))
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
for(x in 1:NofGroups)
{
cat("<center><h4>",project.data[["resources"]][[x]][["title"]],"</h4></center>")
par(mfrow=c(ceiling((NofPeriods+1)/3),3)) # sets the dimension of the multiplot, row x column
old.par = par(mar = c(3, 4, 1, 2))
grouphistdata[[x]]$period =as.factor(grouphistdata[[x]]$period)
for (i in 1:NofPeriods){
df = subset(grouphistdata[[x]], grouphistdata[[x]]$period == i)
hist(x = df$fly, breaks = 600,xlim = c(-600,600), xlab="", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i)) #plot histogram
if(any(c("yt","sw") %in% sequence$type[i])) {
rect(-2000, 0, 0, 50000, col=("lightgrey")) #shade negative torque range as heated
hist(x = df$fly, breaks = 100,xlim = maxfly, xlab="", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i), add=TRUE) #plot histogram again
}
abline(v = 0, col="black", lwd=2, lty=2)
}
hist(grouphistdata[[x]]$fly, breaks = 100,xlim = c(-600,600), xlab=paste(FlyBehavior, "[arb units]"), main=paste("Pooled Behavior Histogram", groupnames[[x]]))
}
for(x in 1:NofGroups)
{
cat("<center><h4>",project.data[["resources"]][[x]][["title"]],"</h4></center>")
par(mfrow=c(ceiling((NofPeriods+1)/3),3)) # sets the dimension of the multiplot, row x column
old.par = par(mar = c(3, 4, 1, 2))
grouphistdata[[x]]$period =as.factor(grouphistdata[[x]]$period)
for (i in 1:NofPeriods){
df = subset(grouphistdata[[x]], grouphistdata[[x]]$period == i)
hist(x = df$fly, breaks = 2000,xlim = c(-600,600), xlab="", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i)) #plot histogram
if(any(c("yt","sw") %in% sequence$type[i])) {
rect(-2000, 0, 0, 50000, col=("lightgrey")) #shade negative torque range as heated
hist(x = df$fly, breaks = 100,xlim = maxfly, xlab="", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i), add=TRUE) #plot histogram again
}
abline(v = 0, col="black", lwd=2, lty=2)
}
hist(grouphistdata[[x]]$fly, breaks = 2000,xlim = c(-600,600), xlab=paste(FlyBehavior, "[arb units]"), main=paste("Pooled Behavior Histogram", groupnames[[x]]))
}
for(x in 1:NofGroups)
{
cat("<center><h4>",project.data[["resources"]][[x]][["title"]],"</h4></center>")
par(mfrow=c(ceiling((NofPeriods+1)/3),3)) # sets the dimension of the multiplot, row x column
old.par = par(mar = c(3, 4, 1, 2))
grouphistdata[[x]]$period =as.factor(grouphistdata[[x]]$period)
for (i in 1:NofPeriods){
df = subset(grouphistdata[[x]], grouphistdata[[x]]$period == i)
hist(x = df$fly, breaks = 2000,xlim = c(-600,600), xlab="", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i)) #plot histogram
if(any(c("yt","sw") %in% sequence$type[i])) {
rect(-2000, 0, 0, 50000, col=("lightgrey")) #shade negative torque range as heated
hist(x = df$fly, breaks = 2000,xlim = maxfly, xlab="", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i), add=TRUE) #plot histogram again
}
abline(v = 0, col="black", lwd=2, lty=2)
}
hist(grouphistdata[[x]]$fly, breaks = 600,xlim = c(-600,600), xlab=paste(FlyBehavior, "[arb units]"), main=paste("Pooled Behavior Histogram", groupnames[[x]]))
}
for(x in 1:NofGroups)
{
cat("<center><h4>",project.data[["resources"]][[x]][["title"]],"</h4></center>")
par(mfrow=c(ceiling((NofPeriods+1)/3),3)) # sets the dimension of the multiplot, row x column
old.par = par(mar = c(3, 4, 1, 2))
grouphistdata[[x]]$period =as.factor(grouphistdata[[x]]$period)
for (i in 1:NofPeriods){
df = subset(grouphistdata[[x]], grouphistdata[[x]]$period == i)
hist(x = df$fly, breaks = 4000,xlim = c(-600,600), xlab="", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i)) #plot histogram
if(any(c("yt","sw") %in% sequence$type[i])) {
rect(-2000, 0, 0, 50000, col=("lightgrey")) #shade negative torque range as heated
hist(x = df$fly, breaks = 4000,xlim = maxfly, xlab="", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i), add=TRUE) #plot histogram again
}
abline(v = 0, col="black", lwd=2, lty=2)
}
hist(grouphistdata[[x]]$fly, breaks = 300,xlim = c(-600,600), xlab=paste(FlyBehavior, "[arb units]"), main=paste("Pooled Behavior Histogram", groupnames[[x]]))
}
hist(x = df$a_pos, breaks = 180,xlim = c(-1800,1800), xlab="", ylab = "", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i), xaxt='n', yaxs="i") #plots histogram
#a
hist(x = df$a_pos, breaks = 1800,xlim = c(-1800,1800), xlab="", ylab = "", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i), add = TRUE) #plots histogram again
hist(x = df$a_pos, breaks = 180,xlim = c(-1800,1800), xlab="", ylab = "", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i))
for(x in 1:NofGroups)
{
cat("<center><h4>",project.data[["resources"]][[x]][["title"]],"</h4></center>")
par(mfrow=c(round(NofPeriods/2),2)) # sets the dimension of the multiplot, row x column
old.par = par(mar = c(4, 4, 1, 2))
grouphistdata[[x]]$period =as.factor(grouphistdata[[x]]$period)
for (i in 1:NofPeriods){
df = subset(grouphistdata[[x]], grouphistdata[[x]]$period == i)
hist(x = df$a_pos, breaks = 180,xlim = c(-1800,1800), xlab="", ylab = "", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i), xaxt='n', yaxs="i") #plots histogram
#add quadrant shading
rect(-1800, 0, -1350, 8000, col=("lightgrey"))
rect(-450, 0, 450, 8000, col=("lightgrey"))
rect(1350, 0, 1800, 8000, col=("lightgrey"))
hist(x = df$a_pos, breaks = 180,xlim = c(-1800,1800), xlab="", ylab = "", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i), add = TRUE) #plots histogram again
abline(v = 0, col="black", lwd=1, lty="dotted") # adds a line at 0
abline(v = 900, col="black", lwd=1, lty="dotted") # adds a line at 90°
abline(v = -900, col="black", lwd=1, lty="dotted") # adds a line at -90°
axis(side=1, at=c(-1800, -900, 0, 900, 1800))
mtext(text = paste("Arena Position [degrees*10]"),
cex = 1,
side = 1,#side 1 = bottom
line = 2.5)
mtext(text = "Frequency",
cex = 1,
side = 2, #side 2 = left
line = 2)
}
#add pooled histogram
hist(grouphistdata[[x]]$a_pos, breaks = 360, border = "grey40", col = "grey40", xlab="", ylab="", main=paste("Pooled Position Histogram", groupnames[[x]]), xaxt='n', yaxs="i")
axis(side=1, at=c(-1800, -900, 0, 900, 1800))
#add quadrant borders
abline(v = -1350, col="black", lwd=1, lty="dotted") # adds a line at -135°
abline(v = -450, col="black", lwd=1, lty="dotted") # adds a line at -45°
abline(v = 450, col="black", lwd=1, lty="dotted") # adds a line at 45°
abline(v = 1350, col="black", lwd=1, lty="dotted") # adds a line at 135°
mtext(text = paste("Arena Position [degrees*10]"),
cex = 1,
side = 1,#side 1 = bottom
line = 2.5)
mtext(text = "Frequency",
cex = 1,
side = 2, #side 2 = left
line = 2)
}
df = subset(grouphistdata[[x]], grouphistdata[[x]]$period == i)
hist(x = df$a_pos, breaks = 180,xlim = c(-1800,1800), xlab="", ylab = "", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i), xaxt='n', yaxs="i") #plots histogram
#add quadrant shading
rect(-1800, 0, -1350, 8000, col=("lightgrey"))
rect(-450, 0, 450, 8000, col=("lightgrey"))
rect(1350, 0, 1800, 8000, col=("lightgrey"))
hist(x = df$a_pos, breaks = 180,xlim = c(-1800,1800), xlab="", ylab = "", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i), add = TRUE) #plots histogram again
abline(v = 0, col="black", lwd=1, lty="dotted") # adds a line at 0
abline(v = 900, col="black", lwd=1, lty="dotted") # adds a line at 90°
abline(v = -900, col="black", lwd=1, lty="dotted") # adds a line at -90°
axis(side=1, at=c(-1800, -900, 0, 900, 1800))
mtext(text = paste("Arena Position [degrees*10]"),
cex = 1,
side = 1,#side 1 = bottom
line = 2.5)
mtext(text = "Frequency",
cex = 1,
side = 2, #side 2 = left
line = 2)
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
hist(x = df$fly, breaks = 100,xlim = maxfly, xlab="", ylab = "", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i)) #plots the data as a histogram
subset = rawdata[c("fly","period","a_pos")]
subset$period = as.factor(subset$period)
par(mfrow=c(round(NofPeriods/5)*2, 3)) # sets the dimension of the multiplot, row x column
old.par = par(mar = c(4, 4, 1, 0)) # sets the margins for the plots (bottom, left, top and right margins respectively)
for (i in 1:NofPeriods){
df = subset(subset, subset$period == i) # subset the data for only one period
hist(x = df$fly, breaks = 100,xlim = maxfly, xlab="", ylab = "", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i)) #plots the data as a histogram
#add shading in case of torque/switch learning
if(sequence$contingency[i]=="left_torque"){          #shade left torque area
rect(-2000, 0, 0, 500, col=("lightgrey"))
hist(x = df$fly, breaks = 100,xlim = maxfly, xlab="", ylab = "", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i), add = TRUE) #plot new hist
} else if(sequence$contingency[i]=="right_torque"){  #shade right torque area
rect(0, 0, 2000, 500, col=("lightgrey"))
hist(x = df$fly, breaks = 100,xlim = maxfly, xlab="", ylab = "", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i), add = TRUE) #plot new hist
}
abline(v = 0, col="black", lwd=2, lty=2) # adds a line at 0
mtext(text = paste(FlyBehavior, "[arb units]"),
cex = 1,
side = 1,#side 1 = bottom
line = 2.5)
mtext(text = "Frequency",
cex = 1,
side = 2, #side 2 = left
line = 2)
}
hist(subset$fly, breaks = 100, border = "grey40", col = "grey40", main=paste(flyname, "Total"), xlab="", ylab = "") #histogram of pooled data
mtext(text = paste(FlyBehavior, "[arb units]"),
cex = 1,
side = 1,#side 1 = bottom
line = 2.5)
mtext(text = "Frequency",
cex = 1,
side = 2, #side 2 = left
line = 2)
hist(x = df$fly, breaks = 100, xlab="", ylab = "", border= sequence$histocolor[i],  col = sequence$histocolor[i], main=paste("Period ", i)) #plots the data as a histogram
abs(flyrange)
max(abs(flyrange))
-round_any(max(abs(flyrange)), 100, f=ceiling)
-round_any(max(abs(flyrange)), 100, f=ceiling)*0.7
c(-round_any(max(abs(flyrange)), 100, f=ceiling)*0.7,round_any(max(abs(flyrange)), 100, f=ceiling)*0.7)
NofPeriods/2
round(NofPeriods/2)
c(round(NofPeriods/2),2)
c(round(NofPeriods+1/2),2))
c(round(NofPeriods+1/2),2)
c(round((NofPeriods+1)/2),2)
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
