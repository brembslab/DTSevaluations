##reset position data to +/-180째 [-1800..1796] for torquemeter experiments
if (project.data$experiment$type=="Torquemeter"){
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
}
##change j_pos data from float to integer and shift to make approx. zero symmetric (needs work!)
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)+1100
}
##change a_pos data from float to integer in Joystick experiments
if(experiment$meter_type=="Joystick"){
rawdata$a_pos = round(rawdata$a_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
##calculate actual sampling rate and downsample if necessary
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
rawdata$group_num <- 50*round(rawdata$time/50) # Create 50ms bins
rawdata$weight <- 1/(1+abs(rawdata$time-rawdata$group_num)) # calculate distance from measurement point
rawdata$norm <-ave(rawdata$weight,rawdata$group_num,FUN=function(x) x/sum(x)) #apply weights according to distance from bin center
rawdata$fly2 <- rawdata$fly*rawdata$norm
rawdata$a_pos2 <- rawdata$a_pos*rawdata$norm #needs more work because of values at +/-180째!!!
rawdata$period2 <- rawdata$period*rawdata$norm
# create the vectors in which to save the downsampled data
timeDownsampled <- as.vector(unique(rawdata$group_num))
a_posDownsampled <- as.vector(round(tapply(rawdata$a_pos2, rawdata$group_num, sum)))
flyDownsampled <- as.vector(round(tapply(rawdata$fly2, rawdata$group_num, sum)))
periodDownsampled <- as.vector(round(tapply(rawdata$period2, rawdata$group_num, sum)))
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
### check the dataframe for consistency
if (length(table(rawdataDown$period)) > NofPeriods) {rawdataDown<-rawdataDown[!(rawdataDown$period==length(table(rawdataDown$period))),]} #remove any extra period numbers, if they exist
# check if there are periods which deviate from projected duration
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
if(any(abs(as.numeric(difference$deviation))>1)) stop("Number of data points does not match expectations. Check DTS Rawdata!") #check if there is more than one missing/additional data point
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
#mark the last data pont of each offending period (assuming we're only one data point off!)
if (length(diff_periods)!=0){
rawdataDown$last = NA
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, diff_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 1, x))) # "1" marking the last data p체oint in an offending period
#mark the last data points of periods with missing data points
if (length(rownames(difference)[difference$deviation==-1])!=0){ #if there are periods with too few data points, duplicate the last
negative_periods=rownames(difference)[difference$deviation==-1] #find the periods with missing values
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, negative_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 2, x))) # "2" marking the last data p체oint in an offending period
copy = as.vector(rawdataDown[is.element(rawdataDown$last, 2),])
copy$last=NA
for (z in 1:length(negative_periods)) {
temp.pos=as.numeric(rownames(copy[z,])) #find the right position to insert
next.pos=temp.pos+1                     #for some reason, R also wants to have the next position as a variable
rawdataDown <- rbind(rawdataDown[1:temp.pos,], copy[z,], rawdataDown[next.pos:nrow(rawdataDown),]) # duplicate the last data point in the offending periods
}
}
rawdataDown <- rawdataDown[!(grepl(1, rawdataDown$last)),] # delete last data point of the offending periods
rawdataDown$last <- NULL #delete the unnecessary 'last' column
rawdataDown$time = seq(0, (as.numeric(as.character(experiment$duration))*1000)-50, by=50) # fix the mangled time column
row.names(rawdataDown) <- 1:nrow(rawdataDown) #fix rownames, too
}
View(rawdataDown)
View(rawdata)
View(rawdataDown)
rawdata=rawdataDown
rightOMperiods=which(grepl("optomotorR", sequence$type)) #collect the right turning OM periods
rightOMdata<-filter(rawdata, rawdata$period %in% rightOMperiods) #extract only right turning arena periods
rightOMdata <- rightOMdata %>% select(-c(a_pos)) #drop unnecessary columns
leftOMdata$time=ave(leftOMdata$period, leftOMdata$period, FUN=seq_along) #match the time values to start at each period start
leftOMdata$time=((leftOMdata$time)*50)+max(rightOMdata$time) #make 20Hz data into ms time scale, starting after right turning data
leftOMdata$period=as.factor(leftOMdata$period)
ggplot(data = leftOMdata, aes(x=time, y=fly)) +
geom_line(aes(group=period, colour=period), size=1) +
geom_smooth(method="loess", span = 0.1) +
ylab("Optomotor Resoponse [rel. units]")+
xlab("Time [ms]") +
ggtitle(paste("Left (counter-clockwise) arena rotations -", flyname))
rightOMdata$time=ave(rightOMdata$period, rightOMdata$period, FUN=seq_along) #match the time values to start at each period start
rightOMdata$time=(rightOMdata$time-1)*50 #make 20Hz data into ms time scale
rightOMdata$period=as.factor(rightOMdata$period)
ggplot(data = rightOMdata, aes(x=time, y=fly)) +
geom_line(aes(group=period, colour=period), size=1) +
geom_smooth(method="loess", span = 0.1) +
ylab("Optomotor Resoponse [rel. units]")+
xlab("Time [ms]") +
ggtitle(paste("Right (clockwise) arena rotations -", flyname))
leftOMperiods=which(grepl("optomotorL", sequence$type)) #collect the left turning OM periods
leftOMdata<-filter(rawdata, rawdata$period %in% leftOMperiods)  #extract only left turning arena periods
leftOMdata <- leftOMdata %>% select(-c(a_pos))  #drop unnecessary columns
leftOMdata$time=ave(leftOMdata$period, leftOMdata$period, FUN=seq_along) #match the time values to start at each period start
leftOMdata$time=((leftOMdata$time)*50)+max(rightOMdata$time) #make 20Hz data into ms time scale, starting after right turning data
leftOMdata$period=as.factor(leftOMdata$period)
ggplot(data = leftOMdata, aes(x=time, y=fly)) +
geom_line(aes(group=period, colour=period), size=1) +
geom_smooth(method="loess", span = 0.1) +
ylab("Optomotor Resoponse [rel. units]")+
xlab("Time [ms]") +
ggtitle(paste("Left (counter-clockwise) arena rotations -", flyname))
tempOMdata=rbind(rightOMdata,leftOMdata) #combine left and right OMdata in one dataframe
tempOMdata=aggregate(tempOMdata$fly,FUN=mean,by=list(tempOMdata$time)) #average across periods
colnames(tempOMdata) <- c("time", as.character(flyname)) #set dataframe names
ggplot(data=OMdata, aes(x=OMdata$time, y=OMdata[[as.character(flyname)]])) +
geom_line() +
ylab("Optomotor Resoponse [rel. units]")+
xlab("Time [ms]")
OMdata=tempOMdata
ggplot(data=OMdata, aes(x=OMdata$time, y=OMdata[[as.character(flyname)]])) +
geom_line() +
ylab("Optomotor Resoponse [rel. units]")+
xlab("Time [ms]")
OMmidpoint = OMdata$time[nrow(OMdata)]/2
#right turning traces
x1=OMdata$time[OMdata$time<=OMmidpoint]                     #time
y=OMdata[[as.character(flyname)]][OMdata$time<=OMmidpoint]  #mean right OM response normalized to positive values
xy <-sortedXyData(x1,y)                                     #create sortedXYdata object
LinMod = lm(x1 ~ y, data = xy)
summary(LinMod)
LinMod = lm(y ~ x1, data = xy)
summary(LinMod)
plot(xy)
abline(LinMod)
LinMod$coefficients[2]
load("B:/GitHub/DTSevaluations/example data/t-learn/evaluations/.RData")
LinMod = lm(y ~ x1, data = xy)
LinMod$coefficients[2]
x1=OMdata$time[OMdata$time<=OMmidpoint]                     #time
y=OMdata[[as.character(flyname)]][OMdata$time<=OMmidpoint]  #mean right OM response normalized to positive values
xy <-sortedXyData(x1,y)                                     #create sortedXYdata object
LinMod = lm(y ~ x1, data = xy)
LinMod$coefficients[2]
load("B:/GitHub/DTSevaluations/example data/t-learn/evaluations/.RData")
OMmidpoint = OMdata$time[nrow(OMdata)]/2
OMdata=tempOMdata
OMmidpoint = OMdata$time[nrow(OMdata)]/2
#right turning traces
x1=OMdata$time[OMdata$time<=OMmidpoint]                     #time
y=OMdata[[as.character(flyname)]][OMdata$time<=OMmidpoint]  #mean right OM response normalized to positive values
xy <-sortedXyData(x1,y)                                     #create sortedXYdata object
LinMod = lm(y ~ x1, data = xy)
LinMod$coefficients[2]
mean(x1)
plot(xy)
mean(xy$x)
as.numeric(mean(xy$x))
mean(y)
View(plotOMparams)
View(plotOMparams)
load("B:/GitHub/DTSevaluations/example data/OM_joystick/evaluations/.RData")
View(tempOMparams)
View(tempOMparams)
load("B:/GitHub/DTSevaluations/example data/t-learn/evaluations/.RData")
View(plotOMparams)
View(plotOMparams)
load("B:/GitHub/DTSevaluations/.RData")
View(plotOMparams)
View(plotOMparams)
PIprofile <- rbind2(PIprofile, as.vector(t(sequence$lambda)))
citation()
citation("zoo")
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
print(ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(plotOM$time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_ribbon(aes(ymin=means-sd, ymax=means+sd, fill = group), alpha=0.5) +
geom_hline(yintercept = 0, color="black") +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Deviations") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", -Inf, Inf, label = "Right (clockwise) arena rotations", hjust = -0.1, vjust = 1.3)+
annotate("text", Inf, -Inf, label = "Left (counter-clockwise) arena rotations", hjust =1.1, vjust = -1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)))
print(ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(plotOM$time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_ribbon(aes(ymin=means-sd, ymax=means+sd, fill = group), alpha=0.5) +
geom_hline(yintercept = 0, color="black") +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Deviations") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", -Inf, Inf, label = "Right (clockwise) arena rotations", hjust = -0.1, vjust = 1.3)+
annotate("text", Inf, -Inf, label = "Left (counter-clockwise) arena rotations", hjust =1.1, vjust = 1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)))
print(ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(plotOM$time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_ribbon(aes(ymin=means-sd, ymax=means+sd, fill = group), alpha=0.5) +
geom_hline(yintercept = 0, color="black") +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Deviations") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", -Inf, Inf, label = "Right (clockwise) arena rotations", hjust = -0.1, vjust = 1.3)+
annotate("text", Inf, -Inf, label = "Left (counter-clockwise) arena rotations", hjust =1.5, vjust = -1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)))
print(ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(plotOM$time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_ribbon(aes(ymin=means-sd, ymax=means+sd, fill = group), alpha=0.5) +
geom_hline(yintercept = 0, color="black") +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Deviations") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", -Inf, Inf, label = "Right (clockwise) arena rotations", hjust = -0.1, vjust = 1.3)+
annotate("text", Inf, -Inf, label = "Left (counter-clockwise) arena rotations", hjust =0.5, vjust = -1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)))
print(ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(plotOM$time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_ribbon(aes(ymin=means-sd, ymax=means+sd, fill = group), alpha=0.5) +
geom_hline(yintercept = 0, color="black") +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Deviations") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", -Inf, Inf, label = "Right (clockwise) arena rotations", hjust = -0.1, vjust = 1.3)+
annotate("text", Inf, -Inf, label = "Left (counter-clockwise) arena rotations", hjust =0.8, vjust = -1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)))
print(ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(plotOM$time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_ribbon(aes(ymin=means-sd, ymax=means+sd, fill = group), alpha=0.5) +
geom_hline(yintercept = 0, color="black") +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Deviations") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", -Inf, Inf, label = "Right (clockwise) arena rotations", hjust = -0.1, vjust = 1.3)+
annotate("text", Inf, -Inf, label = "Left (counter-clockwise) arena rotations", hjust =0.9, vjust = -1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)))
print(ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(plotOM$time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_ribbon(aes(ymin=means-sd, ymax=means+sd, fill = group), alpha=0.5) +
geom_hline(yintercept = 0, color="black") +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Deviations") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", -Inf, Inf, label = "Right (clockwise) arena rotations", hjust = -0.1, vjust = 1.3)+
annotate("text", Inf, -Inf, label = "Left (counter-clockwise) arena rotations", hjust =1.1, vjust = -1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)))
print(ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(plotOM$time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_ribbon(aes(ymin=means-sd, ymax=means+sd, fill = group), alpha=0.5) +
geom_hline(yintercept = 0, color="black") +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Deviations") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", -Inf, Inf, label = "Right (clockwise) arena rotations", hjust = -0.1, vjust = 1.3)+
annotate("text", Inf, -Inf, label = "Left (counter-clockwise) arena rotations", hjust =1, vjust = -1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)))
print(ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(plotOM$time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_ribbon(aes(ymin=means-sd, ymax=means+sd, fill = group), alpha=0.5) +
geom_hline(yintercept = 0, color="black") +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Deviations") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", -Inf, Inf, label = "Right (clockwise) arena rotations", hjust = 0.1, vjust = 1.3)+
annotate("text", Inf, -Inf, label = "Left (counter-clockwise) arena rotations", hjust =1, vjust = -1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)))
print(ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(plotOM$time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_ribbon(aes(ymin=means-sd, ymax=means+sd, fill = group), alpha=0.5) +
geom_hline(yintercept = 0, color="black") +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Deviations") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", -Inf, Inf, label = "Right (clockwise) arena rotations", hjust = 0, vjust = 1.3)+
annotate("text", Inf, -Inf, label = "Left (counter-clockwise) arena rotations", hjust =1, vjust = -1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)))
print(ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(plotOM$time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_ribbon(aes(ymin=means-sd, ymax=means+sd, fill = group), alpha=0.5) +
geom_hline(yintercept = 0, color="black") +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Deviations") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", -Inf, Inf, label = "Right (clockwise) arena rotations", hjust = -0.05, vjust = 1.3)+
annotate("text", Inf, -Inf, label = "Left (counter-clockwise) arena rotations", hjust =1, vjust = -1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)))
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
print(ggplot(plotOM, aes(x=time/1000, y=means, group = group)) +
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
geom_rect(aes(xmin = mean(plotOM$time/1000),xmax = Inf ,ymin = -Inf, ymax = Inf),fill=("grey"), alpha = 0.01)+
geom_ribbon(aes(ymin=means-sd, ymax=means+sd, fill = group), alpha=0.5) +
geom_hline(yintercept = 0, color="black") +
scale_fill_manual(values = boxcolors) +
geom_line(aes(colour = group), size = 1) +
scale_color_manual(values = boxcolors) +
ggtitle("Mean Optomotor Traces and Standard Deviations") +
guides(colour = guide_legend(override.aes = list(size=3))) +
theme_light(base_size = 16) +
theme(legend.justification=c(1,0),
legend.position="right",
legend.title=element_blank(),
legend.key.size = unit(2, 'lines'),
legend.key = element_rect(size = 6),
legend.box.background = element_rect(fill="white"),
legend.box.margin = margin(4, 4, 4, 4),
legend.text=element_text(size=14),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=12))+
ylab("Optomotor Response [rel. units]") +
xlab("Time [s]")+
annotate("text", -Inf, Inf, label = "Right (clockwise) arena rotations", hjust = -0.05, vjust = 1.3)+
annotate("text", Inf, -Inf, label = "Left (counter-clockwise) arena rotations", hjust =1, vjust = -1.5)+
theme(panel.grid.major.x = element_blank(),panel.grid.major.y = element_line( size=.1, color="grey"))+
scale_x_continuous(expand = expand_scale(add = 0)))
