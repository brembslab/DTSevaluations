URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##reset position data to +/-180° [-1800..1796] for torquemeter experiments
if (project.data$experiment$type=="Torquemeter"){
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
}
##change j_pos data from float to integer and shift to make approx. zero symmetric (needs work!)
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)+1100
}
##change a_pos data from float to integer in Joystick experiments
if(experiment$meter_type=="Joystick"){
rawdata$a_pos = round(rawdata$a_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
require("XML")
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
##parse the metadata
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##reset position data to +/-180° [-1800..1796] for torquemeter experiments
if (project.data$experiment$type=="Torquemeter"){
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
}
##change j_pos data from float to integer and shift to make approx. zero symmetric (needs work!)
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)+1100
}
##change a_pos data from float to integer in Joystick experiments
if(experiment$meter_type=="Joystick"){
rawdata$a_pos = round(rawdata$a_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
View(rawdata)
rawdata$group_num <- 50*round(rawdata$time/50) # Create 50ms bins
xml_name
xml_name="B:/GitHub/DTSevaluations/example data/switch/values1.xml"
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
##parse the metadata
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##reset position data to +/-180° [-1800..1796] for torquemeter experiments
if (project.data$experiment$type=="Torquemeter"){
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
}
##change j_pos data from float to integer and shift to make approx. zero symmetric (needs work!)
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)+1100
}
##change a_pos data from float to integer in Joystick experiments
if(experiment$meter_type=="Joystick"){
rawdata$a_pos = round(rawdata$a_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
##calculate actual sampling rate and downsample if necessary
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
View(rawdata)
rawdata$group_num <- 50*round(rawdata$time/50) # Create 50ms bins
binsize=3
seq(1,length(rawdata$time),binsize))
seq(1,length(rawdata$time),binsize)
experiment$duration
experiment$duration*1000
as.numeric(experiment$duration)*1000
1000*as.numeric(as.character(experiment$duration))
as.numeric(as.character(experiment$duration))*20
length(rawdata)
length(rawdata$time)
seq(0, as.numeric(as.character(experiment$duration)), 50)
seq(0, as.numeric(as.character(experiment$duration))*1000, 50)
length(periodDownsampled)
View(periods)
View(sequence)
binsize=1
periodDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$period)/binsize))
p=1
t=0
for (index in 1:length(periodDownsampled)){
periodDownsampled[index]=p
if (index > t+sequence$duration[p])
{
t=t+sequence$duration[p]
p=p+1
}
}
p=1
t=0
for (index in 1:length(periodDownsampled)){
periodDownsampled[index]=p
if (index > t+as.numeric(as.character(sequence$duration[p])))
{
t=t+as.numeric(as.character(sequence$duration[p]))
p=p+1
}
}
periodDownsampled
p=1
t=0
for (index in 1:length(periodDownsampled)){
periodDownsampled[index]=p
if (index > t+20*as.numeric(as.character(sequence$duration[p])))
{
t=t+20*as.numeric(as.character(sequence$duration[p]))
p=p+1
}
}
periodDownsampled
timeDownsampled = seq(0, as.numeric(as.character(experiment$duration))*1000, 50)
timeDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$time)/binsize))
timeDownsampled = seq(0, as.numeric(as.character(experiment$duration))*1000, 50)
timeDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$time)/binsize))
timeDownsampled <- seq(0, as.numeric(as.character(experiment$duration))*1000, 50)
timeDownsampled <- seq(0, (as.numeric(as.character(experiment$duration))*1000)-50, 50)
rm(periodDownsampled)
p=1
t=0
for (index in 1:length(periodDownsampled)){
periodDownsampled[index]=p
if (index > t+20*as.numeric(as.character(sequence$duration[p])))
{
t=t+20*as.numeric(as.character(sequence$duration[p]))
p=p+1
}
}
periodDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$period)/binsize))
timeDownsampled = seq(0, (as.numeric(as.character(experiment$duration))*1000)-50, 50)
p=1
t=0
for (index in 1:length(periodDownsampled)){
periodDownsampled[index]=p
if (index > t+20*as.numeric(as.character(sequence$duration[p])))
{
t=t+20*as.numeric(as.character(sequence$duration[p]))
p=p+1
}
}
as.numeric(as.character(experiment$duration))*20
length(rawdata$a_pos)
length(rawdata$a_pos)/(as.numeric(as.character(experiment$duration))*20)
11%/%5
11%%5
NofDatapoints = as.numeric(as.character(experiment$duration))*20 #find the number of data points we should be having at 20Hz
length(rawdata$a_pos)%/%NofDatapoints
length(rawdata$a_pos)%%NofDatapoints
xml_name
xml_name="B:/GitHub/DTSevaluations/example data/switch/values1.xml"
library(ggplot2)
library(tidyr)
library(dygraphs)
library(grid)
library(reshape2)
library(dplyr)
library(plyr)
library(gridExtra)
library(yaml)
library(ggsignif)
library(effsize)
library(pwr)
library(BayesFactor)
library(genefilter)
library(seewave)
library(lubridate)
library(rmarkdown)
library(markdown)
library(knitr)
library(dabestr)
library(zoo)
require("XML")
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
##parse the metadata
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##reset position data to +/-180° [-1800..1796] for torquemeter experiments
if (project.data$experiment$type=="Torquemeter"){
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
}
##change j_pos data from float to integer and shift to make approx. zero symmetric (needs work!)
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)+1100
}
##change a_pos data from float to integer in Joystick experiments
if(experiment$meter_type=="Joystick"){
rawdata$a_pos = round(rawdata$a_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
##calculate actual sampling rate and downsample if necessary
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
round(real_sample_rate) > 65
round(real_sample_rate) > 20
NofDatapoints = as.numeric(as.character(experiment$duration))*20 #find the number of data points we should be having at 20Hz
length(rawdata$a_pos)
binsize=length(rawdata$a_pos)%/%NofDatapoints #find the binsize to downsample with
remainder = length(rawdata$a_pos)%%NofDatapoints #find out if there is a remainder to deal with
remainder = length(rawdata$a_pos)%%binsize #find out if there is a remainder to deal with
if (remainder > 0){rawdata=head(rawdata, -remainder)}
a_posDownsampled <- vector(mode = "numeric", length = NofDatapoints)
flyDownsampled <- vector(mode = "numeric", length = NofDatapoints)
periodDownsampled <- vector(mode = "numeric", length = NofDatapoints)
timeDownsampled = seq(0, (as.numeric(as.character(experiment$duration))*1000)-50, 50)
p=1
t=0
for (index in 1:NofDatapoints){
periodDownsampled[index]=p
if (index > t+20*as.numeric(as.character(sequence$duration[p])))
{
t=t+20*as.numeric(as.character(sequence$duration[p]))
p=p+1
}
}
for (index in seq(1,length(rawdata$a_pos),binsize)) {
if(index < (length(rawdata$a_pos)-binsize)) { # check whether we reached the end of the data; if not:
a_posDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$a_pos[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
a_posDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$a_pos[index:length(rawdata$a_pos)])/length(rawdata$a_pos[index:length(rawdata$a_pos)])) # average over the remaining values and save the result
}
}
for (index in seq(1,length(rawdata$fly),binsize)) {
if(index < (length(rawdata$fly)-binsize)) { # check whether we reached the end of the data; if not:
flyDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$fly[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
flyDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$fly[index:length(rawdata$fly)])/length(rawdata$fly[index:length(rawdata$fly)])) # average over the remaining values and save the result
}
}
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
seq(1,length(rawdata$a_pos),binsize)
length(rawdata$a_pos),binsize)
rawdata$a_pos/3
length(rawdata$a_pos)/3
length(rawdata$a_pos)/NofDatapoints
22800-22914
length(rawdata$a_pos)/binsize > NofDatapoints
length(rawdata$a_pos)/binsize != NofDatapoints
table(rawdata$period)
table(periodDownsampled)
p=1
t=0
for (index in 1:NofDatapoints){
periodDownsampled[index]=p
if (index >= t+20*as.numeric(as.character(sequence$duration[p])))
{
t=t+20*as.numeric(as.character(sequence$duration[p]))
p=p+1
}
}
table(periodDownsampled)
p=1
t=0
for (index in 1:NofDatapoints){
periodDownsampled[index]=p
if (index = t+20*as.numeric(as.character(sequence$duration[p])))
{
t=t+20*as.numeric(as.character(sequence$duration[p]))
p=p+1
}
}
p=1
t=0
for (index in 1:NofDatapoints){
periodDownsampled[index]=p
if (index == t+20*as.numeric(as.character(sequence$duration[p])))
{
t=t+20*as.numeric(as.character(sequence$duration[p]))
p=p+1
}
}
table(periodDownsampled)
table(rawdata$period)
table(rawdata$period)/table(periodDownsampled)
table(rawdata$period)%/%table(periodDownsampled)
table(rawdata$period)%%table(periodDownsampled)
approx(rawdata$fly, n=22800)
plot(approx(rawdata$fly, n=22800))
plot(rawdata$fly)
length(rawdata$fly)
plot(subset(rawdata$fly, rawdata$period=="1"))
plot(subset(rawdata$fly, rawdata$period=="2"))
plot(subset(rawdata$fly, rawdata$period=="3"))
plot(subset(rawdata$fly, rawdata$period=="4"))
plot(subset(rawdata$fly, rawdata$period=="5"))
plot(subset(rawdata$fly, rawdata$period=="6"))
plot(approx(subset(rawdata$fly, rawdata$period=="6"), n=2400)
)
table(periodDownsampled)
table(periodDownsampled)[1]
f=600
flong=100
sapply(f,flong)
for (index in 1:NofPeriods){
f<-c(f,approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index]))
}
for (index in 1:NofPeriods){
f=c(f,approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index]))
}
rm(f)
for (index in 1:NofPeriods){
f=c(f,approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index]))
}
flyDownsampled <- vector(mode = "numeric", length = NofDatapoints)
for (index in 1:NofPeriods){
flyDownsampled[index]=approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index])
}
for (index in 1:NofPeriods){
flyDownsampled=c(flyDownsampled, approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index]))
}
flyDownsampled <- vector(mode = "numeric", length = NofDatapoints)
for (index in 1:NofPeriods){
flyDownsampled=c(flyDownsampled, approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index]))
}
flyDownsampled <- vector(mode = "numeric", length = NofDatapoints)
for (index in 1:NofPeriods){
flyDownsampled=append(flyDownsampled, approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index]))
}
for (index in 1:2){
flyDownsampled=c(flyDownsampled, approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index]))
}
flyDownsampled <- vector(mode = "numeric", length = NofDatapoints)
for (index in 1:2){
flyDownsampled=c(flyDownsampled, approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index]))
}
flyDownsampled=approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index])
subset(rawdata$fly, rawdata$period==index
)
approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index])
flyDownsampled <- vector(mode = "numeric", length = NofDatapoints)
flyDownsampled=approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index])
flyDownsampled=as.vector(approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index]))
plot(flyDownsampled[1])
plot(flyDownsampled[[1]])
plot(flyDownsampled[[2]])
plot(approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index]))
plot(approx(subset(rawdata$fly, rawdata$period==index), n=600))
plot(approx(subset(rawdata$fly, rawdata$period==index), n=600))
View(flyDownsampled)
rm(flyDownsampled)
plot(subset(rawdata$fly, rawdata$period==index))
plot(approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index]))
plot(approx(subset(rawdata$fly, rawdata$period==index), n=600
)
)
flyDownsampled=approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index])
plot(flyDownsampled[[2]])
plot(round(flyDownsampled[[2]]))
f=approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index])
rm(flyDownsampled)
flyDownsampled=c(flyDownsampled, round(f[[2]]))
flyDownsampled <- vector(mode = "numeric", length = NofDatapoints)
flyDownsampled=c(flyDownsampled, round(f[[2]]))
flyDownsampled <- vector(mode = "numeric")
flyDownsampled=c(flyDownsampled, round(f[[2]]))
flyDownsampled <- vector(mode = "numeric")
for (index in 1:NofPeriods){
f=approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index])
flyDownsampled=c(flyDownsampled, round(f[[2]]))
}
plot(flyDownsampled)
plot(rawdata$fly)
NofDatapoints = as.numeric(as.character(experiment$duration))*20 #find the number of data points we should be having at 20Hz
# create the vectors in which to save the downsampled data
a_posDownsampled <- vector(mode = "numeric")
flyDownsampled <- vector(mode = "numeric")
periodDownsampled <- vector(mode = "numeric", length = NofDatapoints)
# create new time and period values
timeDownsampled = seq(0, (as.numeric(as.character(experiment$duration))*1000)-50, 50)
p=1
t=0
for (index in 1:NofDatapoints){
periodDownsampled[index]=p
if (index == t+20*as.numeric(as.character(sequence$duration[p])))
{
t=t+20*as.numeric(as.character(sequence$duration[p]))
p=p+1
}
}
# downsample fly behavior and a_pos
for (index in 1:NofPeriods){
f=approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index])
flyDownsampled=c(flyDownsampled, round(f[[2]]))
p=approx(subset(rawdata$a_pos, rawdata$period==index), n=table(periodDownsampled)[index])
a_posDownsampled=c(flyDownsampled, round(f[[2]]))
}
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
NofDatapoints = as.numeric(as.character(experiment$duration))*20 #find the number of data points we should be having at 20Hz
# create the vectors in which to save the downsampled data
a_posDownsampled <- vector(mode = "numeric")
flyDownsampled <- vector(mode = "numeric")
periodDownsampled <- vector(mode = "numeric", length = NofDatapoints)
# create new time and period values
timeDownsampled = seq(0, (as.numeric(as.character(experiment$duration))*1000)-50, 50)
p=1
t=0
for (index in 1:NofDatapoints){
periodDownsampled[index]=p
if (index == t+20*as.numeric(as.character(sequence$duration[p])))
{
t=t+20*as.numeric(as.character(sequence$duration[p]))
p=p+1
}
}
# downsample fly behavior and a_pos
for (index in 1:NofPeriods){
f=approx(subset(rawdata$fly, rawdata$period==index), n=table(periodDownsampled)[index])
flyDownsampled=c(flyDownsampled, round(f[[2]]))
p=approx(subset(rawdata$a_pos, rawdata$period==index), n=table(periodDownsampled)[index])
a_posDownsampled=c(a_posDownsampled, round(f[[2]]))
}
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
rawdata <- downsampleapprox(rawdata, sequence, experiment, NofPeriods)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
View(rawdata)
View(rawdata)
knitr::opts_chunk$set(echo = TRUE)
table(sign(temp$fly))
View(fly)
View(temp)
table(sign(temp$fly), zero=1)
table(sign(temp$fly), zero=1L)
table(sign(temp$fly))[1]
table1 <- table(sign(temp$fly))
t1 = table1[1]
t2 = nrow(temp)-t1
(t1-t2)/(t1+t2)
sequence$contingency[i]
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
table(sign(temp$fly))
(t1-t2)/(t1+t2)
table1 <- table(sign(temp$fly))
t2 = table1[1]
t1 = nrow(temp)-t2
(t1-t2)/(t1+t2)
sequence$contingency[i]
xml_name
signif(real_sample_rate,4)
signif(down_sample_rate,4)
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
source('B:/GitHub/DTSevaluations/DTS_plotfunctions.R', echo=TRUE)
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
