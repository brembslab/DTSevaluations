bayes= ttestBF(na.omit(PIstat[[2]]))
bayes[1]
extractBF(bayes)
test=extractBF(bayes)
View(test)
plot(bayes)
project.data<-yaml.load_file(project.file)
typeof(project.file[["statistics"]][["color-range"]])
typeof(project.data[["statistics"]][["color-range"]])
project.data[["statistics"]][["color-range"]]
colorrange = project.data[["statistics"]][["color-range"]]
bayes.results<-list()
for(x in 1:NofGroups){bayes.results[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))}
bayes.results[1]
bayes.results[[1]]
bayes.results[[2]]
ttestBF(PIprofile[[1]], PIprofile[[2]])
ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]]))
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
View(bayesF)
utest = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["U-Test"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
#make tidy table of results
results.utest<-data.frame(values=c(signif[1], w.statistic, cohend, power, bayesF$bf, bayesF$error))
rownames(results.utest)<-c("Significance level" ,"MW U-Test, W", "Cohen's D", "stat. Power", "Bayes Factor", "Bayes Factor error")
# plot two PIs with asterisks
plots.utest<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))), map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1])) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.utest[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.utest, ncol=2)
utest = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["U-Test"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
#make tidy table of results
results.utest<-data.frame(values=c(signif[1], w.statistic, cohend, power, signif(bayesF$bf, 3), signif(bayesF$error, 5)))
rownames(results.utest)<-c("Significance level" ,"MW U-Test, W", "Cohen's D", "stat. Power", "Bayes Factor", "Bayes Factor error")
# plot two PIs with asterisks
plots.utest<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))), map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1])) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.utest[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.utest, ncol=2)
pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1]
)
pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = 0.05)
alt
alt = project.data[["statistics"]][["two.groups"]][["power"]]
pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = 0.05)
pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])
utest = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
#make tidy table of results
results.utest<-data.frame(values=c(signif[1], w.statistic, cohend, power, signif(bayesF$bf, 3), signif(bayesF$error, 5)))
rownames(results.utest)<-c("Significance level" ,"MW U-Test, W", "Cohen's D", "stat. Power", "Bayes Factor", "Bayes Factor error")
# plot two PIs with asterisks
plots.utest<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))), map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1])) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.utest[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.utest, ncol=2)
utest = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
#make tidy table of results
results.utest<-data.frame(values=c(signif[1], w.statistic, cohend, power, signif(bayesF$bf, 3), signif(bayesF$error, 4)))
rownames(results.utest)<-c("Significance level" ,"MW U-Test, W", "Cohen's D", "stat. Power", "Bayes Factor", "Bayes Factor error")
# plot two PIs with asterisks
plots.utest<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))), map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1])) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.utest[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.utest, ncol=2)
utest = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
#make tidy table of results
results.utest<-data.frame(values=c(signif[1], w.statistic, cohend, power, signif(bayesF$bf, 3), signif(bayesF$error, 3)))
rownames(results.utest)<-c("Significance level" ,"MW U-Test, W", "Cohen's D", "stat. Power", "Bayes Factor", "Bayes Factor error")
# plot two PIs with asterisks
plots.utest<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))), map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1])) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.utest[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.utest, ncol=2)
test.bayes<-bayes.results
unlist(test.bayes)
test.bayes[1]
rownames(test.bayes, "rut")
rownames(test.bayes[1], "rut")
`row.names<-`(test.bayes, "rut")
`row.names<-`(test.bayes[1], "rut")
test.bayes<-do.call("rbind", bayes.results)
View(test.bayes)
test.bayes[1]
grid.table(test.bayes)
for(x in 1:NofGroups){
bayes.results[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))
bayes.results[[x]][[1]] = project.data[["resource"]][[x]][["name"]]
}
bayes.results<-do.call("rbind", bayes.results) #fuse all Bayes results into one dataframe
grid.table(bayes.results)
for(x in 1:NofGroups){
bayes.results[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))
bayes.results[[x]][[1]] = project.data[["resources"]][[x]][["name"]]
}
bayes.results<-do.call("rbind", bayes.results) #fuse all Bayes results into one dataframe
bayes.results<-list()
for(x in 1:NofGroups){
bayes.results[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))
bayes.results[[x]][[1]] = project.data[["resources"]][[x]][["name"]]
}
bayes.results<-do.call("rbind", bayes.results) #fuse all Bayes results into one dataframe
grid.table(bayes.results)
grid.table(bayes.results)
row.names(bayes.results)[1]<-"rut"
grid.table(bayes.results)
grid.table(bayes.results)
bayes.results<-list()
for(x in 1:NofGroups){
bayes.results[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))
row.names(bayes.results[[x]])[1] <- project.data[["resources"]][[x]][["name"]]
}
bayes.results<-do.call("rbind", bayes.results) #fuse all Bayes results into one dataframe
grid.table(bayes.results)
##### Single group tests against zero #####
if(project.data[["statistics"]][["single.groups"]][["data"]]==1) #check if instructions contain Wlcoxon test against zero
{
wilcoxon<-numeric()
for(x in 1:NofGroups){wilcoxon[x] = signif(wilcox.test(PIstat[[x]])$p.value, 3)} #test all groups against zero
#compute Bayes Factor for each group
results.bayes<-list()
for(x in 1:NofGroups){
results.bayes[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))
row.names(results.bayes[[x]])[1] <- project.data[["resources"]][[x]][["name"]]
}
results.bayes<-do.call("rbind", results.bayes) #fuse all Bayes results into one dataframe
# plot PI box plot with power analysis and asterisks for Wilcoxon test against zero
plots.singles<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = FALSE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle("Wilcoxon") +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes) +
wilcox.annotate(boxes, wilcoxon))
#add table with results and plot
plots.singles[[2]]<-tableGrob(results.bayes)
grid.arrange(grobs = plots.singles, ncol=2)
}
##### Tests between two independent samples #####
if(project.data[["statistics"]][["two.groups"]][["data"]]==1 || NofGroups==2) #check if instructions contain U-test between two groups and if we have two grouos
{
utest = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
#make tidy table of results
results.utest<-data.frame(values=c(signif[1], w.statistic, cohend, power, signif(bayesF$bf, 3), signif(bayesF$error, 3)))
rownames(results.utest)<-c("Significance level" ,"MW U-Test, W", "Cohen's D", "stat. Power", "Bayes Factor", "Bayes Factor error")
# plot two PIs with asterisks
plots.2test<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))), map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1])) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.2test[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.2test, ncol=2)
}
results.bayes <- results.bayes[-c(3,4)]# drop the date and code columns
results.bayes
##### Single group tests against zero #####
if(project.data[["statistics"]][["single.groups"]][["data"]]==1) #check if instructions contain Wlcoxon test against zero
{
wilcoxon<-numeric()
for(x in 1:NofGroups){wilcoxon[x] = signif(wilcox.test(PIstat[[x]])$p.value, 3)} #test all groups against zero
#compute Bayes Factor for each group
results.bayes<-list()
for(x in 1:NofGroups){
results.bayes[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))
row.names(results.bayes[[x]])[1] <- project.data[["resources"]][[x]][["name"]]
}
results.bayes<-do.call("rbind", results.bayes) #fuse all Bayes results into one dataframe
results.bayes <- results.bayes[-c(3,4)]# drop the date and code columns
# plot PI box plot with power analysis and asterisks for Wilcoxon test against zero
plots.singles<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = FALSE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle("Wilcoxon") +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes) +
wilcox.annotate(boxes, wilcoxon))
#add table with results and plot
plots.singles[[2]]<-tableGrob(results.bayes)
grid.arrange(grobs = plots.singles, ncol=2)
}
##### Tests between two independent samples #####
if(project.data[["statistics"]][["two.groups"]][["data"]]==1 || NofGroups==2) #check if instructions contain U-test between two groups and if we have two grouos
{
utest = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
#make tidy table of results
results.utest<-data.frame(values=c(signif[1], w.statistic, cohend, power, signif(bayesF$bf, 3), signif(bayesF$error, 3)))
rownames(results.utest)<-c("Significance level" ,"MW U-Test, W", "Cohen's D", "stat. Power", "Bayes Factor", "Bayes Factor error")
# plot two PIs with asterisks
plots.2test<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))), map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1])) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.2test[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.2test, ncol=2)
}
lapply(results.bayes, signif, 3)
results.bayes
##### Single group tests against zero #####
if(project.data[["statistics"]][["single.groups"]][["data"]]==1) #check if instructions contain Wlcoxon test against zero
{
wilcoxon<-numeric()
for(x in 1:NofGroups){wilcoxon[x] = signif(wilcox.test(PIstat[[x]])$p.value, 3)} #test all groups against zero
#compute Bayes Factor for each group
results.bayes<-list()
for(x in 1:NofGroups){
results.bayes[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))
row.names(results.bayes[[x]])[1] <- project.data[["resources"]][[x]][["name"]]
}
results.bayes<-do.call("rbind", results.bayes) #fuse all Bayes results into one dataframe
results.bayes <- results.bayes[-c(3,4)]# drop the date and code columns
results.bayes <- lapply(results.bayes, signif, 3) # reduce results to 3 significant digits
# plot PI box plot with power analysis and asterisks for Wilcoxon test against zero
plots.singles<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = FALSE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle("Wilcoxon") +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes) +
wilcox.annotate(boxes, wilcoxon))
#add table with results and plot
plots.singles[[2]]<-tableGrob(results.bayes)
grid.arrange(grobs = plots.singles, ncol=2)
}
##### Tests between two independent samples #####
if(project.data[["statistics"]][["two.groups"]][["data"]]==1 || NofGroups==2) #check if instructions contain U-test between two groups and if we have two grouos
{
utest = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
#make tidy table of results
results.utest<-data.frame(values=c(signif[1], w.statistic, cohend, power, signif(bayesF$bf, 3), signif(bayesF$error, 3)))
rownames(results.utest)<-c("Significance level" ,"MW U-Test, W", "Cohen's D", "stat. Power", "Bayes Factor", "Bayes Factor error")
# plot two PIs with asterisks
plots.2test<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))), map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1])) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.2test[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.2test, ncol=2)
}
##### Single group tests against zero #####
if(project.data[["statistics"]][["single.groups"]][["data"]]==1) #check if instructions contain Wlcoxon test against zero
{
wilcoxon<-numeric()
for(x in 1:NofGroups){wilcoxon[x] = signif(wilcox.test(PIstat[[x]])$p.value, 3)} #test all groups against zero
#compute Bayes Factor for each group
results.bayes<-list()
for(x in 1:NofGroups){
results.bayes[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))
row.names(results.bayes[[x]])[1] <- project.data[["resources"]][[x]][["name"]]
}
results.bayes<-do.call("rbind", results.bayes) #fuse all Bayes results into one dataframe
results.bayes <- results.bayes[-c(3,4)]# drop the date and code columns
#  results.bayes <- lapply(results.bayes, signif, 3) # reduce results to 3 significant digits
# plot PI box plot with power analysis and asterisks for Wilcoxon test against zero
plots.singles<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = FALSE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle("Wilcoxon") +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes) +
wilcox.annotate(boxes, wilcoxon))
#add table with results and plot
plots.singles[[2]]<-tableGrob(results.bayes)
grid.arrange(grobs = plots.singles, ncol=2)
}
##### Tests between two independent samples #####
if(project.data[["statistics"]][["two.groups"]][["data"]]==1 || NofGroups==2) #check if instructions contain U-test between two groups and if we have two grouos
{
utest = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
#make tidy table of results
results.utest<-data.frame(values=c(signif[1], w.statistic, cohend, power, signif(bayesF$bf, 3), signif(bayesF$error, 3)))
rownames(results.utest)<-c("Significance level" ,"MW U-Test, W", "Cohen's D", "stat. Power", "Bayes Factor", "Bayes Factor error")
# plot two PIs with asterisks
plots.2test<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))), map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1])) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.2test[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.2test, ncol=2)
}
lapply(results.bayes[is.num], signif, 3) # reduce results to 3 significant digits
lapply(results.bayes[c(1,2)], signif, 3) # reduce results to 3 significant digits
lapply(results.bayes, signif, 3) # reduce results to 3 significant digits
results.bayes <- lapply(results.bayes[is.num], signif, 3) # reduce results to 3 significant digits
results.bayes <- lapply(results.bayes, signif, 3) # reduce results to 3 significant digits
grid.arrange(results.bayes)
grid.table(results.bayes)
##### Single group tests against zero #####
if(project.data[["statistics"]][["single.groups"]][["data"]]==1) #check if instructions contain Wlcoxon test against zero
{
wilcoxon<-numeric()
for(x in 1:NofGroups){wilcoxon[x] = signif(wilcox.test(PIstat[[x]])$p.value, 3)} #test all groups against zero
#compute Bayes Factor for each group
results.bayes<-list()
for(x in 1:NofGroups){
results.bayes[[x]]=extractBF(ttestBF(na.omit(PIstat[[x]])))
row.names(results.bayes[[x]])[1] <- project.data[["resources"]][[x]][["name"]]
}
results.bayes<-do.call("rbind", results.bayes) #fuse all Bayes results into one dataframe
results.bayes <- results.bayes[-c(3,4)]# drop the date and code columns
#  results.bayes <- lapply(results.bayes[is.num], signif, 3) # reduce results to 3 significant digits
# plot PI box plot with power analysis and asterisks for Wilcoxon test against zero
plots.singles<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = FALSE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle("Wilcoxon") +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes) +
wilcox.annotate(boxes, wilcoxon))
#add table with results and plot
plots.singles[[2]]<-tableGrob(results.bayes)
grid.arrange(grobs = plots.singles, ncol=2)
}
##### Tests between two independent samples #####
if(project.data[["statistics"]][["two.groups"]][["data"]]==1 || NofGroups==2) #check if instructions contain U-test between two groups and if we have two grouos
{
utest = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$p.value, 3) #compare the two groups with a U-test and collect p-value
w.statistic = signif(wilcox.test(PIstat[[1]],PIstat[[2]])$statistic, 3)
#compute effect size Cohen's D
cohend = signif(cohen.d(na.omit(PIstat[,1]), na.omit(PIstat[,2]))$estimate, 3)
#calculate statistical power
alt = project.data[["statistics"]][["two.groups"]][["power"]]
power=signif(pwr.t2n.test(n1 = samplesizes[1], n2= samplesizes[2], d = cohend, alternative = alt, sig.level = signif[1])$power, 3)
#calculate Bayes Factor
bayesF=extractBF(ttestBF(na.omit(PIprofile[[1]]), na.omit(PIprofile[[2]])))
#make tidy table of results
results.utest<-data.frame(values=c(signif[1], w.statistic, cohend, power, signif(bayesF$bf, 3), signif(bayesF$error, 3)))
rownames(results.utest)<-c("Significance level" ,"MW U-Test, W", "Cohen's D", "stat. Power", "Bayes Factor", "Bayes Factor error")
# plot two PIs with asterisks
plots.2test<-list(ggplot(melt(PIstat), aes(variable, value)) +
geom_hline(yintercept = 0, colour = "#887000", size = 1.2) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = melt(PIstat), aes(variable, value), position=position_jitter(0.3), cex=2, color="grey80") +
ggtitle(paste("U-Test, p=", utest)) +
scale_y_continuous(breaks = seq(-1, 1, .2)) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank() ,panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab("PI [rel. units]")+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
geom_signif(comparisons = list(c(colnames(PIstat[1]), colnames(PIstat[2]))), map_signif_level= c("***"= signif[3],"**"= signif[2], "*"= signif[1])) +
samplesizes.annotate(boxes, samplesizes))
#add table with results and plot
plots.2test[[2]]<-tableGrob(results.utest)
grid.arrange(grobs = plots.2test, ncol=2)
}
test.bayes=results.bayes
lapply(test.bayes, signif, 3)
grid.table(lapply(test.bayes, signif, 3))
grid.table(apply(test.bayes, signif, 3))
grid.table(sapply(test.bayes, signif, 3))
grid.table(sapply(test.bayes, signif, 3))
grid.table(sapply(test.bayes[c(1,2)], signif, 3))
grid.table(sapply(is.numeric(test.bayes), signif, 3))
grid.table(sapply(is.numeric(test.bayes), signif, 3))
grid.table(sapply(test.bayes, signif, 3))
test.bayes
grid.table(lapply(test.bayes, signif, 3))
