CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset position data to +/-180° [-1800..1796]
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##change j_pos data from float to integer
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
##calculate actual sampling rate and downsample if necessary
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
flyData <- xmlParse(xml_name)
xml_name <- file.choose()
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset position data to +/-180° [-1800..1796]
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##change j_pos data from float to integer
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
##calculate actual sampling rate and downsample if necessary
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
View(rawdata)
table(rawdata$period)
xml_name <- file.choose()
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
##parse the metadata
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset position data to +/-180° [-1800..1796]
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##change j_pos data from float to integer
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
##calculate actual sampling rate and downsample if necessary
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
xml_name <- file.choose()
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
##parse the metadata
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset position data to +/-180° [-1800..1796]
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##change j_pos data from float to integer
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
##calculate actual sampling rate and downsample if necessary
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
table(rawdata$period)
rawdata$group_num <- 50*round(rawdata$time/50) # Create 50ms bins
rawdata$weight <- 1/(1+abs(rawdata$time-rawdata$group_num)) # calculate distance from measurement point
rawdata$norm <-ave(rawdata$weight,rawdata$group_num,FUN=function(x) x/sum(x)) #apply weights according to distance from bin center
rawdata$fly2 <- rawdata$fly*rawdata$norm
rawdata$a_pos2 <- rawdata$a_pos*rawdata$norm #needs more work because of values at +/-180°!!!
rawdata$period2 <- rawdata$period*rawdata$norm
# create the vectors in which to save the downsampled data
timeDownsampled <- as.vector(unique(rawdata$group_num))
a_posDownsampled <- as.vector(round(tapply(rawdata$a_pos2, rawdata$group_num, sum)))
flyDownsampled <- as.vector(round(tapply(rawdata$fly2, rawdata$group_num, sum)))
periodDownsampled <- as.vector(round(tapply(rawdata$period2, rawdata$group_num, sum)))
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
View(rawdataDown)
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
if (length(table(rawdataDown$period)) > NofPeriods) {rawdataDown<-rawdataDown[!(rawdataDown$period==length(table(rawdataDown$period))),]} #remove any extra period numbers, if they exist
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
View(difference)
load("B:/GitHub/DTSevaluations/example data/t-learn/evaluations/.RData")
View(rightOMdata)
View(plotOM)
OMtest = subset(plotOM, time<30000)
View(OMtest)
m<-nls(OMtest$means~a*OMtest$time/(b+OMtest$time))
nls(OMtest$means~a*OMtest$time/(b+OMtest$time))
nls(OMtest$means~(a*OMtest$time/(b+OMtest$time)))
#simulate some data
set.seed(20160227)
x<-seq(0,50,1)
y<-((runif(1,10,20)*x)/(runif(1,0,10)+x))+rnorm(51,0,1)
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*x/(b+x))
nls(OMtest$means~(a*OMtest$time)/(b+OMtest$time))
x=as.numeric(as.character(OMtest$time))
y=as.numeric(as.character(OMtest$means))
View(m)
m<-nls(y~a*x/(b+x))
View(m)
cor(y,predict(m))
plot(x,y)
lines(x,predict(m),lty=2,col="red",lwd=3)
OMdata$time[nrow(OMdata)]
plotOM$time[nrow(plotOM)]
plotOM$time[nrow(plotOM)]/2
plotOM$time[1..OMmidpoint]
plotOM$time[1:OMmidpoint]
knitr::opts_chunk$set(echo = TRUE)
OMmidpoint = round(plotOM$time[nrow(plotOM)]/2)
plotOM$time[1:OMmidpoint]
x=as.numeric(as.character(plotOM$time[1:OMmidpoint]))
y=as.numeric(as.character(plotOM$means[1:OMmidpoint]))
plotOM$means[OMmidpoint]
plot(y)
m<-nls(y~a*x/(b+x))
cor(y,predict(m))
View(m)
x[29975]
x[nrow(x)]==NA
x[nrow(x)]=="NA"
exists(x[nrow(x)]==NA)
exists(x[nrow(x)]=="NA")
x[nrow(x)]
nrow(x)
tail(x)
tail(y)
x[tail(x)]
exists(tail.matrix(x)=="NA")
exists(tail(x)=="NA")
exists(x[tail(x)]=="NA")
x[tail(x)]=="NA"
tail(x)=="NA"
tail(x)==NA
x[length(x)]
x[length(x)]==NA
x[length(x)]!=NA
x[length(x)]!="NA"
x[length(x)]>2
as.logical(x[length(x)]==NA)
as.logical.factor(x[length(x)]==NA)
x[length(x)-1]
x[length(x)-2]
x[length(x)-20]
length(x)
x[length(x)-15]
x[length(x)-29975]
x[1]
x[2]
x[3]
x[29975]
x[29974]
x[29973]
x[300]
x[301]
x[302]
x[29950]
x[29900]
x[29000]
x[1000]
x[2000]
x[1100]
x[1200]
x[1201]
OMmidpoint
nrow(plotOM)/2
round(nrow(plotOM)/2)
OMmidpoint = round(nrow(plotOM)/2)
x=plotOM$time[1:OMmidpoint]
x=plotOM$time[1:OMmidpoint]
y=plotOM$means[1:OMmidpoint]
m<-nls(y~a*x/(b+x))
cor(y,predict(m))
y=plotOM$means[1:OMmidpoint]+plotOM$means[1]
plotOM$means[1]
y
y+plotOM$means[1]
y=plotOM$means[1:OMmidpoint]-plotOM$means[1]
m<-nls(y~a*x/(b+x))
cor(y,predict(m))
plot(x,y)
lines(x,predict(m),lty=2,col="red",lwd=3)
summary(m)
m$data
m$call
m$dataClasses
View(m)
coef(m)
coef(m)$a
coef(m)[a]
coef(m)["a"]
test=as.dataframe(coef(m))
test=as.data.frame(coef(m))
View(test)
x=plotOM$time[OMmidpoint+1:nrow(plotOM)] #time
m<-nls(y~a*x/(b+x))
plot(x)
x=plotOM$time[OMmidpoint+1:length(plotOM)] #time
x=plotOM$time[OMmidpoint+1:nrow(plotOM)] #time
x[1200]
x[600]
x[601]
nrow(plotOM)
x=plotOM$time[OMmidpoint+1:1200] #time
x=plotOM$time[OMmidpoint+1:600] #time
midpointOM
OMmidpoint
plotOM$time[<=OMmidpoint]
plotOM$time[plotOM$time<=OMmidpoint]
round(plotOM$time[nrow(plotOM)]/2)
OMmidpoint = round(plotOM$time[nrow(plotOM)]/2)
x=plotOM$time[plotOM$time<=OMmidpoint] #time
y=plotOM$means[plotOM$time<=OMmidpoint]-plotOM$means[1] #mean OM response normalized to start from zero
m<-nls(y~a*x/(b+x))
test=as.data.frame(coef(m)) #put the results in a dataframe
View(test)
x=plotOM$time[plotOM$time>OMmidpoint] #time
y=plotOM$means[plotOM$time>OMmidpoint]-plotOM$means[1] #mean OM response normalized to start from zero
plot(x)
plot(y)
y=-plotOM$means[plotOM$time>OMmidpoint]+plotOM$means[OMmidpoint+1] #mean OM response normalized to start from zero
plot(y)
y=-plotOM$means[plotOM$time>OMmidpoint]
plot(y)
plotOM$means[OMmidpoint+1]
plotOM$means[OMmidpoint]
plotOM$means[600]
plotOM$means[OMmidpoint]
OMmidpoint
plotOM$means[plotOM$time=OMmidpoint+1]
plotOM$means[plotOM$time==OMmidpoint+1]
plotOM$means[plotOM$time=OMmidpoint]
nrow(plotOM$time=OMmidpoint)
y=y+y[1] #mean OM response normalized to start from zero
plot(y)
y[1]
y=-plotOM$means[plotOM$time>OMmidpoint]
y=y-y[1] #mean OM response normalized to start from zero
plot(y)
abs(plotOM$means[nrow(plotOM)/2+1]
)
y=-plotOM$means[plotOM$time>OMmidpoint]+abs(plotOM$means[nrow(plotOM)/2+1]) #mean OM response normalized to start from zero
m<-nls(y~a*x/(b+x))
x=x-x[1]
m<-nls(y~a*x/(b+x))
x=plotOM$time[plotOM$time>OMmidpoint] #time
x=x-x[1] #set time to start from zero
y=-plotOM$means[plotOM$time>OMmidpoint] #mean OM response
y=y+abs(y[1])
m<-nls(y~a*x/(b+x))
summary(m)
plot(x,y)
lines(x,predict(m),lty=2,col="red",lwd=3)
x1=plotOM$time[plotOM$time<=OMmidpoint] #time
y1=plotOM$means[plotOM$time<=OMmidpoint]+abs(plotOM$means[1]) #mean OM response normalized to start from zero
m1<-nls(y1~a*x1/(b+x1))
#test=as.data.frame(coef(m)) #put the results in a dataframe
#left turning traces
x2=plotOM$time[plotOM$time>OMmidpoint] #time
x2=x2-x2[1] #set time to start from zero
y2=-plotOM$means[plotOM$time>OMmidpoint] #mean OM response
y2=y2+abs(y2[1])
m2<-nls(y2~a*x2/(b+x2))
plot(x1,y1)
lines(x1,predict(m1),lty=2,col="red",lwd=3)
plot(x2,y2)
lines(x2,predict(m2),lty=2,col="red",lwd=3)
summary(m1)
summary(m2)
OMmidpoint = plotOM$time[nrow(plotOM)]/2
#right turning traces
x=plotOM$time[plotOM$time<=OMmidpoint] #time
y=plotOM$means[plotOM$time<=OMmidpoint]+abs(plotOM$means[1]) #mean OM response normalized to start from zero
m<-nls(y~a*x/(b+x))
OMparams=as.data.frame(coef(m)) #put the results in a dataframe
View(OMparams)
test=coef(m)
test
OMmidpoint = plotOM$time[nrow(plotOM)]/2
#right turning traces
x=plotOM$time[plotOM$time<=OMmidpoint] #time
y=plotOM$means[plotOM$time<=OMmidpoint]+abs(plotOM$means[1]) #mean OM response normalized to start from zero
m<-nls(y~a*x/(b+x))
right=coef(m) #put the results in a vector
#left turning traces
x=plotOM$time[plotOM$time>OMmidpoint] #time
x=x-x[1] #set time to start from zero
y=-plotOM$means[plotOM$time>OMmidpoint] #mean OM response
y=y+abs(y[1])
m<-nls(y~a*x/(b+x))
left=coef(m)
mean(left, right)
(left+right)/2
(left-right)
(left-right)/(left+right)
(right-left)/(right+left)
as_slope=(right+left)/2 #mean asymptote and slope
asym_ind=(right-left)/(right+left) #asymmetry index
plot(as_slope)
barplot(as_slope)
barplot(asym_ind)
aveOMcoeff=(right+left)/2                                    #mean asymptote and halfmaximal time
OMasym=(right-left)/(right+left)                             #asymmetry index
aveOMcoeff[2]=aveOMcoeff[2]/1000
OMparams <- c(avecoeff, OMasym[1])
OMparams <- data.frame(avecoeff, OMasym[1])
OMparams <- data.frame(aveOMcoeff, OMasym[1])
View(OMparams)
as.numeric(aveOMcoeff)
OMparams <- data.frame(as.numeric(aveOMcoeff), as.numeric(OMasym[1]))
OMparams <- cbind(as.numeric(aveOMcoeff), as.numeric(OMasym[1]))
OMparams <- rbind(as.numeric(aveOMcoeff), as.numeric(OMasym[1]))
OMparams <- data.frame(as.numeric(aveOMcoeff))
OMparams <- rbind(as.numeric(aveOMcoeff))
OMparams$3 <- as.numeric(OMasym[1])
OMparams$v3 <- as.numeric(OMasym[1])
View(OMparams)
OMparams <- rbind(as.numeric(aveOMcoeff))
OMparams$v3 = as.numeric(OMasym[1])
OMparams <- rbind(as.numeric(aveOMcoeff))
OMparams$v3 = OMasym[1]
OMparams <- rbind(as.numeric(aveOMcoeff))
OMparams$v3 = as.data.frame(OMasym[1])
OMparams <- as.data.frame(rbind(as.numeric(aveOMcoeff)))
OMparams$v3 = as.data.frame(OMasym[1])
View(OMparams)
OMparams <- as.data.frame(rbind(as.numeric(aveOMcoeff)))
OMparams$v3 = OMasym[1]
View(OMparams)
kable(OMparams)
library(ggplot2)
library(tidyr)
library(dygraphs)
library(grid)
library(reshape2)
library(dplyr)
library(gridExtra)
library(yaml)
library(ggsignif)
library(effsize)
library(pwr)
library(BayesFactor)
library(genefilter)  # if not available for newest version: setRepositories(addURLs = c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
library(seewave)
kable(OMparams)
names(OMparams) = c("asymptote", "halfmax_time","AI")
View(OMparams)
tempOMparams <- as.data.frame(rbind(as.numeric(aveOMcoeff))) #gather asymptote and halfmaximal time
tempOMparams$v3 = OMasym[1]                                  #add asymptote asymmetry index
names(tempOMparams) = c("asymptote", "halfmax_time","AI")
rownames(tempOMparams[1])=flyname
View(tempOMparams)
flyname
as.character(flyname)
rownames(tempOMparams[1])=as.character(flyname)
View(tempOMparams)
rownames(tempOMparams[1])=as.character(flyname)
View(tempOMparams)
rownames(tempOMparams[1])
rownames(tempOMparams[1])=as.character(flyname)
rownames(tempOMparams[1])
rownames(tempOMparams)[1]=as.character(flyname)
View(tempOMdata)
View(tempOMparams)
library(knitr)
kable
kable(tempOMparams)
if(!exists("OMparams"))
{
OMparams=tempOMparams
} else {
OMparams[as.character(flyname),]=tempOMparams
}
View(OMparams)
rm(OMparams)
if(!exists("OMparams"))
{
OMparams=tempOMparams
} else {
OMparams[as.character(flyname),]=tempOMparams
}
View(OMparams)
if(!exists("OMparams"))
{
OMparams=tempOMparams
} else {
OMparams[as.character(flyname),]=tempOMparams
}
if(!exists("OMparams"))
{
OMparams=tempOMparams
} else {
OMparams[as.character(flyname),]=tempOMparams
}
View(OMparams)
View(OMparams)
OMparams[as.character(flyname),]=tempOMparams
rownames(OMparams)[1]=wtb-01
rownames(OMparams)[1]="wtb-01"
View(OMparams)
if(!exists("OMparams"))
{
OMparams=tempOMparams
} else {
OMparams[as.character(flyname),]=tempOMparams
}
View(OMparams)
load("B:/GitHub/DTSevaluations/.RData")
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
ggplot(plotOMparams, aes(group, plotOMparams[[OMvariables[v]]])) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = plotOMparams, aes(group, plotOMparams[[OMvariables[v]]]), position=position_jitter(0.3), shape=21, size=3, colour="black", fill="grey50", alpha=0.4) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste(OMtitles[v], " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes)
View(plotOM)
View(tempOMparams)
View(plotOMparams)
ggplot(plotOMparams, aes(group, plotOMparams[[OMvariables[v]]]))
ggplot(plotOMparams, aes(group, plotOMparams$asymptote)
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6)
ggplot(plotOMparams, aes(group, plotOMparams[[OMvariables[v]]])) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6)
ggplot(plotOMparams, aes(group, plotOMparams[[OMvariables[v]]])) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = plotOMparams, aes(group, plotOMparams[[OMvariables[v]]]), position=position_jitter(0.3), shape=21, size=3, colour="black", fill="grey50", alpha=0.4) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste(OMtitles[v], " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes)
for (v in 1:3) {
cat(paste("\n\n## ", OMtitles[v], "\n\n", sep = ""))
ggplot(plotOMparams, aes(group, plotOMparams[[OMvariables[v]]])) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = plotOMparams, aes(group, plotOMparams[[OMvariables[v]]]), position=position_jitter(0.3), shape=21, size=3, colour="black", fill="grey50", alpha=0.4) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste(OMtitles[v], " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes)
}
for (v in 1:3) {
cat(paste("\n\n## ", OMtitles[v], "\n\n", sep = ""))
print(ggplot(plotOMparams, aes(group, plotOMparams[[OMvariables[v]]])) +
geom_boxplot(fill = boxcolors, notch = TRUE, outlier.color=NA, width=0.8, size=0.6) +
geom_jitter(data = plotOMparams, aes(group, plotOMparams[[OMvariables[v]]]), position=position_jitter(0.3), shape=21, size=3, colour="black", fill="grey50", alpha=0.4) +
theme_light(base_size = 16) + theme(panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=18))+ ylab(paste(OMtitles[v], " [rel. units]", sep = ""))+ xlab("Groups")+ theme(aspect.ratio=3/NofGroups)+
samplesizes.annotate(boxes, samplesizes))
}
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
