install.packages("XML")
flyData <- xmlToDataFrame(file.choose())
library("XML").
library("methods")
library("XML")
library("methods")
flyData <- xmlToDataFrame(file.choose())
flyData <- xmlToDataFrame(file.choose())
flyData <- xmlToDataFrame(file.choose())
flyData <- xmlToDataFrame(file.choose())
flyData <- xmlToDataFrame(file.choose())
flyData <- xmlToDataFrame(file.choose())
flyData <- xmlToDataFrame(file.choose())
flyData <- xmlToDataFrame(file.choose())
flyData <- xmlParse(file.choose())
print(flydata)
print(flyData)
xmltop = xmlRoot(flyData)
class(xmltop)
xmlName(xmltop
)
xmlSize(xmltop)
xmlName(xmltop[[1]])
xmlName(xmltop[[2]])
xmlName(xmltop[[3]])
xmlName(xmltop[[3.1]])
xmlName(xmltop[[4]])
xmlName(xmltop[[3][1]])
xmlName(xmltop[[3]][[1]])
flytest=ldply(xmlToList(file.choose()), data.frame)
require("plyr")
flytest=ldply(xmlToList(file.choose()), data.frame)
flytest=ldply(xmlToList(file.choose()), data.frame)
metadata <- xmlToDataFrame(nodes=getNodeSet(flyData1,"//metadata"))[c("licanse","URIs","experimenter","experiment")
]G
metadata <- xmlToDataFrame(nodes=getNodeSet(flyData1,"//metadata"))[c("licanse","URIs","experimenter","experiment")]
metadata <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata"))[c("licanse","URIs","experimenter","experiment")]
metadata <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata"))[c("license","URIs","experimenter","experiment")]
metadata <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))[c("firstname","lastname","orcid")]
View(metadata)
metadata <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata"))[c("license","URIs","experimenter","experiment")]
metadata.experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))[c("firstname","lastname","orcid")]
View(metadata.experimenter)
metadata[experimenter] <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))[c("firstname","lastname","orcid")]
metadata['experimenter'] <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))[c("firstname","lastname","orcid")]
metadata["experimenter"] <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))[c("firstname","lastname","orcid")]
metadata <- list()
metadata["experimenter"] <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))[c("firstname","lastname","orcid")]
metadata[experimenter] <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))[c("firstname","lastname","orcid")]
metadata[1] <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))[c("firstname","lastname","orcid")]
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))[c("recording","analysis","datamodel")]
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))[c("firstname","lastname","orcid")]
View(URIs)
View(experimenter)
metadata<-list(URIs,experimenter)
xmlGetAttr(flyData, "fly")
xmlGetAttr(xmltop, "fly")
xmlGetAttr(xmltop[[1]], "fly")
xmlGetAttr(xmltop[[1]][[4]], "fly")
xmlGetAttr(xmlRoot(xmltop), "fly")
xmlName(xmltop[[1]][[4]])
xmlGetAttr(xmltop[[1]][[4]])
xmlAttrs(xmltop[[1]][[4]])
xmlAttrs(xmltop[[1]][[4]], "type")
xmlAttrs(xmltop[[1]][[4]], [["type"]])
xmlAttrs(xmltop[[1]][[4]], type)
xmlAttrs(xmltop[[1]][[4]], 'type)
""
''
)
;
xmlAttrs(xmltop[[1]][[4]], 'type')
xmlGetAttr(xmltop[[1]][[4]], "type")
xmlGetAttr(xmltop[[metadata']][['fly']], "type")
xmlGetAttr(xmltop[['metadata']][['fly']], "type")
flyDataXMLtop = xmlRoot(flyData)
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))[c("description","dateTime", "duration", "sample_rate", "arena_type, "meter_type")]
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))[c("description","dateTime", "duration", "sample_rate", "arena_type", "meter_type")]
View(experiment)
print("experiment type not recognized")
print(experiment type not recognized)
NofPeriods=xmlGetAttr(flyDataXMLtop[['sequence']][['experiment']], "periods")
xmlGetAttr(flyDataXMLtop[['sequence']], "periods")
NofPeriods=xmlGetAttr(flyDataXMLtop[['sequence']], "periods")
NofPeriods=as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
is.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
is.integer(noquote(xmlGetAttr(flyDataXMLtop[['sequence']], "periods")))
NofPeriods=as.integer(noquote(xmlGetAttr(flyDataXMLtop[['sequence']], "periods")))
is.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
is.integer(NofPeriods)
NofPeriods=as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
is.integer(NofPeriods)
xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence"))[c("duration","coup_coeff")]
sequence<-xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence"))[c("duration","coup_coeff")]
sequence<-xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence"))[c("period")]
View(sequence)
sequence<-xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence"))
View(sequence)
print(sequence)
require("methods")
sequence<-xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence"))
print(sequence)
period[3] <- xmlToDataFrame(nodes=getNodeSet(flyData,"//period[@type='3']"))
period[3] <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period[@type='3']"))
period[3] <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period[@number='3']"))
View(sequence)
sequence<-xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
View(sequence)
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
View(experiment)
View(experiment)
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
View(fly)
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
View(CSV_descriptor)
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables"))
View(variables)
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
View(variables)
flyData <- xmlParse(file.choose())
flyData <- xmlParse(file.choose())
flyData <- xmlParse(file.choose())
flyDataXMLtop = xmlRoot(flyData)
##parse the metadata
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
View(CSV_descriptor)
View(experiment)
View(experimenter)
View(fly)
View(sequence)
View(URIs)
View(variables)
rawdata <- xmlToDataFrame(nodes=getNodeSet(flyData,"//csv_data"))
View(rawdata)
rawdata <- xmlToList(nodes=getNodeSet(flyData,"//csv_data"))
View(rawdata)
rawdata <- xmlToList(flyData,"//csv_data")
test <- xmlToList(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
test <- xmlToList(flyDataXMLtop[['csv_data']]))
test <- xmlToList(flyDataXMLtop[['csv_data']])
test <- xpathSApply(flyData, "//timeseries/csv_data")
xpathSApply(flyData, "//timeseries/csv_data", xmlValue)
test = data.frame(xpathSApply(flyData, "//timeseries/csv_data", xmlValue))
View(test)
View(test)
test = as-list(xpathSApply(flyData, "//timeseries/csv_data", xmlValue))
test = as.list(xpathSApply(flyData, "//timeseries/csv_data", xmlValue))
data.table
require(data.table)
install(data.table)
install.packages("data.table")
library(data.table)
test = data.table(xpathSApply(flyData, "//timeseries/csv_data", xmlValue))
View(test)
test = as.data.table(xpathSApply(flyData, "//timeseries/csv_data", xmlValue))
View(sequence)
View(test)
test = as.numeric(xpathSApply(flyData, "//timeseries/csv_data", xmlValue))
test <- as.numeric(xpathSApply(flyData, "//timeseries/csv_data", xmlValue))
test <- as.data.frame(xpathSApply(flyData, "//timeseries/csv_data", xmlValue))
View(test)
test <- as.data.frame.character(xpathSApply(flyData, "//timeseries/csv_data", xmlValue))
View(test)
test <- as.data.frame.character(xpathSApply(flyData, "//timeseries/csv_data", xmlValue),col.names(a_pos,torque))
test <- as.data.frame.character(xpathSApply(flyData, "//timeseries/csv_data", xmlValue),col.names=(a_pos,torque))
test <- as.data.frame.character(xpathSApply(flyData, "//timeseries/csv_data", xmlValue),col.names=[[a_pos]][[torque]]))
test <- as.data.frame.character(xpathSApply(flyData, "//timeseries/csv_data", xmlValue),col.names=[a_pos;torque]))
test <- as.data.frame.character(xpathSApply(flyData, "//timeseries/csv_data", xmlValue),col.names=(a_pos;torque))
test <- as.data.table.character(xpathSApply(flyData, "//timeseries/csv_data", xmlValue))
View(rawdata)
View(test)
test <- as.data.frame.character(xpathSApply(flyData, "//timeseries/csv_data", xmlValue))
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/evaluate_DTS_project.R', echo=TRUE)
install.packages("ggplot")
install.packages("ggplot2")
source('B:/GitHub/DTSevaluations/evaluate_DTS_project.R', echo=TRUE)
library(ggplot2)
library(tidyr)
library(dygraphs)
install.packages("dygraphs")
library(dygraphs)
library(ggplot2)
install.packages("colorspace")
library(ggplot2)
library(grid)
library(reshape2)
library(dplyr)
library(gridExtra)
library(yaml)
library(ggsignif)
library(effsize)
library(pwr)
library(BayesFactor)
library(genefilter)
library(seewave)
install.packages("stringi")
library(ggplot2)
library(tidyr)
library(dygraphs)
library(grid)
library(reshape2)
library(dplyr)
library(gridExtra)
library(yaml)
library(ggsignif)
library(effsize)
library(pwr)
library(BayesFactor)
library(genefilter)
library(seewave)
source('B:/GitHub/DTSevaluations/evaluate_DTS_project.R', echo=TRUE)
install.packages("jsonlite")
library(ggplot2)
library(tidyr)
library(dygraphs)
library(grid)
library(reshape2)
library(dplyr)
library(gridExtra)
require("XML")
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/evaluate_DTS_project.R', echo=TRUE)
View(spectemp)
grouped.spectra[1]
grouped.spectra[2]
spectemp <- data.frame() #empty temporary spectra dataframe to be sure
for(x in 1:NofGroups){spectemp <- rbind(grouped.spectra[[x]])}
View(spectemp)
rbind(grouped.spectra)
do.call("rbind", grouped.spectra)
spectemp <- do.call("rbind", grouped.spectra) #create single data.frame from list of groups
View(spectemp)
ggplot(spectemp, aes(x=freq, y=mean), colour=group, fill=group) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2)
ggplot(spectemp, aes(x=freq, y=mean), colour=boxcolors, fill=boxcolors) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2)
ggplot(spectemp, aes(x=freq, y=mean, colour=boxcolors, fill=boxcolors)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2)
ggplot(spectemp, aes(x=freq, y=mean, colour=group, fill=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2)
ggplot(spectemp, aes(x=freq, y=mean, colour=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2)
ggplot(spectemp, aes(x=freq, y=mean, colour=as.numeric(group), fill=as.numeric(group))) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2)
ggplot(spectemp, aes(x=freq, y=mean, group=group, colour=group, fill=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2)
ggplot(spectemp, aes(x=freq, y=mean, group=group, colour=boxcolors, fill=boxcolors)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2)
ggplot(spectemp, aes(x=freq, y=mean, group=group, colour=group, fill=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2)
spectemp$group <- as.factor(spectemp$group)
ggplot(spectemp, aes(x=freq, y=mean, group=group, colour=group, fill=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2)
ggplot(spectemp, aes(x=freq, y=mean, group=group, colour=group, fill=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2) +
ggtitle("Powerspectra") +
theme_light(base_size = 16) + theme(panel.grid.major.x = element_blank(),panel.grid.minor = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=16))+ ylab("mean rel. Power")
ggplot(spectemp, aes(x=freq, y=mean, group=group, colour=group, fill=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2) +
ggtitle("Powerspectra") +
theme_light(base_size = 16) + theme(panel.grid.major.y = element_blank(),panel.grid.minor = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=16))+ ylab("mean rel. Power")
ggplot(spectemp, aes(x=freq, y=mean, group=group, colour=group, fill=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2) +
scale_x_continuous(breaks = seq(0, .002, .01)) +
ggtitle("Powerspectra") +
theme_light(base_size = 16) + theme(panel.grid.major.y = element_blank(),panel.grid.minor = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=16))+ ylab("mean rel. Power") + xlab("Frequency [Hz]")
ggplot(spectemp, aes(x=freq, y=mean, group=group, colour=group, fill=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2) +
scale_x_continuous(breaks = seq(0, 0.002, .01)) +
ggtitle("Powerspectra") +
theme_light(base_size = 16) + theme(panel.grid.major.y = element_blank(),panel.grid.minor = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=16))+ ylab("mean rel. Power") + xlab("Frequency [Hz]")
ggplot(spectemp, aes(x=freq, y=mean, group=group, colour=group, fill=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2) +
scale_x_continuous(breaks = seq(0, 0.002, 0.01)) +
ggtitle("Powerspectra") +
theme_light(base_size = 16) + theme(panel.grid.major.y = element_blank(),panel.grid.minor = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=16))+ ylab("mean rel. Power") + xlab("Frequency [Hz]")
ggplot(spectemp, aes(x=freq, y=mean, group=group, colour=group, fill=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2) +
scale_x_continuous(breaks = seq(0, 0.01, 0.002)) +
ggtitle("Powerspectra") +
theme_light(base_size = 16) + theme(panel.grid.major.y = element_blank(),panel.grid.minor = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=16))+ ylab("mean rel. Power") + xlab("Frequency [Hz]")
spectemp$freq <- spectemp$freq*1000
ggplot(spectemp, aes(x=freq, y=mean, group=group, colour=group, fill=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2) +
scale_x_continuous(breaks = seq(0, 10, 2), limits = c(0, 10)) +
ggtitle("Powerspectra") +
theme_light(base_size = 16) + theme(panel.grid.major.y = element_blank(),panel.grid.minor = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=16))+ ylab("mean rel. Power") + xlab("Frequency [Hz]")
ggplot(spectemp, aes(x=freq, y=mean, group=group, colour=group, fill=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2) +
scale_x_continuous(breaks = seq(0, 10, 2), limits = c(0, 10)) +
coord_cartesian(xlim = c(0, 10)) +
ggtitle("Powerspectra") +
theme_light(base_size = 16) + theme(panel.grid.major.y = element_blank(),panel.grid.minor = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=16))+ ylab("mean rel. Power") + xlab("Frequency [Hz]")
ggplot(spectemp, aes(x=freq, y=mean, group=group, colour=group, fill=group)) +
geom_line() +
geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), alpha=0.2) +
scale_x_continuous(breaks = seq(0, 10, 2), limits = c(0, 10)) +
ggtitle("Powerspectra") +
theme_light(base_size = 16) + theme(panel.grid.major.y = element_blank(),panel.grid.minor = element_blank(), panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) +
theme(axis.text.y = element_text(size=16))+ ylab("mean rel. Power") + xlab("Frequency [Hz]")
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/evaluate_DTS_project.R', echo=TRUE)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/evaluate_DTS_project.R', echo=TRUE)
setwd("B:/GitHub/DTSevaluations")
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/evaluate_DTS_project.R', echo=TRUE)
rep(paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(spectemp))),nrow(spectemp)
spectemp$group <- as.factor(rep(nrow(spectemp), paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(spectemp)))) #add grouping variable for later plotting
paste(project.data[["resources"]][[x]][["title"]], ", N=",nrow(spectemp))
spectemp$group <- as.factor(rep(paste(project.data[["resources"]][[x]][["title"]]), nrow(spectemp)))
View(spectemp)
setwd("B:/GitHub/DTSevaluations")
dev.off()
dev.off()
dev.off()
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/evaluate_DTS_project.R', echo=TRUE)
dev.off()
dev.off()
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/evaluate_DTS_project.R', echo=TRUE)
