View(id.frame)
FBids=apply(id.frame,1,paste,collapse=",") #create strings
FBids
FBids=sub(",$", "", FBids)  #remove trailing commas
FBids
FBids=gsub(",,",'',FBids)    #remove double commas
FBids
FBids=apply(id.frame,1,paste,collapse=",") #create strings
FBids
install.packages(c("arm", "av", "backports", "bit", "bit64", "broom", "callr", "car", "chron", "coda", "covr", "cowplot", "dabestr", "data.table", "DescTools", "devtools", "diffobj", "dplyr", "DT", "effsize", "expm", "fs", "ggforce", "ggplot2", "glue", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "labelled", "Lahman", "later", "lmtest", "lubridate", "magick", "maptools", "MASS", "mgcv", "multcomp", "mvtnorm", "nanotime", "nlme", "nloptr", "openssl", "openxlsx", "pbapply", "pillar", "pkgbuild", "pkgdown", "processx", "promises", "ps", "quantreg", "questionr", "R.methodsS3", "R.oo", "R.rsp", "R.utils", "raster", "Rcpp", "RcppCCTZ", "reactable", "reactR", "readr", "remotes", "rgdal", "rgeos", "rlang", "rmarkdown", "roxygen2", "RSQLite", "rvest", "sandwich", "sf", "shiny", "showtext", "stringi", "survival", "svglite", "sys", "systemfonts", "testit", "tibble", "tidyr", "tikzDevice", "tinytex", "TTAinterfaceTrendAnalysis", "TTR", "tufte", "units", "usethis", "vctrs", "vdiffr", "vioplot", "withr", "xfun", "XML", "xts", "zip"))
install.packages(c("diffobj", "ps", "questionr", "readr", "vdiffr"))
install.packages("questionr")
install.packages(c("diffobj", "MASS", "mgcv", "nlme", "ps", "questionr", "readr", "survival", "vdiffr"))
install.packages(c("diffobj", "ps", "readr", "vdiffr"))
install.packages(c("openxlsx", "quantreg", "rlang", "tibble"))
install.packages(c("openxlsx", "quantreg", "rlang", "tibble"))
rm(list=ls())                      #clean memory
gc()                               #collect garbage
if(!is.null(dev.list())) dev.off() #clear plots
install.packages(c("openxlsx", "quantreg", "rlang", "tibble"))
rm(list=ls())                      #clean memory
gc()                               #collect garbage
if(!is.null(dev.list())) dev.off() #clear plots
install.packages("rlang")
install.packages("tibble")
install.packages(c("openxlsx", "quantreg"))
install.packages("openxlsx")
rm(list=ls())                      #clean memory
gc()                               #collect garbage
if(!is.null(dev.list())) dev.off() #clear plots
install.packages("quantreg")
install.packages(c("openxlsx", "quantreg"))
install.packages(c("openxlsx", "quantreg"))
install.packages("ggiraph")
install.packages(c("backports", "cli", "codetools", "colorspace", "cpp11", "dbplyr", "downlit", "generics", "gh", "Hmisc", "isoband", "KernSmooth", "lme4", "lubridate", "magick", "magrittr", "multcomp", "openxlsx", "pillar", "processx", "profvis", "quantreg", "questionr", "R6", "raster", "RcppArmadillo", "rgl", "rlang", "rprojroot", "rstudioapi", "showtext", "sysfonts", "testthat", "textshaping", "tinytex", "tufte", "vctrs", "xfun"))
install.packages(c("colorspace", "isoband", "lme4", "rlang", "vctrs", "xfun"))
install.packages(c("colorspace", "isoband", "lme4", "rlang", "vctrs", "xfun"))
install.packages(c("colorspace", "isoband", "lme4", "rlang", "vctrs", "xfun"))
install.packages(c("backports", "colorspace", "data.table", "dplyr", "ellipsis", "glue", "janitor", "Matrix", "Rcpp", "rlang", "tibble", "vctrs"))
install.packages(c("backports", "data.table", "janitor", "Matrix", "rlang"))
install.packages(c("backports", "data.table", "Matrix", "rlang"))
install.packages(c("adehabitat","XML","lattice","hexbin",
"colorRamps" ,"corrplot","gplots", "rgl", "MASS", "adehabitatLT"), dependencies=TRUE)
install.packages(c("backports", "data.table", "Matrix", "rlang"))
shiny::runApp('B:/GitHub/CeTrAn/CeTrAn')
library(ade4)
install.packages("progress", dependencies = TRUE)
library(ade4)
install.packages("prettyunits", dependencies = TRUE)
library(ade4)
runApp('B:/GitHub/CeTrAn/CeTrAn')
install.packages(c("backports", "BH", "broom", "codetools", "colorspace", "cowplot", "crosstalk", "data.table", "DescTools", "diffobj", "DT", "foreign", "freetypeharfbuzz", "gdtools", "ggplot2", "ggrepel", "git2r", "gitcreds", "hexbin", "htmlwidgets", "hunspell", "isoband", "janitor", "jsonlite", "JuliaCall", "KernSmooth", "lme4", "Matrix", "nlme", "pbkrtest", "pkgbuild", "profmem", "ps", "quantmod", "quantreg", "RcppArmadillo", "RcppEigen", "rgdal", "rgl", "rlang", "rmarkdown", "RMySQL", "RSQLite", "sf", "showtext", "sp", "sysfonts", "testthat", "tinytex", "tseries", "tufte", "usethis", "vctrs", "xfun"))
install.packages("raincloudplots")
if (!require(remotes)) {
install.packages("remotes")
}
remotes::install_github('jorvlan/raincloudplots')
library(raincloudplots)
df_1x1 <- data_1x1(
array_1 = iris$Sepal.Length[1:50],
array_2 = iris$Sepal.Length[51:100],
jit_distance = .09,
jit_seed = 321)
View(df_1x1)
raincloud <- raincloud_1x1_repmes(
data = df_1x1,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud
df_1x1 <- data_1x1(
array_1 = iris$Sepal.Length[1:50],
array_2 = iris$Sepal.Length[51:100],
jit_distance = .19,
jit_seed = 321)
raincloud <- raincloud_1x1_repmes(
data = df_1x1,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud
source('B:/GitHub/DTSevaluations/evaluate_project.R', echo=TRUE)
View(PIprofile)
cloud.data <- data_1x1(
array_1 = PIprofile[PIprofile$period=PI2],
array_2 = PIprofile[PIprofile$period=PI8],
jit_distance = .09,
jit_seed = 321)
df_1x1 <- data_1x1(
array_1 = PIprofile$PIs[PIprofile$period=PI2],
array_2 = PIprofile$PIs[PIprofile$period=PI8],
jit_distance = .09,
jit_seed = 321)
PIprofile$PIs[PIprofile$period=PI2]
PIprofile$PIs[PIprofile$period==PI2]
PIprofile$PIs[PIprofile$period=="PI2"]
df_1x1 <- data_1x1(
array_1 = PIprofile$PIs[PIprofile$period=="PI2"],
array_2 = PIprofile$PIs[PIprofile$period=="PI8=],
jit_distance = .09,
jit_seed = 321)
)
;
)
))
}
xz
""
=
df_1x1 <- data_1x1(
array_1 = PIprofile$PIs[PIprofile$period=="PI2"],
array_2 = PIprofile$PIs[PIprofile$period=="PI8"],
jit_distance = .09,
jit_seed = 321)
View(df_1x1)
raincloud_1_h <- raincloud_1x1(
data = df_1x1,
colors = (c('dodgerblue','darkorange')),
fills = (c('dodgerblue','darkorange')),
size = 1,
alpha = .6,
ort = 'h') +
scale_x_continuous(breaks=c(1,2), labels=c("Group1", "Group2"), limits=c(0, 3)) +
xlab("Groups") +
ylab("Score") +
theme_classic()
raincloud_1_h
raincloud_2 <- raincloud_1x1_repmes(
data = df_1x1,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
PIprofile <- grouped.PIcombined[[1]]
df_1x1 <- data_1x1(
array_1 = PIprofile$PIs[PIprofile$period=="PI2"],
array_2 = PIprofile$PIs[PIprofile$period=="PI8"],
jit_distance = .09,
jit_seed = 321)
raincloud_2 <- raincloud_1x1_repmes(
data = df_1x1,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
df_1x1 <- data_1x1(
array_1 = PIprofile$PIs[PIprofile$period=="PI1"],
array_2 = PIprofile$PIs[PIprofile$period=="PI8"],
jit_distance = .09,
jit_seed = 321)
raincloud_2 <- raincloud_1x1_repmes(
data = df_1x1,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
df_1x1 <- data_1x1(
array_1 = PIprofile$PIs[PIprofile$period=="PI1"],
array_2 = PIprofile$PIs[PIprofile$period=="PI7"],
jit_distance = .09,
jit_seed = 321)
raincloud_2 <- raincloud_1x1_repmes(
data = df_1x1,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
df_1x1 <- data_1x1(
array_1 = PIprofile$PIs[PIprofile$period=="PI2"],
array_2 = PIprofile$PIs[PIprofile$period=="PI3"],
jit_distance = .09,
jit_seed = 321)
raincloud_2 <- raincloud_1x1_repmes(
data = df_1x1,
colors = (c('dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange')),
line_color = 'gray',
line_alpha = .3,
size = 1,
alpha = .6,
align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2
PIstat
PIstatCombined
PIs_present & twogroupstats
PItemp <- list()
for(x in 1:NofGroups){
PItemp[[x]] <- grouped.PIprofiles[[x]]                                          #extract the PIs into a temproary list
}
PItemp <- as.data.frame(t(plyr::ldply(PItemp, rbind)))                            #convert PI list to a temproary data.frame
colnames(PItemp) <- unlist(sapply(project.data[["resources"]], '[', 'name'))      #add group names as column names to PItemp
View(PItemp)
PItemp <- list()
for(x in 1:NofGroups){
PItemp[[x]] <- grouped.PIprofiles[[x]]                                          #extract the PIs into a temproary list
}
View(exp_groups)
View(experiment)
View(experimenter)
View(old.par)
View(pb)
View(period.data)
View(periods)
View(sequence)
which(sequence$type=="color")
which(sequence$type=="color" & sequence$outcome=="0")
split(which(sequence$type=="color" & sequence$outcome=="0"), cumsum(c(1, diff(dat) != 1)))
split(which(sequence$type=="color" & sequence$outcome=="0"), cumsum(c(1, diff(which(sequence$type=="color" & sequence$outcome=="0")) != 1)))
split(which(sequence$type=="color" & sequence$outcome=="0"), cumsum(c(1, diff(which(sequence$type=="color" & sequence$outcome=="0")) != 1)))[1]
which(sequence$type==("color"|"fs"|"yt"|"sw") & sequence$outcome=="0")
which(sequence$type==("color"|"fs"|"yt"|"sw"))
sequence$type==(any(c("color","fs","yt","sw"))
)
c("color","fs","yt","sw")
which(sequence$type==(any(c("color","fs","yt","sw"))) & sequence$outcome=="0")
match(sequence$type, c("color","fs","yt","sw")
)
which(c("color","fs","yt","sw") %in% sequence$type)
which(match(c("color","fs","yt","sw"), sequence$type))
which(sequence$type=="color" & sequence$outcome=="0")
which((sequence$type=="color" | sequence$type=="fs" | sequence$type=="yt" | sequence$type=="sw") & sequence$outcome=="0")
testperiods=which((sequence$type=="color" | sequence$type=="fs" | sequence$type=="yt" | sequence$type=="sw") & sequence$outcome=="0") #vector containing all testperiods
split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[1]
prestestperiods=split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[1]
as.vector(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[1])
pretestperiods=split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[1]
as.vector(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[1])
pretestperiods=as.vector(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[1])
unlist(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[1])
pretestperiods=unlist(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[1])
as.vector(unlist(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[1]))
pretestperiods=as.vector(unlist(split(testperiods, cumsum(c(1, diff(testperiods) != 1)))[1]))
PItemp <- list()
for(x in 1:NofGroups){
PItemp[[x]] <- grouped.PIprofiles[[x]][pretestperiods]                                          #extract the PIs into a temproary list
}
View(PItemp)
PItemp <- as.data.frame(t(plyr::ldply(PItemp, rbind)))
View(PItemp)
PItemp <- list()
for(x in 1:NofGroups){
PItemp[[x]] <- grouped.PIprofiles[[x]][pretestperiods]                                          #extract the PIs into a temproary list
}
as.data.frame(plyr::ldply(PItemp, rbind))
unlist(sapply(project.data[["resources"]], '[', 'name'))
PItemp <- list()
for(x in 1:NofGroups){
PItemp[[x]] <- grouped.PIprofiles[[x]][pretestperiods]                                          #extract the PIs into a temproary list
}
as.data.frame(t(plyr::ldply(PItemp, rbind)))
rowMeans(PItemp[[x]])
colMeans(PItemp[[x]])
for(x in 1:NofGroups){
PItemp[[x]] <- grouped.PIprofiles[[x]][pretestperiods]     #extract the PIs into a temproary list
meanpretest=colMeans(PItemp[[x]])
}
meanpretest
PItemp <- list()
for(x in 1:NofGroups){
PItemp[[x]] <- grouped.PIprofiles[[x]][pretestperiods]     #extract the PIs into a temproary list
meanpretest[x]=rowMeans(PItemp[[x]])
}
meanpretest[1]
meanpretest[2]
rowMeans(PItemp[[1]])
rowMeans(PItemp[[2]])
rowMeans(PItemp[[x]])
PItemp <- list()
for(x in 1:NofGroups){
PItemp[[x]] <- grouped.PIprofiles[[x]][pretestperiods]     #extract the PIs into a temproary list
meanpretest[x]=rowMeans(PItemp[[x]])
}
meanpretest
PItemp <- list()
for(x in 1:NofGroups){
PItemp[[x]] <- grouped.PIprofiles[[x]][pretestperiods]     #extract the PIs into a temproary list
meanpretest[x]=as.vector(rowMeans(PItemp[[x]]))
}
meanpretest
meanpretest[1]
rowMeans(PItemp[[x]])
PItemp <- list()
for(x in 1:NofGroups){
PItemp[[x]] <- grouped.PIprofiles[[x]][pretestperiods]     #extract the PIs into a temproary list
PItemp[[x]] <- rowMeans(PItemp[[x]])
}
PItemp
PItemp <- as.data.frame(t(plyr::ldply(PItemp, rbind)))
View(PItemp)
pretestPIs <- list()
for(x in 1:NofGroups){
pretestPIs[[x]] <- grouped.PIprofiles[[x]][pretestperiods]     #extract the PIs into a temproary list
pretestPIs[[x]] <- rowMeans(pretestPIs[[x]])
}
pretestPIs <- as.data.frame(t(plyr::ldply(pretestPIs, rbind)))                    #convert PI list to a temproary data.frame
colnames(pretestPIs) <- unlist(sapply(project.data[["resources"]], '[', 'name'))  #add group names as column names to PItemp
View(pretestPIs)
melt(pretestPIs, measure.vars = names(pretestPIs), variable.name = "group", value.name = "category")
pretestPIs <- list()
for(x in 1:NofGroups){
pretestPIs[[x]] <- grouped.PIprofiles[[x]][pretestperiods]     #extract the PIs into a temproary list
pretestPIs[[x]] <- rowMeans(pretestPIs[[x]])
}
pretestPIs <- as.data.frame(t(plyr::ldply(pretestPIs, rbind)))                    #convert PI list to a temproary data.frame
colnames(pretestPIs) <- unlist(sapply(project.data[["resources"]], '[', 'name'))  #add group names as column names to PItemp
pretestPIs <- melt(pretestPIs, measure.vars = names(pretestPIs), variable.name = "group", value.name = "category") #melt categories into dataframe with group as id-variable
pretestPIs = na.omit(pretestPIs)
View(pretestPIs)
View(PIstatCombined)
View(pretestPIs)
View(PIstatCombined)
df_2x2_spread <- data_2x2(
array_1 = pretestPIs[pretestPIs$group==groupnames[1]],
array_2 = iris$Sepal.Length[51:100],
array_3 = iris$Sepal.Length[101:150],
array_4 = iris$Sepal.Length[81:130],
labels = (c('congruent','incongruent')),
jit_distance = .09,
jit_seed = 321,
spread_x_ticks = TRUE)
pretestPIs[pretestPIs$group==groupnames[1]]
pretestPIs[pretestPIs$group(groupnames[1])]
pretestPIs$category[pretestPIs$group[groupnames[1]]]
groupnames[1]
pretestPIs$group[groupnames[1]]
pretestPIs$category[pretestPIs$group=groupnames[1]]
pretestPIs$category[pretestPIs$group="WTB"]
pretestPIs$category[pretestPIs$group=="WTB"]
pretestPIs$category[pretestPIs$group==groupnames[1]]
df_2x2_spread <- data_2x2(
array_1 = pretestPIs$category[pretestPIs$group==groupnames[1]],
array_2 = pretestPIs$category[pretestPIs$group==groupnames[2]],
array_3 = PIstatCombined$learningscore[PIstatCombined$group==groupnames[1]],
array_4 = PIstatCombined$learningscore[PIstatCombined$group==groupnames[1]],
labels = (c('congruent','incongruent')),
jit_distance = .09,
jit_seed = 321,
spread_x_ticks = TRUE)
pretestPIs$category[pretestPIs$group==groupnames[1]]
pretestPIs$category[pretestPIs$group==groupnames[2]]
PIstatCombined$learningscore[PIstatCombined$group==groupnames[1]]
PIstatCombined$PIs[PIstatCombined$group==groupnames[1]]
PIstatCombined$PIs[PIstatCombined$group==groupnames[2]]
df_2x2_spread <- data_2x2(
array_1 = pretestPIs$category[pretestPIs$group==groupnames[1]],
array_2 = pretestPIs$category[pretestPIs$group==groupnames[2]],
array_3 = PIstatCombined$PIs[PIstatCombined$group==groupnames[1]],
array_4 = PIstatCombined$PIs[PIstatCombined$group==groupnames[2]],
labels = (c('congruent','incongruent')),
jit_distance = .09,
jit_seed = 321,
spread_x_ticks = TRUE)
df_2x2_spread <- data_2x2(
array_1 = pretestPIs$category[pretestPIs$group==groupnames[1]],
array_2 = PIstatCombined$PIs[PIstatCombined$group==groupnames[1]],
array_3 = pretestPIs$category[pretestPIs$group==groupnames[2]],
array_4 = PIstatCombined$PIs[PIstatCombined$group==groupnames[2]],
labels = (c('congruent','incongruent')),
jit_distance = .09,
jit_seed = 321,
spread_x_ticks = TRUE)
PIstat <- list()
CatStat <- list()
for(x in 1:NofGroups){
PIstat[[x]] <- grouped.PIprofiles[[x]][[learningscore]]
CatStat[[x]] <- grouped.Categories[[x]][[learningscore]]
}
PIstat <- as.data.frame(t(plyr::ldply(PIstat, rbind)))                            #convert PI list to data.frame
colnames(PIstat) <- unlist(sapply(project.data[["resources"]], '[', 'name'))      #add group names as column names to PIstat
CatStat <-  as.data.frame(t(plyr::ldply(CatStat, rbind)))                         #convert list of categories to data.frame
colnames(CatStat) <- unlist(sapply(project.data[["resources"]], '[', 'name'))     #add group names as column names to CatStat
#compute standard deviations
SDs<-as.numeric(apply(PIstat, 2, function(x) sd(na.omit(x))))
#combine PIstat and CatStat for plotting learningscores
PIstatCombined <- melt(CatStat, measure.vars = names(CatStat), variable.name = "group", value.name = "category") #melt categories into dataframe with group as id-variable
PIstatCombined["PIs"] = melt(PIstat)$value                                        #combine the categories with the PIs
PIstat.rcp = PIstatCombined                                                       #save values with NAs for raincloudplots
PIstatCombined = na.omit(PIstatCombined)                                          #delete NA rows
}
PIstat <- list()
CatStat <- list()
for(x in 1:NofGroups){
PIstat[[x]] <- grouped.PIprofiles[[x]][[learningscore]]
CatStat[[x]] <- grouped.Categories[[x]][[learningscore]]
}
PIstat <- as.data.frame(t(plyr::ldply(PIstat, rbind)))                            #convert PI list to data.frame
colnames(PIstat) <- unlist(sapply(project.data[["resources"]], '[', 'name'))      #add group names as column names to PIstat
CatStat <-  as.data.frame(t(plyr::ldply(CatStat, rbind)))                         #convert list of categories to data.frame
colnames(CatStat) <- unlist(sapply(project.data[["resources"]], '[', 'name'))     #add group names as column names to CatStat
#compute standard deviations
SDs<-as.numeric(apply(PIstat, 2, function(x) sd(na.omit(x))))
#combine PIstat and CatStat for plotting learningscores
PIstatCombined <- melt(CatStat, measure.vars = names(CatStat), variable.name = "group", value.name = "category") #melt categories into dataframe with group as id-variable
PIstatCombined["PIs"] = melt(PIstat)$value                                        #combine the categories with the PIs
PIstat.rcp = PIstatCombined                                                       #save values with NAs for raincloudplots
PIstatCombined = na.omit(PIstatCombined)
pretestPIs <- list()
for(x in 1:NofGroups){
pretestPIs[[x]] <- grouped.PIprofiles[[x]][pretestperiods]     #extract the PIs into a temproary list
pretestPIs[[x]] <- rowMeans(pretestPIs[[x]])
}
pretestPIs <- as.data.frame(t(plyr::ldply(pretestPIs, rbind)))                    #convert PI list to a temproary data.frame
colnames(pretestPIs) <- unlist(sapply(project.data[["resources"]], '[', 'name'))  #add group names as column names to PItemp
pretestPIs <- melt(pretestPIs, measure.vars = names(pretestPIs), variable.name = "group", value.name = "category") #melt categories into dataframe with group as id-variable
View(pretestPIs)
View(PIstat.rcp)
df_2x2_spread <- data_2x2(
array_1 = pretestPIs$category[pretestPIs$group==groupnames[1]],
array_2 = pretestPIs$category[pretestPIs$group==groupnames[2]],
array_3 = PIstat.rcp$PIs[PIstat.rcp$group==groupnames[1]],
array_4 = PIstat.rcp$PIs[PIstat.rcp$group==groupnames[2]],
labels = (c('congruent','incongruent')),
jit_distance = .09,
jit_seed = 321,
spread_x_ticks = TRUE)
raincloud_2x2 <- raincloud_2x2_repmes(
data = df_2x2,
colors = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
size = 1,
alpha = .6,
spread_x_ticks = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2x2
df_2x2 <- data_2x2(
array_1 = pretestPIs$category[pretestPIs$group==groupnames[1]],
array_2 = pretestPIs$category[pretestPIs$group==groupnames[2]],
array_3 = PIstat.rcp$PIs[PIstat.rcp$group==groupnames[1]],
array_4 = PIstat.rcp$PIs[PIstat.rcp$group==groupnames[2]],
labels = (c('congruent','incongruent')),
jit_distance = .09,
jit_seed = 321,
spread_x_ticks = FALSE)
raincloud_2x2 <- raincloud_2x2_repmes(
data = df_2x2,
colors = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
size = 1,
alpha = .6,
spread_x_ticks = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2x2
raincloud_2x2 <- raincloud_2x2_repmes(
data = na.omit(df_2x2),
colors = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
fills = (c('dodgerblue', 'darkorange', 'dodgerblue', 'darkorange')),
size = 1,
alpha = .6,
spread_x_ticks = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre", "Post"), limits=c(0, 3)) +
xlab("Time") +
ylab("Score") +
theme_classic()
raincloud_2x2
