paste('<a href="', xml_name, '">', flyname, '</a>')
basename(xml_name)
paste('<a href="../', basename(xml_name), '">', flyname, '</a>')
paste('<a href="../', basename(xml_name), '">', flyname, '</a>', sep = "")
paste('<a href="../', basename(xml_name), '">', flyname, '</a>', sep = "")
paste('<a href="../', basename(project.file), '">', project.data$title, '</a>', sep = "")
load("B:/GitHub/DTSevaluations/example data/t-learn/evaluations/.RData")
View(tempOMdata)
View(rightOMdata)
View(tempOMdata)
View(tempOMdata)
xy
knitr::opts_chunk$set(echo = TRUE)
xy <-sortedXyData(x1,y)
plot(xy)
View(xy)
typeof(xy)
right
NLSstAsymptotic(xy)
exp(-1000)
left<-tryCatch(                                             #extract the left turning coefficients into a vector. Set vector to zero for errors
expr = {
left<-NLSstAsymptotic(xy)
return(left)
},
error = function(e){
left=c(b0=0, b1=0, lrc=-1000)         #set logarithmic rate constant to -1000 so exp(lrc)=0
return(left)
},
warning = function(w){
left=c(b0=0, b1=0, lrc=-1000)         #set logarithmic rate constant to -1000 so exp(lrc)=0
return(left)
},
finally = {}
)
View(grouped.OMdata)
View(plotOM)
View(project.data)
knitr::opts_chunk$set(echo = TRUE)
lm(x1 ~ y, data = xy)
plot(xy)
tem = lm(x1 ~ y, data = xy)
summary(tem)
plot(tem)
xyplot(tem)
abline(tem)
abline(tem)
plot(xy)
abline(tem)
tem = lm(y ~ x, data = xy)
plot(xy)
abline(tem)
summary(tem)
View(tem)
tem$coefficients
tem$coefficients[2]
tem$coefficients[2]<0.1
xml_name
xml_name=B:/GitHub/DTSevaluations/example data/t-learn/wtb-03.xml
xml_name="B:/GitHub/DTSevaluations/example data/t-learn/wtb-03.xml"
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
##parse the metadata
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##reset position data to +/-180° [-1800..1796] for torquemeter experiments
if (project.data$experiment$type=="Torquemeter"){
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
}
##change j_pos data from float to integer and shift to make approx. zero symmetric (needs work!)
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)+1100
}
##change a_pos data from float to integer in Joystick experiments
if(experiment$meter_type=="Joystick"){
rawdata$a_pos = round(rawdata$a_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
##calculate actual sampling rate and downsample if necessary
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
rawdata$group_num <- 50*round(rawdata$time/50) # Create 50ms bins
rawdata$weight <- 1/(1+abs(rawdata$time-rawdata$group_num)) # calculate distance from measurement point
rawdata$norm <-ave(rawdata$weight,rawdata$group_num,FUN=function(x) x/sum(x)) #apply weights according to distance from bin center
rawdata$fly2 <- rawdata$fly*rawdata$norm
rawdata$a_pos2 <- rawdata$a_pos*rawdata$norm #needs more work because of values at +/-180°!!!
rawdata$period2 <- rawdata$period*rawdata$norm
# create the vectors in which to save the downsampled data
timeDownsampled <- as.vector(unique(rawdata$group_num))
a_posDownsampled <- as.vector(round(tapply(rawdata$a_pos2, rawdata$group_num, sum)))
flyDownsampled <- as.vector(round(tapply(rawdata$fly2, rawdata$group_num, sum)))
periodDownsampled <- as.vector(round(tapply(rawdata$period2, rawdata$group_num, sum)))
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
### check the dataframe for consistency
if (length(table(rawdataDown$period)) > NofPeriods) {rawdataDown<-rawdataDown[!(rawdataDown$period==length(table(rawdataDown$period))),]} #remove any extra period numbers, if they exist
# check if there are periods which deviate from projected duration
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
if(any(abs(as.numeric(difference$deviation))>1)) stop("Number of data points does not match expectations. Check DTS Rawdata!") #check if there is more than one missing/additional data point
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
#mark the last data pont of each offending period (assuming we're only one data point off!)
if (length(diff_periods)!=0){
rawdataDown$last = NA
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, diff_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 1, x))) # "1" marking the last data püoint in an offending period
#mark the last data points of periods with missing data points
if (length(rownames(difference)[difference$deviation==-1])!=0){ #if there are periods with too few data points, duplicate the last
negative_periods=rownames(difference)[difference$deviation==-1] #find the periods with missing values
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, negative_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 2, x))) # "2" marking the last data püoint in an offending period
copy = as.vector(rawdataDown[is.element(rawdataDown$last, 2),])
copy$last=NA
for (z in 1:length(negative_periods)) {
temp.pos=as.numeric(rownames(copy[z,])) #find the right position to insert
next.pos=temp.pos+1                     #for some reason, R also wants to have the next position as a variable
rawdataDown <- rbind(rawdataDown[1:temp.pos,], copy[z,], rawdataDown[next.pos:nrow(rawdataDown),]) # duplicate the last data point in the offending periods
}
}
rawdataDown <- rawdataDown[!(grepl(1, rawdataDown$last)),] # delete last data point of the offending periods
rawdataDown$last <- NULL #delete the unnecessary 'last' column
rawdataDown$time = seq(0, (as.numeric(as.character(experiment$duration))*1000)-50, by=50) # fix the mangled time column
row.names(rawdataDown) <- 1:nrow(rawdataDown) #fix rownames, too
}
rawdata=rawdataDown
rightOMperiods=which(grepl("optomotorR", sequence$type)) #collect the right turning OM periods
rightOMdata<-filter(rawdata, rawdata$period %in% rightOMperiods) #extract only right turning arena periods
rightOMdata <- rightOMdata %>% select(-c(a_pos,date)) #drop unnecessary columns
library(ggplot2)
library(tidyr)
library(dygraphs)
library(grid)
library(reshape2)
library(dplyr)
library(gridExtra)
library(yaml)
library(ggsignif)
library(effsize)
library(pwr)
library(BayesFactor)
library(genefilter)  # if not available for newest version: setRepositories(addURLs = c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
library(seewave)
## source the script with the functions needed for analysis
source("readXMLdatafile.R")
source("DTS_plotfunctions.R")
rightOMperiods=which(grepl("optomotorR", sequence$type)) #collect the right turning OM periods
rightOMdata<-filter(rawdata, rawdata$period %in% rightOMperiods) #extract only right turning arena periods
rightOMdata <- rightOMdata %>% select(-c(a_pos,date)) #drop unnecessary columns
rightOMdata <- rightOMdata %>% select(-c(a_pos)) #drop unnecessary columns
rightOMdata$time=ave(rightOMdata$period, rightOMdata$period, FUN=seq_along) #match the time values to start at each period start
rightOMdata$time=(rightOMdata$time-1)*50 #make 20Hz data into ms time scale
rightOMdata$period=as.factor(rightOMdata$period)
ggplot(data = rightOMdata, aes(x=time, y=fly)) +
geom_line(aes(group=period, colour=period), size=1) +
geom_smooth(method="loess", span = 0.1) +
ylab("Optomotor Resoponse [rel. units]")+
xlab("Time [ms]") +
ggtitle(paste("Right (clockwise) arena rotations -", flyname))
xml_name
View(rawdataDown)
View(rawdata)
View(rawdataDown)
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##reset position data to +/-180° [-1800..1796] for torquemeter experiments
if (project.data$experiment$type=="Torquemeter"){
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
}
##change j_pos data from float to integer and shift to make approx. zero symmetric (needs work!)
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)+1100
}
##change a_pos data from float to integer in Joystick experiments
if(experiment$meter_type=="Joystick"){
rawdata$a_pos = round(rawdata$a_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
##calculate actual sampling rate and downsample if necessary
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
rawdata$group_num <- 50*round(rawdata$time/50) # Create 50ms bins
rawdata$weight <- 1/(1+abs(rawdata$time-rawdata$group_num)) # calculate distance from measurement point
rawdata$norm <-ave(rawdata$weight,rawdata$group_num,FUN=function(x) x/sum(x)) #apply weights according to distance from bin center
rawdata$fly2 <- rawdata$fly*rawdata$norm
rawdata$a_pos2 <- rawdata$a_pos*rawdata$norm #needs more work because of values at +/-180°!!!
rawdata$period2 <- rawdata$period*rawdata$norm
# create the vectors in which to save the downsampled data
timeDownsampled <- as.vector(unique(rawdata$group_num))
a_posDownsampled <- as.vector(round(tapply(rawdata$a_pos2, rawdata$group_num, sum)))
flyDownsampled <- as.vector(round(tapply(rawdata$fly2, rawdata$group_num, sum)))
periodDownsampled <- as.vector(round(tapply(rawdata$period2, rawdata$group_num, sum)))
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
### check the dataframe for consistency
if (length(table(rawdataDown$period)) > NofPeriods) {rawdataDown<-rawdataDown[!(rawdataDown$period==length(table(rawdataDown$period))),]} #remove any extra period numbers, if they exist
# check if there are periods which deviate from projected duration
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
if(any(abs(as.numeric(difference$deviation))>1)) stop("Number of data points does not match expectations. Check DTS Rawdata!") #check if there is more than one missing/additional data point
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
#mark the last data pont of each offending period (assuming we're only one data point off!)
if (length(diff_periods)!=0){
rawdataDown$last = NA
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, diff_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 1, x))) # "1" marking the last data püoint in an offending period
#mark the last data points of periods with missing data points
if (length(rownames(difference)[difference$deviation==-1])!=0){ #if there are periods with too few data points, duplicate the last
negative_periods=rownames(difference)[difference$deviation==-1] #find the periods with missing values
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, negative_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 2, x))) # "2" marking the last data püoint in an offending period
copy = as.vector(rawdataDown[is.element(rawdataDown$last, 2),])
copy$last=NA
for (z in 1:length(negative_periods)) {
temp.pos=as.numeric(rownames(copy[z,])) #find the right position to insert
next.pos=temp.pos+1                     #for some reason, R also wants to have the next position as a variable
rawdataDown <- rbind(rawdataDown[1:temp.pos,], copy[z,], rawdataDown[next.pos:nrow(rawdataDown),]) # duplicate the last data point in the offending periods
}
}
rawdataDown <- rawdataDown[!(grepl(1, rawdataDown$last)),] # delete last data point of the offending periods
rawdataDown$last <- NULL #delete the unnecessary 'last' column
rawdataDown$time = seq(0, (as.numeric(as.character(experiment$duration))*1000)-50, by=50) # fix the mangled time column
row.names(rawdataDown) <- 1:nrow(rawdataDown) #fix rownames, too
}
View(rawdataDown)
View(rawdata)
View(rawdataDown)
rawdata=rawdataDown
rightOMperiods=which(grepl("optomotorR", sequence$type)) #collect the right turning OM periods
rightOMdata<-filter(rawdata, rawdata$period %in% rightOMperiods) #extract only right turning arena periods
rightOMdata <- rightOMdata %>% select(-c(a_pos)) #drop unnecessary columns
leftOMdata$time=ave(leftOMdata$period, leftOMdata$period, FUN=seq_along) #match the time values to start at each period start
leftOMdata$time=((leftOMdata$time)*50)+max(rightOMdata$time) #make 20Hz data into ms time scale, starting after right turning data
leftOMdata$period=as.factor(leftOMdata$period)
ggplot(data = leftOMdata, aes(x=time, y=fly)) +
geom_line(aes(group=period, colour=period), size=1) +
geom_smooth(method="loess", span = 0.1) +
ylab("Optomotor Resoponse [rel. units]")+
xlab("Time [ms]") +
ggtitle(paste("Left (counter-clockwise) arena rotations -", flyname))
rightOMdata$time=ave(rightOMdata$period, rightOMdata$period, FUN=seq_along) #match the time values to start at each period start
rightOMdata$time=(rightOMdata$time-1)*50 #make 20Hz data into ms time scale
rightOMdata$period=as.factor(rightOMdata$period)
ggplot(data = rightOMdata, aes(x=time, y=fly)) +
geom_line(aes(group=period, colour=period), size=1) +
geom_smooth(method="loess", span = 0.1) +
ylab("Optomotor Resoponse [rel. units]")+
xlab("Time [ms]") +
ggtitle(paste("Right (clockwise) arena rotations -", flyname))
leftOMperiods=which(grepl("optomotorL", sequence$type)) #collect the left turning OM periods
leftOMdata<-filter(rawdata, rawdata$period %in% leftOMperiods)  #extract only left turning arena periods
leftOMdata <- leftOMdata %>% select(-c(a_pos))  #drop unnecessary columns
leftOMdata$time=ave(leftOMdata$period, leftOMdata$period, FUN=seq_along) #match the time values to start at each period start
leftOMdata$time=((leftOMdata$time)*50)+max(rightOMdata$time) #make 20Hz data into ms time scale, starting after right turning data
leftOMdata$period=as.factor(leftOMdata$period)
ggplot(data = leftOMdata, aes(x=time, y=fly)) +
geom_line(aes(group=period, colour=period), size=1) +
geom_smooth(method="loess", span = 0.1) +
ylab("Optomotor Resoponse [rel. units]")+
xlab("Time [ms]") +
ggtitle(paste("Left (counter-clockwise) arena rotations -", flyname))
tempOMdata=rbind(rightOMdata,leftOMdata) #combine left and right OMdata in one dataframe
tempOMdata=aggregate(tempOMdata$fly,FUN=mean,by=list(tempOMdata$time)) #average across periods
colnames(tempOMdata) <- c("time", as.character(flyname)) #set dataframe names
ggplot(data=OMdata, aes(x=OMdata$time, y=OMdata[[as.character(flyname)]])) +
geom_line() +
ylab("Optomotor Resoponse [rel. units]")+
xlab("Time [ms]")
OMdata=tempOMdata
ggplot(data=OMdata, aes(x=OMdata$time, y=OMdata[[as.character(flyname)]])) +
geom_line() +
ylab("Optomotor Resoponse [rel. units]")+
xlab("Time [ms]")
OMmidpoint = OMdata$time[nrow(OMdata)]/2
#right turning traces
x1=OMdata$time[OMdata$time<=OMmidpoint]                     #time
y=OMdata[[as.character(flyname)]][OMdata$time<=OMmidpoint]  #mean right OM response normalized to positive values
xy <-sortedXyData(x1,y)                                     #create sortedXYdata object
LinMod = lm(x1 ~ y, data = xy)
summary(LinMod)
LinMod = lm(y ~ x1, data = xy)
summary(LinMod)
plot(xy)
abline(LinMod)
LinMod$coefficients[2]
load("B:/GitHub/DTSevaluations/example data/t-learn/evaluations/.RData")
LinMod = lm(y ~ x1, data = xy)
LinMod$coefficients[2]
x1=OMdata$time[OMdata$time<=OMmidpoint]                     #time
y=OMdata[[as.character(flyname)]][OMdata$time<=OMmidpoint]  #mean right OM response normalized to positive values
xy <-sortedXyData(x1,y)                                     #create sortedXYdata object
LinMod = lm(y ~ x1, data = xy)
LinMod$coefficients[2]
load("B:/GitHub/DTSevaluations/example data/t-learn/evaluations/.RData")
OMmidpoint = OMdata$time[nrow(OMdata)]/2
OMdata=tempOMdata
OMmidpoint = OMdata$time[nrow(OMdata)]/2
#right turning traces
x1=OMdata$time[OMdata$time<=OMmidpoint]                     #time
y=OMdata[[as.character(flyname)]][OMdata$time<=OMmidpoint]  #mean right OM response normalized to positive values
xy <-sortedXyData(x1,y)                                     #create sortedXYdata object
LinMod = lm(y ~ x1, data = xy)
LinMod$coefficients[2]
mean(x1)
plot(xy)
mean(xy$x)
as.numeric(mean(xy$x))
mean(y)
View(plotOMparams)
View(plotOMparams)
load("B:/GitHub/DTSevaluations/example data/OM_joystick/evaluations/.RData")
View(tempOMparams)
View(tempOMparams)
load("B:/GitHub/DTSevaluations/example data/t-learn/evaluations/.RData")
View(plotOMparams)
View(plotOMparams)
load("B:/GitHub/DTSevaluations/.RData")
View(plotOMparams)
View(plotOMparams)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
pooled.data<-list()
for(i in 1:NofPeriods)
{
period.data<-data.frame()
for (l in 1:length(xml_list))
{
period.data <- rbind(period.data, grouped.data[[l]][[i]])
}
pooled.data[[i]] <- period.data
} #for number of periods
for(i in 1:NofPeriods)
{
temp<-pooled.data[[i]]
#fly
flyhistos[[i]] <- ggplot(data=temp, aes_string(temp$fly)) +
geom_histogram(binwidth = 3, fill = sequence$histocolor[i]) +
labs(x="torque [arb units]", y="frequency") +
xlim(maxfly) +
ggtitle(paste("Period", i))
#position
if(sequence$type[i]=="fs" || sequence$type[i]=="color")
{
poshistos[[i]] <- ggplot(data=temp, aes_string(temp$a_pos)) +
geom_histogram(binwidth=10, fill = sequence$histocolor[i]) +
labs(x="arena position [arb units]", y="frequency") +
xlim(-1800,1800) +
ggtitle(paste("Period", i))
}
}
all.data <- do.call(rbind, pooled.data)
flyhistos[[NofPeriods+1]] <- ggplot(data=all.data, aes_string(all.data$fly)) +
geom_histogram(binwidth=3) +
labs(x="torque [arb units]", y="frequency") +
xlim(maxfly) +
ggtitle("Pooled Torque Histogram")
if ('fs' %in% sequence$type) {
poshistos[[NofPeriods+1]] <- ggplot(data=all.data, aes_string(all.data$a_pos)) +
geom_histogram(binwidth=10) +
labs(x="position [arb units]", y="frequency") +
xlim(-1800,1800) +
ggtitle("Pooled Position Histogram")
}
grouped.periods[[x]] = periods
#fly Histograms
grouped.flyhistos[[x]] = flyhistos #add fly histograms to list of grouped histograms
flyhistos <- list() #empty fly histograms
#Position Histograms
grouped.poshistos[[x]] = poshistos #add position histograms to list of grouped position histograms
poshistos <- list() #empty list of position histograms
#PI data
colnames(PIprofile) <- sprintf("PI%d", 1:NofPeriods) #make colnames in PIprofile
grouped.PIprofiles[[x]] = PIprofile #add PIprofile to list of grouped PIs
PIprofile <- PIprofile[0,] #empty PIprofile
View(PIprofile)
View(sequence)
knitr::opts_chunk$set(echo = TRUE)
PIprofile[1,i]=sequence$lambda[i]
for(i in 1:NofPeriods){
#save colors for later plotting
if(sequence$outcome[i]==0){
sequence$color[i]="lightyellow"
sequence$histocolor[i]="darkgreen"
} else {
sequence$color[i]="orange"
sequence$histocolor[i]="orange"
}
if(sequence$contingency[i]==""){
sequence$color[i]=NA
sequence$histocolor[i]="red"
}
##only look at period data
temp  <- rawdata[rawdata$period == i, ]
keeps = c("a_pos","fly")
period.data[[i]] <- temp[keeps] #list only arena position and fly behavior data by period
if(sequence$type[i]=="fs"||sequence$type[i]=="color"||sequence$type[i]=="optomotorR"||sequence$type[i]=="optomotorL")
{
## plot the fly behavior and arena position time traces
fly_pos_traces(temp)
}
##Calculate period histograms
#fly behavior
flyhistos[[i]] <- ggplot(data=temp, aes_string(temp$fly)) +
geom_histogram(binwidth = 3, fill = sequence$histocolor[i]) +
labs(x="Torque [arb units]", y="frequency") +
xlim(maxfly) +
ggtitle(paste(flyname, "Period", i))
#arena position
if(sequence$type[i]=="fs"||sequence$type[i]=="color")
{
poshistos[[i]] <- ggplot(data=temp, aes_string(temp$a_pos)) +
geom_histogram(binwidth=10, fill = sequence$histocolor[i]) +
labs(x="Arena Position [degrees*10]", y="frequency") +
xlim(-1800,1800) +
ggtitle(paste(flyname, "Period", i))
}
##calculate PIs
##create data.frame for adding PIs if it doesn't eist, yet
if(!exists("PIprofile")){PIprofile <- data.frame(matrix(ncol = NofPeriods))}
if(sequence$type[i]=="fs"||sequence$type[i]=="color") #for arena position
{
t1 = sum(abs(temp$a_pos) >= 450 & abs(temp$a_pos) <= 1350)
t2 = nrow(temp)-t1
sequence$lambda[i] = (t1-t2)/(t1+t2)
if (sequence$contingency[i] == '2_4_Q'){sequence$lambda[i]=-sequence$lambda[i]}
if(l==1){PIprofile[1,i]=sequence$lambda[i]}
} else if (sequence$type[i]=="yt" || sequence$type[i]=="sw_blue" || sequence$type[i]=="sw_green") #calculate torque PIs
{
table1 <- table(sign(temp$fly))
t1 = table1[2]
t2 = nrow(temp)-t1
sequence$lambda[i] = (t1-t2)/(t1+t2)
if (sequence$contingency[i] == 'right_torque'){sequence$lambda[i]=-sequence$lambda[i]}
if(l==1){PIprofile[1,i]=sequence$lambda[i]}
}
} #for Number of Periods
for(i in 1:NofPeriods){
##calculate PIs
##create data.frame for adding PIs if it doesn't eist, yet
if(!exists("PIprofile")){PIprofile <- data.frame(matrix(ncol = NofPeriods))}
if(sequence$type[i]=="fs"||sequence$type[i]=="color") #for arena position
{
t1 = sum(abs(temp$a_pos) >= 450 & abs(temp$a_pos) <= 1350)
t2 = nrow(temp)-t1
sequence$lambda[i] = (t1-t2)/(t1+t2)
if (sequence$contingency[i] == '2_4_Q'){sequence$lambda[i]=-sequence$lambda[i]}
if(l==1){PIprofile[1,i]=sequence$lambda[i]}
} else if (sequence$type[i]=="yt" || sequence$type[i]=="sw_blue" || sequence$type[i]=="sw_green") #calculate torque PIs
{
table1 <- table(sign(temp$fly))
t1 = table1[2]
t2 = nrow(temp)-t1
sequence$lambda[i] = (t1-t2)/(t1+t2)
if (sequence$contingency[i] == 'right_torque'){sequence$lambda[i]=-sequence$lambda[i]}
if(l==1){PIprofile[1,i]=sequence$lambda[i]}
}
} #for Number of Periods
for(i in 1:NofPeriods){
##calculate PIs
##create data.frame for adding PIs if it doesn't eist, yet
if(!exists("PIprofile")){PIprofile <- data.frame(matrix(ncol = NofPeriods))}
if(sequence$type[i]=="fs"||sequence$type[i]=="color") #for arena position
{
t1 = sum(abs(temp$a_pos) >= 450 & abs(temp$a_pos) <= 1350)
t2 = nrow(temp)-t1
sequence$lambda[i] = (t1-t2)/(t1+t2)
if (sequence$contingency[i] == '2_4_Q'){sequence$lambda[i]=-sequence$lambda[i]}
PIprofile[1,i]=sequence$lambda[i]
} else if (sequence$type[i]=="yt" || sequence$type[i]=="sw_blue" || sequence$type[i]=="sw_green") #calculate torque PIs
{
table1 <- table(sign(temp$fly))
t1 = table1[2]
t2 = nrow(temp)-t1
sequence$lambda[i] = (t1-t2)/(t1+t2)
if (sequence$contingency[i] == 'right_torque'){sequence$lambda[i]=-sequence$lambda[i]}
PIprofile[1,i]=sequence$lambda[i]
}
} #for Number of Periods
View(PIprofile)
PIprofile <- rbind2(PIprofile, as.vector(t(sequence$lambda)))
View(PIprofile)
View(grouped.PIprofiles)
