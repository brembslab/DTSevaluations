rawdataDown = rbind(rawdataDown[1:rownames(copy[z,]),],copy[z,],rawdataDown[-(rownames(copy[z,]),])
rawdataDown = rbind(rawdataDown[1:rownames(copy[z,]),],copy[z,],rawdataDown[rownames(copy[z,]),])
View(rawdataDown)
rawdataDown = rbind(rawdataDown[1:rownames(copy[1,]),],copy[1,],rawdataDown[rownames(copy[1,]),])
rawdataDown = rbind(rawdataDown[1:19199,],copy[1,],rawdataDown[rownames(-19199,])
rawdataDown = rbind(rawdataDown[1:19199,],copy[1,],rawdataDown[rownames(19199:nrow(rawdataDown),])
rawdataDown <- rbind(rawdataDown[1:19199,], copy[1,], rawdataDown[19199:nrow(rawdataDown),])
View(rawdataDown)
rawdataDown <- rbind(rawdataDown[1:19190,], copy[1,], rawdataDown[19191:nrow(rawdataDown),])
table(rawdataDown$last)
rawdataDown <- rawdataDown[!((rawdataDown$last)==1),] # delete last data point of the offending periods
table(rawdataDown$last)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
##parse the metadata
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset position data to +/-180° [-1800..1796]
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
## replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
##calculate actual sampling rate and downsample if necessary
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
if (length(table(rawdataDown$period)) > NofPeriods) {rawdataDown<-rawdataDown[!(rawdataDown$period==length(table(rawdataDown$period))),]} #remove any extra period numbers, if they exist
rawdata$group_num <- 50*round(rawdata$time/50) # Create 50ms bins
rawdata$weight <- 1/(1+abs(rawdata$time-rawdata$group_num)) # calculate distance from measurement point
rawdata$norm <-ave(rawdata$weight,rawdata$group_num,FUN=function(x) x/sum(x)) #apply weights according to distance from bin center
rawdata$fly2 <- rawdata$fly*rawdata$norm
rawdata$a_pos2 <- rawdata$a_pos*rawdata$norm #needs more work because of values at +/-180°!!!
rawdata$period2 <- rawdata$period*rawdata$norm
# create the vectors in which to save the downsampled data
timeDownsampled <- as.vector(unique(rawdata$group_num))
a_posDownsampled <- as.vector(round(tapply(rawdata$a_pos2, rawdata$group_num, sum)))
flyDownsampled <- as.vector(round(tapply(rawdata$fly2, rawdata$group_num, sum)))
periodDownsampled <- as.vector(round(tapply(rawdata$period2, rawdata$group_num, sum)))
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
if (length(table(rawdataDown$period)) > NofPeriods) {rawdataDown<-rawdataDown[!(rawdataDown$period==length(table(rawdataDown$period))),]} #remove any extra period numbers, if they exist
length(table(rawdataDown$period)) > NofPeriods
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
length(diff_periods)!=0
rawdataDown$last = NA
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, diff_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 1, x))) # "1" marking the last data püoint in an offending period
View(rawdataDown)
View(rawdata)
length(rownames(difference)[difference$deviation==-1])!=0
negative_periods=rownames(difference)[difference$deviation==-1] #find the periods with missing values
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, negative_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 2, x))) # "2" marking the last data püoint in an offending period
copy = as.vector(rawdataDown[is.element(rawdataDown$last, 2),])
View(copy)
length(negative_periods)
for (z in length(negative_periods)) {rawdataDown <- rbind(rawdataDown[1:rownames(copy[z,]),], copy[z,], rawdataDown[rownames(copy[z,])+1:nrow(rawdataDown),])} #insert the copied data point
rawdataDown <- rbind(rawdataDown[1:rownames(copy[z,]),], copy[z,], rawdataDown[rownames(copy[z,])+1:nrow(rawdataDown),])
rawdataDown <- rbind(rawdataDown[1:rownames(copy[z,]),], copy[z,], rawdataDown[rownames(copy[z,])+1:nrow(rawdataDown),])
rownames(copy[z,])
copy[z,]
rownames(copy[z,])+1
as.numeric(rownames(copy[z,]))+1
for (z in length(negative_periods)) {rawdataDown <- rbind(rawdataDown[1:rownames(copy[z,]),], copy[z,], rawdataDown[as.numeric(rownames(copy[z,]))+1:nrow(rawdataDown),])} #insert the copied data point
View(rawdataDown)
View(rawdataDown)
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
### check the dataframe for consistency
if (length(table(rawdataDown$period)) > NofPeriods) {rawdataDown<-rawdataDown[!(rawdataDown$period==length(table(rawdataDown$period))),]} #remove any extra period numbers, if they exist
# check if there are periods which deviate from projected duration
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
#mark the last data pont of each offending period (assuming we're only one data point off!)
rawdataDown$last = NA
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, diff_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 1, x))) # "1" marking the last data püoint in an offending period
negative_periods=rownames(difference)[difference$deviation==-1] #find the periods with missing values
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, negative_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 2, x))) # "2" marking the last data püoint in an offending period
copy = as.vector(rawdataDown[is.element(rawdataDown$last, 2),])
as.numeric(rownames(copy[z,]))+1
rawdataDown <- rbind(rawdataDown[1:rownames(copy[z,]),], copy[z,], rawdataDown[19202:nrow(rawdataDown),])
View(rawdataDown)
position=as.numeric(rownames(copy[z,]))
temp.pos=as.numeric(rownames(copy[z,]))
temp.pos+1
rawdataDown <- rbind(rawdataDown[1:temp.pos,], copy[z,], rawdataDown[temp.pos+1:nrow(rawdataDown),])} #insert the copied data point
rawdataDown <- rbind(rawdataDown[1:temp.pos,], copy[z,], rawdataDown[temp.pos+1:nrow(rawdataDown),])
View(rawdataDown)
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
rawdataDown$last = NA
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, diff_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 1, x))) # "1" marking the last data püoint in an offending period
negative_periods=rownames(difference)[difference$deviation==-1] #find the periods with missing values
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, negative_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 2, x))) # "2" marking the last data püoint in an offending period
copy = as.vector(rawdataDown[is.element(rawdataDown$last, 2),])
temp.pos=as.numeric(rownames(copy[z,]))
next.pos=temp.pos+1
rawdataDown <- rbind(rawdataDown[1:temp.pos,], copy[z,], rawdataDown[next.pos:nrow(rawdataDown),])
View(rawdataDown)
rawdataDown <- rawdataDown[!((rawdataDown$last)==1),] # delete last data point of the offending periods
rawdataDown$last <- NULL #delete the unnecessary 'last' column
rawdataDown$time = seq(0, (as.numeric(as.character(experiment$duration))*1000)-50, by=50) # fix the mangled time column
row.names(rawdataDown) <- 1:nrow(rawdataDown) #fix rownames, too
View(rawdataDown)
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
rawdataDown$last = NA
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, diff_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 1, x))) # "1" marking the last data püoint in an offending period
negative_periods=rownames(difference)[difference$deviation==-1] #find the periods with missing values
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, negative_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 2, x))) # "2" marking the last data püoint in an offending period
copy = as.vector(rawdataDown[is.element(rawdataDown$last, 2),])
temp.pos=as.numeric(rownames(copy[z,])) #find the rioght position to insert
next.pos=temp.pos+1                     #for some reason, R also wants to have the next position as a variable
rawdataDown <- rbind(rawdataDown[1:temp.pos,], copy[z,], rawdataDown[next.pos:nrow(rawdataDown),]) # duplicate the last data point in the offending periods
rawdataDown <- rawdataDown[!((rawdataDown$last)==1),] # delete last data point of the offending periods
rawdataDown$last <- NULL #delete the unnecessary 'last' column
rawdataDown$time = seq(0, (as.numeric(as.character(experiment$duration))*1000)-50, by=50) # fix the mangled time column
View(rawdataDown)
View(rawdataDown)
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
# check if there are periods which deviate from projected duration
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
#mark the last data pont of each offending period (assuming we're only one data point off!)
if (length(diff_periods)!=0){
rawdataDown$last = NA
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, diff_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 1, x))) # "1" marking the last data püoint in an offending period
#mark the last data points of periods with missing data points
if (length(rownames(difference)[difference$deviation==-1])!=0){ #if there are periods with too few data points, duplicate the last
negative_periods=rownames(difference)[difference$deviation==-1] #find the periods with missing values
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, negative_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 2, x))) # "2" marking the last data püoint in an offending period
copy = as.vector(rawdataDown[is.element(rawdataDown$last, 2),])
for (z in length(negative_periods)) {
temp.pos=as.numeric(rownames(copy[z,])) #find the rioght position to insert
next.pos=temp.pos+1                     #for some reason, R also wants to have the next position as a variable
rawdataDown <- rbind(rawdataDown[1:temp.pos,], copy[z,], rawdataDown[next.pos:nrow(rawdataDown),]) # duplicate the last data point in the offending periods
}
}
rawdataDown <- rawdataDown[!((rawdataDown$last)==1),] # delete last data point of the offending periods
View(rawdataDown)
View(rawdataDown)
View(rawdataDown)
View(rawdataDown)
View(rawdataDown)
View(rawdataDown)
View(rawdataDown)
View(rawdata)
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
#mark the last data pont of each offending period (assuming we're only one data point off!)
if (length(diff_periods)!=0){
rawdataDown$last = NA
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, diff_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 1, x))) # "1" marking the last data püoint in an offending period
#mark the last data points of periods with missing data points
if (length(rownames(difference)[difference$deviation==-1])!=0){ #if there are periods with too few data points, duplicate the last
negative_periods=rownames(difference)[difference$deviation==-1] #find the periods with missing values
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, negative_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 2, x))) # "2" marking the last data püoint in an offending period
copy = as.vector(rawdataDown[is.element(rawdataDown$last, 2),])
for (z in length(negative_periods)) {
temp.pos=as.numeric(rownames(copy[z,])) #find the rioght position to insert
next.pos=temp.pos+1                     #for some reason, R also wants to have the next position as a variable
rawdataDown <- rbind(rawdataDown[1:temp.pos,], copy[z,], rawdataDown[next.pos:nrow(rawdataDown),]) # duplicate the last data point in the offending periods
}
}
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
rawdataDown$last = NA
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, diff_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 1, x))) # "1" marking the last data püoint in an offending period
negative_periods=rownames(difference)[difference$deviation==-1] #find the periods with missing values
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, negative_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 2, x))) # "2" marking the last data püoint in an offending period
copy = as.vector(rawdataDown[is.element(rawdataDown$last, 2),])
for (z in length(negative_periods)) {
temp.pos=as.numeric(rownames(copy[z,])) #find the rioght position to insert
next.pos=temp.pos+1                     #for some reason, R also wants to have the next position as a variable
rawdataDown <- rbind(rawdataDown[1:temp.pos,], copy[z,], rawdataDown[next.pos:nrow(rawdataDown),]) # duplicate the last data point in the offending periods
}
rawdataDown <- rawdataDown[!((rawdataDown$last)==1),] # delete last data point of the offending periods
rawdataDown$last <- NULL #delete the unnecessary 'last' column
View(rawdataDown)
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
# check if there are periods which deviate from projected duration
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
rawdataDown$last = NA
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, diff_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 1, x))) # "1" marking the last data püoint in an offending period
negative_periods=rownames(difference)[difference$deviation==-1] #find the periods with missing values
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, negative_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 2, x))) # "2" marking the last data püoint in an offending period
copy = as.vector(rawdataDown[is.element(rawdataDown$last, 2),])
temp.pos=as.numeric(rownames(copy[z,])) #find the rioght position to insert
next.pos=temp.pos+1                     #for some reason, R also wants to have the next position as a variable
rawdataDown <- rbind(rawdataDown[1:temp.pos,], copy[z,], rawdataDown[next.pos:nrow(rawdataDown),]) # duplicate the last data point in the offending periods
View(rawdataDown)
test <- rawdataDown[!((rawdataDown$last)==1),]
View(test)
View(test)
test <- rawdataDown[rawdataDown$last)!=1,]
test <- rawdataDown[rawdataDown$last!=1,]
View(test)
test <- rawdataDown[rawdataDown$last!="1",]
View(test)
test <- rawdataDown[rawdataDown$last=="1",]
View(test)
test <- rawdataDown[rawdataDown$last==1,]
View(test)
test <- rawdataDown[!((rawdataDown$last)==1),]
View(test)
test <- rawdataDown[!(grepl(1, rawdataDown$last)),]
View(test)
rawdataDown <- rawdataDown[!(grepl(1, rawdataDown$last)),] # delete last data point of the offending periods
rawdataDown$last <- NULL #delete the unnecessary 'last' column
View(rawdataDown)
rawdataDown$time = seq(0, (as.numeric(as.character(experiment$duration))*1000)-50, by=50) # fix the mangled time column
row.names(rawdataDown) <- 1:nrow(rawdataDown) #fix rownames, too
View(rawdataDown)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
save.image("D:/data/DTS_test/t-learn/evaluations/.RData")
load("D:/data/DTS_test/t-learn/evaluations/.RData")
"optomotorL" %in% sequence$type
("optomotorL" & "optomotorR") %in% sequence$type
grepl("optomotor", sequence$type)
any(sequence$type=="optomotor")
any(sequence$type=="optomotorR")
any(sequence$type==("optomotorR" | "optomotorL"))
any(grepl("optomotor", sequence$type)==TRUE)
any(grepl("optomotor", sequence$type)==FALSE)
any(grepl("optomotor", sequence$type)==FA)
any(grepl("optomotor", sequence$type)=="FA")
any(grepl("optomotor", sequence$type)==FALSE)
any(grepl("optomotor", sequence$type)==TRUE)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
xml_name = file.choose()
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
View(rawdata)
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
View(rawdata)
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
View(rawdata)
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
flyrange = range(rawdata$fly)
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
rawdata <- weightedDownsample20Hz(rawdata, sequence, experiment, NofPeriods)
down_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
rawdata$group_num <- 50*round(rawdata$time/50) # Create 50ms bins
rawdata$weight <- 1/(1+abs(rawdata$time-rawdata$group_num)) # calculate distance from measurement point
rawdata$norm <-ave(rawdata$weight,rawdata$group_num,FUN=function(x) x/sum(x)) #apply weights according to distance from bin center
rawdata$fly2 <- rawdata$fly*rawdata$norm
rawdata$a_pos2 <- rawdata$a_pos*rawdata$norm #needs more work because of values at +/-180°!!!
rawdata$period2 <- rawdata$period*rawdata$norm
# create the vectors in which to save the downsampled data
timeDownsampled <- as.vector(unique(rawdata$group_num))
a_posDownsampled <- as.vector(round(tapply(rawdata$a_pos2, rawdata$group_num, sum)))
flyDownsampled <- as.vector(round(tapply(rawdata$fly2, rawdata$group_num, sum)))
periodDownsampled <- as.vector(round(tapply(rawdata$period2, rawdata$group_num, sum)))
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
### check the dataframe for consistency
if (length(table(rawdataDown$period)) > NofPeriods) {rawdataDown<-rawdataDown[!(rawdataDown$period==length(table(rawdataDown$period))),]} #remove any extra period numbers, if they exist
# check if there are periods which deviate from projected duration
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
#mark the last data pont of each offending period (assuming we're only one data point off!)
if (length(diff_periods)!=0){
rawdataDown$last = NA
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, diff_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 1, x))) # "1" marking the last data püoint in an offending period
#mark the last data points of periods with missing data points
if (length(rownames(difference)[difference$deviation==-1])!=0){ #if there are periods with too few data points, duplicate the last
negative_periods=rownames(difference)[difference$deviation==-1] #find the periods with missing values
rawdataDown$last = with(rawdataDown, ave(last, match(rawdataDown$period, negative_periods), FUN = function(x) ifelse(seq_along(x) == length(x), 2, x))) # "2" marking the last data püoint in an offending period
copy = as.vector(rawdataDown[is.element(rawdataDown$last, 2),])
for (z in length(negative_periods)) {
temp.pos=as.numeric(rownames(copy[z,])) #find the rioght position to insert
next.pos=temp.pos+1                     #for some reason, R also wants to have the next position as a variable
rawdataDown <- rbind(rawdataDown[1:temp.pos,], copy[z,], rawdataDown[next.pos:nrow(rawdataDown),]) # duplicate the last data point in the offending periods
}
}
rawdataDown <- rawdataDown[!(grepl(1, rawdataDown$last)),] # delete last data point of the offending periods
rawdataDown$last <- NULL #delete the unnecessary 'last' column
rawdataDown$time = seq(0, (as.numeric(as.character(experiment$duration))*1000)-50, by=50) # fix the mangled time column
row.names(rawdataDown) <- 1:nrow(rawdataDown) #fix rownames, too
}
View(rawdata)
View(rawdataDown)
View(difference)
exists(j_pos, rawdata)
exists("j_pos", rawdata)
View(rawdata)
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
View(rawdata)
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*100)
}
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
View(rawdata)
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)
}
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
flyrange = range(rawdata$fly)
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
rawdata$group_num <- 50*round(rawdata$time/50) # Create 50ms bins
rawdata$weight <- 1/(1+abs(rawdata$time-rawdata$group_num)) # calculate distance from measurement point
rawdata$norm <-ave(rawdata$weight,rawdata$group_num,FUN=function(x) x/sum(x)) #apply weights according to distance from bin center
rawdata$fly2 <- rawdata$fly*rawdata$norm
rawdata$a_pos2 <- rawdata$a_pos*rawdata$norm #needs more work because of values at +/-180°!!!
rawdata$period2 <- rawdata$period*rawdata$norm
# create the vectors in which to save the downsampled data
timeDownsampled <- as.vector(unique(rawdata$group_num))
a_posDownsampled <- as.vector(round(tapply(rawdata$a_pos2, rawdata$group_num, sum)))
flyDownsampled <- as.vector(round(tapply(rawdata$fly2, rawdata$group_num, sum)))
periodDownsampled <- as.vector(round(tapply(rawdata$period2, rawdata$group_num, sum)))
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
as.numeric(as.character(sequence$duration))*20
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
View(difference)
difference$deviation = difference$Freq-difference$duration
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
##parse the metadata
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset position data to +/-180° [-1800..1796]
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##change j_pos data from float to integer
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
rawdata$group_num <- 50*round(rawdata$time/50) # Create 50ms bins
rawdata$weight <- 1/(1+abs(rawdata$time-rawdata$group_num)) # calculate distance from measurement point
rawdata$norm <-ave(rawdata$weight,rawdata$group_num,FUN=function(x) x/sum(x)) #apply weights according to distance from bin center
rawdata$fly2 <- rawdata$fly*rawdata$norm
rawdata$a_pos2 <- rawdata$a_pos*rawdata$norm #needs more work because of values at +/-180°!!!
rawdata$period2 <- rawdata$period*rawdata$norm
# create the vectors in which to save the downsampled data
timeDownsampled <- as.vector(unique(rawdata$group_num))
a_posDownsampled <- as.vector(round(tapply(rawdata$a_pos2, rawdata$group_num, sum)))
flyDownsampled <- as.vector(round(tapply(rawdata$fly2, rawdata$group_num, sum)))
periodDownsampled <- as.vector(round(tapply(rawdata$period2, rawdata$group_num, sum)))
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
View(rawdata)
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
View(difference)
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##change j_pos data from float to integer
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
rawdata$group_num <- 50*round(rawdata$time/50) # Create 50ms bins
rawdata$weight <- 1/(1+abs(rawdata$time-rawdata$group_num)) # calculate distance from measurement point
rawdata$norm <-ave(rawdata$weight,rawdata$group_num,FUN=function(x) x/sum(x)) #apply weights according to distance from bin center
rawdata$fly2 <- rawdata$fly*rawdata$norm
rawdata$a_pos2 <- rawdata$a_pos*rawdata$norm #needs more work because of values at +/-180°!!!
rawdata$period2 <- rawdata$period*rawdata$norm
# create the vectors in which to save the downsampled data
timeDownsampled <- as.vector(unique(rawdata$group_num))
a_posDownsampled <- as.vector(round(tapply(rawdata$a_pos2, rawdata$group_num, sum)))
flyDownsampled <- as.vector(round(tapply(rawdata$fly2, rawdata$group_num, sum)))
periodDownsampled <- as.vector(round(tapply(rawdata$period2, rawdata$group_num, sum)))
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
View(difference)
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
##parse the metadata
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset position data to +/-180° [-1800..1796]
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##change j_pos data from float to integer
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
##calculate actual sampling rate and downsample if necessary
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
rawdata$group_num <- 50*round(rawdata$time/50) # Create 50ms bins
rawdata$weight <- 1/(1+abs(rawdata$time-rawdata$group_num)) # calculate distance from measurement point
rawdata$norm <-ave(rawdata$weight,rawdata$group_num,FUN=function(x) x/sum(x)) #apply weights according to distance from bin center
rawdata$fly2 <- rawdata$fly*rawdata$norm
rawdata$a_pos2 <- rawdata$a_pos*rawdata$norm #needs more work because of values at +/-180°!!!
rawdata$period2 <- rawdata$period*rawdata$norm
# create the vectors in which to save the downsampled data
timeDownsampled <- as.vector(unique(rawdata$group_num))
a_posDownsampled <- as.vector(round(tapply(rawdata$a_pos2, rawdata$group_num, sum)))
flyDownsampled <- as.vector(round(tapply(rawdata$fly2, rawdata$group_num, sum)))
periodDownsampled <- as.vector(round(tapply(rawdata$period2, rawdata$group_num, sum)))
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
diff_periods = rownames(difference)[difference$deviation!=0] #find periods with differing numbers of data points
View(difference)
as.numeric(as.character(experiment$duration))*1000
experiment$duration
View(experiment)
any(abs(difference$deviation)) > 1
any(difference$deviation)
any(abs(as.numerical(difference$deviation))>1)
any(abs(as.numeric(difference$deviation))>1)
any(abs(as.numeric(difference$deviation))>2)
any(as.numeric(difference$deviation)>2)
any(abs(as.numeric(difference$deviation))>2)
any(abs(as.numeric(difference$deviation))>20)
any(abs(as.numeric(difference$deviation))>8)
any(abs(as.numeric(difference$deviation))>7)
any(abs(as.numeric(difference$deviation))>1)
if(any(abs(as.numeric(difference$deviation))>1)) stop("Number of data points does not match expectations") #check if there is too much missing/additional data
if(any(abs(as.numeric(difference$deviation))>1)) stop("Number of data points does not match expectations. Check Rawdata!") #check if there is too much missing/additional data
