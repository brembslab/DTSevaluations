q()
install.packages(c("adehabitat","XML","lattice","hexbin",
"colorRamps" ,"corrplot","gplots", "rgl", "MASS", "adehabitatLT","corrplot"), dependencies=TRUE)
q()
load("F:/PV-Anlage/.RData")
flyData <- xmlParse(file.choose())
require("XML")
require("data.table")
install.packages(XML)
install.packages("XML")
install.packages("data.table")
library("XML")
flyData <- xmlParse(file.choose())
project.file <- file.choose()
devtools::install_github("ACCLAB/dabestr")
install.packages(devtools)
install.packages("devtools")
devtools::install_github("ACCLAB/dabestr")
devtools::install_github("ACCLAB/dabestr")
install.packages("dabestr")
install.packages(c("assertthat", "backports", "BayesFactor", "BH", "bit", "cli", "cluster", "coda", "colorspace", "cowplot", "DBI", "digest", "dplyr", "dygraphs", "effsize", "evaluate", "ggplot2", "ggpubr", "ggsignif", "glue", "gtable", "gtools", "highr", "htmlwidgets", "jsonlite", "knitr", "lazyeval", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "mime", "munsell", "mvtnorm", "nlme", "pbapply", "pillar", "pkgconfig", "purrr", "R6", "Rcpp", "RcppEigen", "RCurl", "rlang", "rmarkdown", "rpart", "RSQLite", "scales", "seewave", "stringi", "stringr", "survival", "tibble", "tidyr", "tidyselect", "tuneR", "utf8", "XML", "xtable", "xts", "yaml", "zoo"))
install.packages(c("nlme", "rpart"))
install.packages(c("nlme", "rpart"))
devtools::install_github("ACCLAB/dabestr")
install.packages("processx")
devtools::install_github("ACCLAB/dabestr")
install.packages("ps")
devtools::install_github("ACCLAB/dabestr")
install.packages("pkgload")
install.packages("dabestr")
devtools::install_github("ACCLAB/dabestr")
install.packages("fs")
devtools::install_github("ACCLAB/dabestr")
install.packages("plyr")
devtools::install_github("ACCLAB/dabestr")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
devtools::install_github("ACCLAB/dabestr")
load("D:/data/course_tlearn/evaluations/.RData")
View(rawdata)
View(rawdata)
View(rawdata)
rawdata$a_pos = rawdata$a_pos-1800
View(rawdata)
View(rawdata)
View(rawdata)
View(experiment)
binsize = as.integer(experiment$sample_rate/20)
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
experiment$sample_rate = real_sample_rate/binsize
View(experiment)
seq(1,length(rawdata$time),binsize)
abs(max(rawdata$period[1002:1005]) - min(rawdata$period[1002:1005]))
abs(max(rawdata$period[1000:2000]) - min(rawdata$period[1000:2000]))
abs(max(rawdata$period[5000:7000]) - min(rawdata$period[5000:7000]))
dumydata = rawdata$period[5000:7000]
table(dummydata)
table(dumydata)
dumydata$1
view(dumydata)
View(dumydata)
ntestnumber=table(dumydata)$1
testnumber=table(dumydata)[1,1]
testnumber=table(dumydata)[1,1]
testtable<-table(dumydata)
testtable
testtable$1
testtable[1.1]
testtable[1.1]>testtable[1.2]
testtable[1.2]
testtable[1.1]
testtable[2.1]
testtable[2]
testtable[1]
testtable[1]>testtable[2]
testtable[2]>testtable[1]
table(dumydata)[1]>table(dumydata)[2]
table(dumydata)[2]>table(dumydata)[1]
View(experiment)
# create the vectors in which to save the downsampled data
timeDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$time)/binsize))
a_posDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$a_pos)/binsize))
torqueDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$torque)/binsize))
periodDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$period)/binsize))
# downsampling time
for (index in seq(1,length(rawdata$time),binsize)) {
if(index < (length(rawdata$time)-binsize)) { # check whether we reached the end of the data; if not:
timeDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$time[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
timeDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$time[index:length(rawdata$time)])/length(rawdata$time[index:length(rawdata$time)])) # average over the remaining values and save the result
}
}
# downsampling position
for (index in seq(1,length(rawdata$a_pos),binsize)) {
if(index < (length(rawdata$a_pos)-binsize)) { # check whether we reached the end of the data; if not:
a_posDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$a_pos[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
a_posDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$a_pos[index:length(rawdata$a_pos)])/length(rawdata$a_pos[index:length(rawdata$a_pos)])) # average over the remaining values and save the result
}
}
# downsampling torque
for (index in seq(1,length(rawdata$torque),binsize)) {
if(index < (length(rawdata$torque)-binsize)) { # check whether we reached the end of the data; if not:
torqueDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$torque[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
torqueDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$torque[index:length(rawdata$torque)])/length(rawdata$torque[index:length(rawdata$torque)])) # average over the remaining values and save the result
}
}
# downsampling period
for (index in seq(1,length(rawdata$period),binsize)) {
if (abs(max(rawdata$period[index:(index+binsize-1)]) - min(rawdata$period[index:(index+binsize-1)])) = 0){ #check if there is a period switch in the bin, if there is:
periodDownsampled[((index-1)/binsize)+1] <- rawdata$period[index]
}
else #if there are two different period values in the bin
{
if (table(rawdata$period[index:(index+binsize-1)])[1]>table(rawdata$period[index:(index+binsize-1)])[2]) #if the majority of values indicates old period
{
periodDownsampled[((index-1)/binsize)+1] <- rawdata$period[index] #make the period vale that of the old period
}
else {periodDownsampled[((index-1)/binsize)+1] <- rawdata$period[index+binsize-1] #if the majority of values indicates new period, set the value to the new period
}
}
}
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "torque" = torqueDownsampled, "period" = periodDownsampled)
# create the vectors in which to save the downsampled data
timeDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$time)/binsize))
a_posDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$a_pos)/binsize))
torqueDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$torque)/binsize))
periodDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$period)/binsize))
# downsampling time
for (index in seq(1,length(rawdata$time),binsize)) {
if(index < (length(rawdata$time)-binsize)) { # check whether we reached the end of the data; if not:
timeDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$time[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
timeDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$time[index:length(rawdata$time)])/length(rawdata$time[index:length(rawdata$time)])) # average over the remaining values and save the result
}
}
# downsampling position
for (index in seq(1,length(rawdata$a_pos),binsize)) {
if(index < (length(rawdata$a_pos)-binsize)) { # check whether we reached the end of the data; if not:
a_posDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$a_pos[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
a_posDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$a_pos[index:length(rawdata$a_pos)])/length(rawdata$a_pos[index:length(rawdata$a_pos)])) # average over the remaining values and save the result
}
}
# downsampling torque
for (index in seq(1,length(rawdata$torque),binsize)) {
if(index < (length(rawdata$torque)-binsize)) { # check whether we reached the end of the data; if not:
torqueDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$torque[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
torqueDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$torque[index:length(rawdata$torque)])/length(rawdata$torque[index:length(rawdata$torque)])) # average over the remaining values and save the result
}
}
# downsampling period
for (index in seq(1,length(rawdata$period),binsize)) {
if (abs(max(rawdata$period[index:(index+binsize-1)]) - min(rawdata$period[index:(index+binsize-1)])) == 0){ #check if there is a period switch in the bin, if there is:
periodDownsampled[((index-1)/binsize)+1] <- rawdata$period[index]
} else { #if, instead, there are two different period values in the bin...
if (table(rawdata$period[index:(index+binsize-1)])[1]>table(rawdata$period[index:(index+binsize-1)])[2]) #if the majority of values indicates old period
{
periodDownsampled[((index-1)/binsize)+1] <- rawdata$period[index] #make the period vale that of the old period
} else {
periodDownsampled[((index-1)/binsize)+1] <- rawdata$period[index+binsize-1] #if the majority of values indicates new period, set the value to the new period
}
}
}
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "torque" = torqueDownsampled, "period" = periodDownsampled)
View(rawdataDown)
View(rawdataDown)
# create the vectors in which to save the downsampled data
timeDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$time)/binsize))
a_posDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$a_pos)/binsize))
torqueDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$torque)/binsize))
periodDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$period)/binsize))
# downsampling time
for (index in seq(1,length(rawdata$time),binsize)) {
if(index < (length(rawdata$time)-binsize)) { # check whether we reached the end of the data; if not:
timeDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$time[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
timeDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$time[index:length(rawdata$time)])/length(rawdata$time[index:length(rawdata$time)])) # average over the remaining values and save the result
}
}
# downsampling position
for (index in seq(1,length(rawdata$a_pos),binsize)) {
if(index < (length(rawdata$a_pos)-binsize)) { # check whether we reached the end of the data; if not:
a_posDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$a_pos[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
a_posDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$a_pos[index:length(rawdata$a_pos)])/length(rawdata$a_pos[index:length(rawdata$a_pos)])) # average over the remaining values and save the result
}
}
# downsampling torque
for (index in seq(1,length(rawdata$torque),binsize)) {
if(index < (length(rawdata$torque)-binsize)) { # check whether we reached the end of the data; if not:
torqueDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$torque[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
torqueDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$torque[index:length(rawdata$torque)])/length(rawdata$torque[index:length(rawdata$torque)])) # average over the remaining values and save the result
}
}
# downsampling period
for (index in seq(1,length(rawdata$period),binsize)) {
if (abs(max(rawdata$period[index:(index+binsize-1)]) - min(rawdata$period[index:(index+binsize-1)])) == 0){ #check if there is a period switch in the bin, if there is:
periodDownsampled[((index-1)/binsize)+1] <- rawdata$period[index]
} else if (table(rawdata$period[index:(index+binsize-1)])[1]>table(rawdata$period[index:(index+binsize-1)])[2]) #if the majority of values indicates old period
{
periodDownsampled[((index-1)/binsize)+1] <- rawdata$period[index] #make the period vale that of the old period
} else {
periodDownsampled[((index-1)/binsize)+1] <- rawdata$period[index+binsize-1] #if the majority of values indicates new period, set the value to the new period
}
}
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "torque" = torqueDownsampled, "period" = periodDownsampled)
length(rawdata$torque)
rawdata$period[length(rawdata$period))
rawdata$period[length(rawdata$period)]
# create the vectors in which to save the downsampled data
timeDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$time)/binsize))
a_posDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$a_pos)/binsize))
torqueDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$torque)/binsize))
periodDownsampled <- vector(mode = "numeric", length = ceiling(length(rawdata$period)/binsize))
# downsampling time
for (index in seq(1,length(rawdata$time),binsize)) {
if(index < (length(rawdata$time)-binsize)) { # check whether we reached the end of the data; if not:
timeDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$time[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
timeDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$time[index:length(rawdata$time)])/length(rawdata$time[index:length(rawdata$time)])) # average over the remaining values and save the result
}
}
# downsampling position
for (index in seq(1,length(rawdata$a_pos),binsize)) {
if(index < (length(rawdata$a_pos)-binsize)) { # check whether we reached the end of the data; if not:
a_posDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$a_pos[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
a_posDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$a_pos[index:length(rawdata$a_pos)])/length(rawdata$a_pos[index:length(rawdata$a_pos)])) # average over the remaining values and save the result
}
}
# downsampling torque
for (index in seq(1,length(rawdata$torque),binsize)) {
if(index < (length(rawdata$torque)-binsize)) { # check whether we reached the end of the data; if not:
torqueDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$torque[index:(index+binsize-1)])/binsize)  # average all data in the bin and save it in the right slot of the downsampled vector
} else {  # in case we reached the end
torqueDownsampled[((index-1)/binsize)+1] <- round(sum(rawdata$torque[index:length(rawdata$torque)])/length(rawdata$torque[index:length(rawdata$torque)])) # average over the remaining values and save the result
}
}
# downsampling period
for (index in seq(1,length(rawdata$period),binsize)) {
if(index < (length(rawdata$period)-binsize)) { # check whether we reached the end of the data; if not:
if (abs(max(rawdata$period[index:(index+binsize-1)]) - min(rawdata$period[index:(index+binsize-1)])) == 0){ #check if there is a period switch in the bin, if there is:
periodDownsampled[((index-1)/binsize)+1] <- rawdata$period[index]
} else if (table(rawdata$period[index:(index+binsize-1)])[1]>table(rawdata$period[index:(index+binsize-1)])[2]) #if the majority of values indicates old period
{
periodDownsampled[((index-1)/binsize)+1] <- rawdata$period[index] #make the period vale that of the old period
} else {
periodDownsampled[((index-1)/binsize)+1] <- rawdata$period[index+binsize-1] #if the majority of values indicates new period, set the value to the new period
}
} else { # in case we reached the end
periodDownsampled[((index-1)/binsize)+1] <- rawdata$period[length(rawdata$period)]
}
}
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "torque" = torqueDownsampled, "period" = periodDownsampled)
View(rawdataDown)
table(rawdata$period)
table(rawdataDown$period)
timeownsampled <- timeDownsampled-timeDownsampled[1]
timeDownsampled <- timeDownsampled-timeDownsampled[1]
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "torque" = torqueDownsampled, "period" = periodDownsampled)
View(rawdataDown)
rawdata$diff <- diff(rawdata$time, 1, 1)
difference <- diff(rawdata$time, 1, 1)
view(difference)
View(difference)
plot(difference)
ggplot(difference)
library(ggplot2)
ggplot(difference)
ggplot(as.data.frame(difference))
lines(difference)
lines(difference)#
lines(difference)#
lines(difference)
plot.new#
plot.new
lines(difference)
plot(difference)
View(rawdata)
real_sample_rate
range=vector(min=sapply(rawdata$torque,min),max=sapply(rawdata$torque,max))
range=data.frame(min=sapply(rawdata$torque,min),max=sapply(rawdata$torque,max))
View(range)
rawdata$torque,min
load("D:/data/DTS_test/colorlearning/.RData")
if (exists(project.data["type"])){ExpType = project.data["type"]} else ExpType = "torquemeter"
project.data["resources"]
exists(project.data["resources"])
exists("project.data["resources"]")
resources %in% project.data
"resources" %in% project.data
"name" %in% project.data
"title" %in% project.data
"Brembs" %in% project.data
View(project.data)
View(project.data)
is.null(project.data["resources"])
is.null(project.data["type"])
is.null(project.data["mediatype"])
is.null(project.data["Brembs"])
is.null(project.data["Brebs"])
is.null(project.data["Bs"])
exists(resources', where=project.data)
exists('resources', where=project.data)
exists('type', where=project.data)
if (exists('type', where=project.data)){ExpType = project.data["type"]} else ExpType = "torquemeter"
load("D:/temp/DTS_test/colorlearning/.RData")
colnames(rawdata)[2]<-"fly"
load("D:/temp/DTS_test/colorlearning/.RData")
colnames(rawdata)[3]<-"fly"
load("~/.RData")
load("D:/temp/DTS_test/colorlearning/.RData")
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
flyrange = range(rawdata$fly)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
setwd("B:/GitHub/DTSevaluations")
source('B:/GitHub/DTSevaluations/HTML_DTS_project.R', echo=TRUE)
flyData <- xmlParse(xml_name)
flyDataXMLtop = xmlRoot(flyData)
##parse the metadata
URIs <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/URIs"))
experimenter <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experimenter"))
fly <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/fly"))
experiment <- xmlToDataFrame(nodes=getNodeSet(flyData,"//metadata/experiment"))
##parse sequence data
NofPeriods = as.integer(xmlGetAttr(flyDataXMLtop[['sequence']], "periods"))
sequence <- xmlToDataFrame(nodes=getNodeSet(flyData,"//sequence/period"))
##parse time series meta-data
CSV_descriptor <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/CSV_descriptor"))
variables <- xmlToDataFrame(nodes=getNodeSet(flyData,"//timeseries/variables/variable"))
##parse the time series raw data
rawdata <- read.table(text=xmlSApply(flyDataXMLtop[['timeseries']][['csv_data']], xmlValue), col.names=variables$type)
##reset position data to +/-180° [-1800..1796]
if (experiment$arena_type=="lightguides"){rawdata$a_pos = rawdata$a_pos-1800}
if (experiment$arena_type=="motor"){rawdata$a_pos = round(rawdata$a_pos*0.87890625)}
##reset periods to start from 1 of they start from 0
if (rawdata$period[1]==0){rawdata$period=rawdata$period+1}
##change j_pos data from float to integer
if(exists("j_pos", rawdata)){
rawdata$j_pos = round(rawdata$j_pos*1000)
}
##replace column name for fly behavior (torque, j_pos) with "fly"
colnames(rawdata) = gsub("torque", "fly", colnames(rawdata))
colnames(rawdata) = gsub("j_pos", "fly", colnames(rawdata))
##find range of fly behavior values
flyrange = range(rawdata$fly)
##calculate actual sampling rate and downsample if necessary
real_sample_rate = nrow(rawdata)/(rawdata$time[nrow(rawdata)]/1000)
rawdata$group_num <- 50*round(rawdata$time/50) # Create 50ms bins
rawdata$weight <- 1/(1+abs(rawdata$time-rawdata$group_num)) # calculate distance from measurement point
rawdata$norm <-ave(rawdata$weight,rawdata$group_num,FUN=function(x) x/sum(x)) #apply weights according to distance from bin center
rawdata$fly2 <- rawdata$fly*rawdata$norm
rawdata$a_pos2 <- rawdata$a_pos*rawdata$norm #needs more work because of values at +/-180°!!!
rawdata$period2 <- rawdata$period*rawdata$norm
# create the vectors in which to save the downsampled data
timeDownsampled <- as.vector(unique(rawdata$group_num))
a_posDownsampled <- as.vector(round(tapply(rawdata$a_pos2, rawdata$group_num, sum)))
flyDownsampled <- as.vector(round(tapply(rawdata$fly2, rawdata$group_num, sum)))
periodDownsampled <- as.vector(round(tapply(rawdata$period2, rawdata$group_num, sum)))
# bind the downsampled vectors into one dataframe
rawdataDown <- data.frame("time" = timeDownsampled, "a_pos" = a_posDownsampled, "fly" = flyDownsampled, "period" = periodDownsampled)
difference = as.data.frame(table(rawdataDown$period)) #generate dataframe with actual numbers of data points
difference$duration = as.numeric(as.character(sequence$duration))*20 # add column with expected values from sequence$duration @ 20Hz
difference$deviation = difference$Freq-difference$duration
View(difference)
table(rawdata$period)
